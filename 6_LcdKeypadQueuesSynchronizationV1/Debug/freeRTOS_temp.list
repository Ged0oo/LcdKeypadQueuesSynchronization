
freeRTOS_temp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d08  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08004e18  08004e18  00014e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f20  08004f20  000200a8  2**0
                  CONTENTS
  4 .ARM          00000000  08004f20  08004f20  000200a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f20  08004f20  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f20  08004f20  00014f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f24  08004f24  00014f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08004f28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001978  200000a8  08004fd0  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a20  08004fd0  00021a20  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d228  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002855  00000000  00000000  0002d33c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c40  00000000  00000000  0002fb98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000092a  00000000  00000000  000307d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018087  00000000  00000000  00031102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dde4  00000000  00000000  00049189  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a22c  00000000  00000000  00056f6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002f90  00000000  00000000  000e119c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000e412c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000a8 	.word	0x200000a8
 800012c:	00000000 	.word	0x00000000
 8000130:	08004e00 	.word	0x08004e00

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000ac 	.word	0x200000ac
 800014c:	08004e00 	.word	0x08004e00

08000150 <MGPIO_voidInitPortPin>:

static void MGPIO_voidConfgPin_Mode(GPIO_t *GPIOx , uint8_t Copy_u8Pin , uint8_t Copy_u8Mode);


void MGPIO_voidInitPortPin(GPIO_ConfigType *_gpio)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b084      	sub	sp, #16
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
	uint8_t Copy_u8Pin  = _gpio->GPIO_PinNumber;
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	791b      	ldrb	r3, [r3, #4]
 800015c:	73fb      	strb	r3, [r7, #15]
	uint8_t Copy_u8Mode = _gpio->GPIO_PinMode;
 800015e:	687b      	ldr	r3, [r7, #4]
 8000160:	795b      	ldrb	r3, [r3, #5]
 8000162:	73bb      	strb	r3, [r7, #14]
	if(Copy_u8Pin > 15)
 8000164:	7bfb      	ldrb	r3, [r7, #15]
 8000166:	2b0f      	cmp	r3, #15
 8000168:	d80d      	bhi.n	8000186 <MGPIO_voidInitPortPin+0x36>
	{
		return;
	}
	MGPIO_voidConfgPin_Mode(_gpio->GPIOx , Copy_u8Pin , Copy_u8Mode);
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	681b      	ldr	r3, [r3, #0]
 800016e:	7bba      	ldrb	r2, [r7, #14]
 8000170:	7bf9      	ldrb	r1, [r7, #15]
 8000172:	4618      	mov	r0, r3
 8000174:	f000 f80b 	bl	800018e <MGPIO_voidConfgPin_Mode>
	MGPIO_voidWritePortPin(_gpio , _gpio->GPIO_Logic);
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	799b      	ldrb	r3, [r3, #6]
 800017c:	4619      	mov	r1, r3
 800017e:	6878      	ldr	r0, [r7, #4]
 8000180:	f000 f84a 	bl	8000218 <MGPIO_voidWritePortPin>
 8000184:	e000      	b.n	8000188 <MGPIO_voidInitPortPin+0x38>
		return;
 8000186:	bf00      	nop
}
 8000188:	3710      	adds	r7, #16
 800018a:	46bd      	mov	sp, r7
 800018c:	bd80      	pop	{r7, pc}

0800018e <MGPIO_voidConfgPin_Mode>:


static void MGPIO_voidConfgPin_Mode(GPIO_t *GPIOx , uint8_t Copy_u8Pin , uint8_t Copy_u8Mode)
{
 800018e:	b480      	push	{r7}
 8000190:	b083      	sub	sp, #12
 8000192:	af00      	add	r7, sp, #0
 8000194:	6078      	str	r0, [r7, #4]
 8000196:	460b      	mov	r3, r1
 8000198:	70fb      	strb	r3, [r7, #3]
 800019a:	4613      	mov	r3, r2
 800019c:	70bb      	strb	r3, [r7, #2]
	if(Copy_u8Pin > 15)
 800019e:	78fb      	ldrb	r3, [r7, #3]
 80001a0:	2b0f      	cmp	r3, #15
 80001a2:	d834      	bhi.n	800020e <MGPIO_voidConfgPin_Mode+0x80>
	{
		return;
	}

	if (Copy_u8Pin <= 7)
 80001a4:	78fb      	ldrb	r3, [r7, #3]
 80001a6:	2b07      	cmp	r3, #7
 80001a8:	d815      	bhi.n	80001d6 <MGPIO_voidConfgPin_Mode+0x48>
	{
		/* clear bits */
		GPIOx->CRL &= ~(0xF << Copy_u8Pin*4); /* multiplied *4 because every pin uses 4 bits*/
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	78fa      	ldrb	r2, [r7, #3]
 80001b0:	0092      	lsls	r2, r2, #2
 80001b2:	210f      	movs	r1, #15
 80001b4:	fa01 f202 	lsl.w	r2, r1, r2
 80001b8:	43d2      	mvns	r2, r2
 80001ba:	401a      	ands	r2, r3
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	601a      	str	r2, [r3, #0]
		
		/*Assign needed mode*/
		GPIOx->CRL |= (Copy_u8Mode << Copy_u8Pin*4);
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	78b9      	ldrb	r1, [r7, #2]
 80001c6:	78fa      	ldrb	r2, [r7, #3]
 80001c8:	0092      	lsls	r2, r2, #2
 80001ca:	fa01 f202 	lsl.w	r2, r1, r2
 80001ce:	431a      	orrs	r2, r3
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	601a      	str	r2, [r3, #0]
 80001d4:	e01c      	b.n	8000210 <MGPIO_voidConfgPin_Mode+0x82>
	}
	else if(Copy_u8Pin <= 15)
 80001d6:	78fb      	ldrb	r3, [r7, #3]
 80001d8:	2b0f      	cmp	r3, #15
 80001da:	d819      	bhi.n	8000210 <MGPIO_voidConfgPin_Mode+0x82>
	{
		//return pin index to be from p0 to p7
		Copy_u8Pin = Copy_u8Pin - 8;
 80001dc:	78fb      	ldrb	r3, [r7, #3]
 80001de:	3b08      	subs	r3, #8
 80001e0:	70fb      	strb	r3, [r7, #3]
		
		/*clear bits*/
		GPIOx->CRH &= ~(0xF << Copy_u8Pin*4);
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	685b      	ldr	r3, [r3, #4]
 80001e6:	78fa      	ldrb	r2, [r7, #3]
 80001e8:	0092      	lsls	r2, r2, #2
 80001ea:	210f      	movs	r1, #15
 80001ec:	fa01 f202 	lsl.w	r2, r1, r2
 80001f0:	43d2      	mvns	r2, r2
 80001f2:	401a      	ands	r2, r3
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	605a      	str	r2, [r3, #4]
		
		/*Assign needed mode*/
		GPIOx->CRH |= (Copy_u8Mode << Copy_u8Pin*4);
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	685b      	ldr	r3, [r3, #4]
 80001fc:	78b9      	ldrb	r1, [r7, #2]
 80001fe:	78fa      	ldrb	r2, [r7, #3]
 8000200:	0092      	lsls	r2, r2, #2
 8000202:	fa01 f202 	lsl.w	r2, r1, r2
 8000206:	431a      	orrs	r2, r3
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	605a      	str	r2, [r3, #4]
 800020c:	e000      	b.n	8000210 <MGPIO_voidConfgPin_Mode+0x82>
		return;
 800020e:	bf00      	nop
	}
}
 8000210:	370c      	adds	r7, #12
 8000212:	46bd      	mov	sp, r7
 8000214:	bc80      	pop	{r7}
 8000216:	4770      	bx	lr

08000218 <MGPIO_voidWritePortPin>:



void MGPIO_voidWritePortPin(GPIO_ConfigType *_gpio , uint8_t Copy_u8Val)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	460b      	mov	r3, r1
 8000222:	70fb      	strb	r3, [r7, #3]
	if(_gpio->GPIO_PinNumber > 15)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	791b      	ldrb	r3, [r3, #4]
 8000228:	2b0f      	cmp	r3, #15
 800022a:	d816      	bhi.n	800025a <MGPIO_voidWritePortPin+0x42>
	{
		return;
	}

	if(Copy_u8Val == GPIO_HIGH)
 800022c:	78fb      	ldrb	r3, [r7, #3]
 800022e:	2b01      	cmp	r3, #1
 8000230:	d109      	bne.n	8000246 <MGPIO_voidWritePortPin+0x2e>
	{
		_gpio->GPIOx->BSRR = 1 << (_gpio->GPIO_PinNumber);
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	791b      	ldrb	r3, [r3, #4]
 8000236:	461a      	mov	r2, r3
 8000238:	2301      	movs	r3, #1
 800023a:	fa03 f202 	lsl.w	r2, r3, r2
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	611a      	str	r2, [r3, #16]
 8000244:	e00a      	b.n	800025c <MGPIO_voidWritePortPin+0x44>
	}
	else
	{
		_gpio->GPIOx->BRR  = 1 << (_gpio->GPIO_PinNumber);
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	791b      	ldrb	r3, [r3, #4]
 800024a:	461a      	mov	r2, r3
 800024c:	2301      	movs	r3, #1
 800024e:	fa03 f202 	lsl.w	r2, r3, r2
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	615a      	str	r2, [r3, #20]
 8000258:	e000      	b.n	800025c <MGPIO_voidWritePortPin+0x44>
		return;
 800025a:	bf00      	nop
	}
}
 800025c:	370c      	adds	r7, #12
 800025e:	46bd      	mov	sp, r7
 8000260:	bc80      	pop	{r7}
 8000262:	4770      	bx	lr

08000264 <MGPIO_u8ReadPortPin>:


uint8_t MGPIO_u8ReadPortPin(GPIO_ConfigType *_gpio)
{
 8000264:	b480      	push	{r7}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
	if(_gpio->GPIO_PinNumber > 15)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	791b      	ldrb	r3, [r3, #4]
 8000270:	2b0f      	cmp	r3, #15
 8000272:	d901      	bls.n	8000278 <MGPIO_u8ReadPortPin+0x14>
	{
		return 0;
 8000274:	2300      	movs	r3, #0
 8000276:	e009      	b.n	800028c <MGPIO_u8ReadPortPin+0x28>
	}

	return GET_BIT(_gpio->GPIOx->IDR , _gpio->GPIO_PinNumber);
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	689b      	ldr	r3, [r3, #8]
 800027e:	687a      	ldr	r2, [r7, #4]
 8000280:	7912      	ldrb	r2, [r2, #4]
 8000282:	40d3      	lsrs	r3, r2
 8000284:	b2db      	uxtb	r3, r3
 8000286:	f003 0301 	and.w	r3, r3, #1
 800028a:	b2db      	uxtb	r3, r3
}
 800028c:	4618      	mov	r0, r3
 800028e:	370c      	adds	r7, #12
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr

08000296 <keypad_initialize>:
};



void keypad_initialize(ST_Keypad_t *_keypad_obj)
{
 8000296:	b580      	push	{r7, lr}
 8000298:	b084      	sub	sp, #16
 800029a:	af00      	add	r7, sp, #0
 800029c:	6078      	str	r0, [r7, #4]
    uint8_t rows_counter = 0;
 800029e:	2300      	movs	r3, #0
 80002a0:	73fb      	strb	r3, [r7, #15]
    uint8_t columns_counter = 0;
 80002a2:	2300      	movs	r3, #0
 80002a4:	73bb      	strb	r3, [r7, #14]

	if(NULL == _keypad_obj) return;
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d034      	beq.n	8000316 <keypad_initialize+0x80>
	else
	{
		for(rows_counter=0 ; rows_counter<KEYPAD_ROWS ; rows_counter++)
 80002ac:	2300      	movs	r3, #0
 80002ae:	73fb      	strb	r3, [r7, #15]
 80002b0:	e015      	b.n	80002de <keypad_initialize+0x48>
		{
			_keypad_obj->row_pin[rows_counter].GPIO_PinMode = GPIO_OUT;
 80002b2:	7bfb      	ldrb	r3, [r7, #15]
 80002b4:	687a      	ldr	r2, [r7, #4]
 80002b6:	00db      	lsls	r3, r3, #3
 80002b8:	4413      	add	r3, r2
 80002ba:	2201      	movs	r2, #1
 80002bc:	715a      	strb	r2, [r3, #5]
			_keypad_obj->row_pin[rows_counter].GPIO_Logic = GPIO_LOW;
 80002be:	7bfb      	ldrb	r3, [r7, #15]
 80002c0:	687a      	ldr	r2, [r7, #4]
 80002c2:	00db      	lsls	r3, r3, #3
 80002c4:	4413      	add	r3, r2
 80002c6:	2200      	movs	r2, #0
 80002c8:	719a      	strb	r2, [r3, #6]
			MGPIO_voidInitPortPin(&(_keypad_obj->row_pin[rows_counter]));
 80002ca:	7bfb      	ldrb	r3, [r7, #15]
 80002cc:	00db      	lsls	r3, r3, #3
 80002ce:	687a      	ldr	r2, [r7, #4]
 80002d0:	4413      	add	r3, r2
 80002d2:	4618      	mov	r0, r3
 80002d4:	f7ff ff3c 	bl	8000150 <MGPIO_voidInitPortPin>
		for(rows_counter=0 ; rows_counter<KEYPAD_ROWS ; rows_counter++)
 80002d8:	7bfb      	ldrb	r3, [r7, #15]
 80002da:	3301      	adds	r3, #1
 80002dc:	73fb      	strb	r3, [r7, #15]
 80002de:	7bfb      	ldrb	r3, [r7, #15]
 80002e0:	2b03      	cmp	r3, #3
 80002e2:	d9e6      	bls.n	80002b2 <keypad_initialize+0x1c>
		}
		for(columns_counter=0 ; columns_counter<KEYPAD_COLUMNS ; columns_counter++)
 80002e4:	2300      	movs	r3, #0
 80002e6:	73bb      	strb	r3, [r7, #14]
 80002e8:	e011      	b.n	800030e <keypad_initialize+0x78>
		{
			_keypad_obj->column_pin[columns_counter].GPIO_PinMode = GPIO_IN;
 80002ea:	7bbb      	ldrb	r3, [r7, #14]
 80002ec:	687a      	ldr	r2, [r7, #4]
 80002ee:	3304      	adds	r3, #4
 80002f0:	00db      	lsls	r3, r3, #3
 80002f2:	4413      	add	r3, r2
 80002f4:	2208      	movs	r2, #8
 80002f6:	715a      	strb	r2, [r3, #5]
			MGPIO_voidInitPortPin(&(_keypad_obj->column_pin[columns_counter]));
 80002f8:	7bbb      	ldrb	r3, [r7, #14]
 80002fa:	3304      	adds	r3, #4
 80002fc:	00db      	lsls	r3, r3, #3
 80002fe:	687a      	ldr	r2, [r7, #4]
 8000300:	4413      	add	r3, r2
 8000302:	4618      	mov	r0, r3
 8000304:	f7ff ff24 	bl	8000150 <MGPIO_voidInitPortPin>
		for(columns_counter=0 ; columns_counter<KEYPAD_COLUMNS ; columns_counter++)
 8000308:	7bbb      	ldrb	r3, [r7, #14]
 800030a:	3301      	adds	r3, #1
 800030c:	73bb      	strb	r3, [r7, #14]
 800030e:	7bbb      	ldrb	r3, [r7, #14]
 8000310:	2b03      	cmp	r3, #3
 8000312:	d9ea      	bls.n	80002ea <keypad_initialize+0x54>
 8000314:	e000      	b.n	8000318 <keypad_initialize+0x82>
	if(NULL == _keypad_obj) return;
 8000316:	bf00      	nop
		}
	}
}
 8000318:	3710      	adds	r7, #16
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
	...

08000320 <read_keypad>:


char read_keypad (ST_Keypad_t *_keypad_obj)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b084      	sub	sp, #16
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
	uint8_t value = NOTPRESSED;
 8000328:	23ff      	movs	r3, #255	; 0xff
 800032a:	73fb      	strb	r3, [r7, #15]
	for(uint8_t rows_counter=0 ; rows_counter<KEYPAD_ROWS ; rows_counter++)
 800032c:	2300      	movs	r3, #0
 800032e:	73bb      	strb	r3, [r7, #14]
 8000330:	e043      	b.n	80003ba <read_keypad+0x9a>
	{
		for(uint8_t counter=0 ; counter<KEYPAD_ROWS ; counter++)
 8000332:	2300      	movs	r3, #0
 8000334:	737b      	strb	r3, [r7, #13]
 8000336:	e00a      	b.n	800034e <read_keypad+0x2e>
		{
			MGPIO_voidWritePortPin(&(_keypad_obj->row_pin[counter]), GPIO_HIGH);
 8000338:	7b7b      	ldrb	r3, [r7, #13]
 800033a:	00db      	lsls	r3, r3, #3
 800033c:	687a      	ldr	r2, [r7, #4]
 800033e:	4413      	add	r3, r2
 8000340:	2101      	movs	r1, #1
 8000342:	4618      	mov	r0, r3
 8000344:	f7ff ff68 	bl	8000218 <MGPIO_voidWritePortPin>
		for(uint8_t counter=0 ; counter<KEYPAD_ROWS ; counter++)
 8000348:	7b7b      	ldrb	r3, [r7, #13]
 800034a:	3301      	adds	r3, #1
 800034c:	737b      	strb	r3, [r7, #13]
 800034e:	7b7b      	ldrb	r3, [r7, #13]
 8000350:	2b03      	cmp	r3, #3
 8000352:	d9f1      	bls.n	8000338 <read_keypad+0x18>
		}

		MGPIO_voidWritePortPin(&(_keypad_obj->row_pin[rows_counter]), GPIO_LOW);
 8000354:	7bbb      	ldrb	r3, [r7, #14]
 8000356:	00db      	lsls	r3, r3, #3
 8000358:	687a      	ldr	r2, [r7, #4]
 800035a:	4413      	add	r3, r2
 800035c:	2100      	movs	r1, #0
 800035e:	4618      	mov	r0, r3
 8000360:	f7ff ff5a 	bl	8000218 <MGPIO_voidWritePortPin>

		for(uint8_t columns_counter=0 ; columns_counter<KEYPAD_COLUMNS ; columns_counter++)
 8000364:	2300      	movs	r3, #0
 8000366:	733b      	strb	r3, [r7, #12]
 8000368:	e021      	b.n	80003ae <read_keypad+0x8e>
		{
			if( GPIO_LOW == MGPIO_u8ReadPortPin(&(_keypad_obj->column_pin[columns_counter])))
 800036a:	7b3b      	ldrb	r3, [r7, #12]
 800036c:	3304      	adds	r3, #4
 800036e:	00db      	lsls	r3, r3, #3
 8000370:	687a      	ldr	r2, [r7, #4]
 8000372:	4413      	add	r3, r2
 8000374:	4618      	mov	r0, r3
 8000376:	f7ff ff75 	bl	8000264 <MGPIO_u8ReadPortPin>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d113      	bne.n	80003a8 <read_keypad+0x88>
			{
				while (GPIO_LOW == MGPIO_u8ReadPortPin(&(_keypad_obj->column_pin[columns_counter])));
 8000380:	bf00      	nop
 8000382:	7b3b      	ldrb	r3, [r7, #12]
 8000384:	3304      	adds	r3, #4
 8000386:	00db      	lsls	r3, r3, #3
 8000388:	687a      	ldr	r2, [r7, #4]
 800038a:	4413      	add	r3, r2
 800038c:	4618      	mov	r0, r3
 800038e:	f7ff ff69 	bl	8000264 <MGPIO_u8ReadPortPin>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d0f4      	beq.n	8000382 <read_keypad+0x62>
				value = btn_values[rows_counter][columns_counter];
 8000398:	7bba      	ldrb	r2, [r7, #14]
 800039a:	7b3b      	ldrb	r3, [r7, #12]
 800039c:	490b      	ldr	r1, [pc, #44]	; (80003cc <read_keypad+0xac>)
 800039e:	0092      	lsls	r2, r2, #2
 80003a0:	440a      	add	r2, r1
 80003a2:	4413      	add	r3, r2
 80003a4:	781b      	ldrb	r3, [r3, #0]
 80003a6:	73fb      	strb	r3, [r7, #15]
		for(uint8_t columns_counter=0 ; columns_counter<KEYPAD_COLUMNS ; columns_counter++)
 80003a8:	7b3b      	ldrb	r3, [r7, #12]
 80003aa:	3301      	adds	r3, #1
 80003ac:	733b      	strb	r3, [r7, #12]
 80003ae:	7b3b      	ldrb	r3, [r7, #12]
 80003b0:	2b03      	cmp	r3, #3
 80003b2:	d9da      	bls.n	800036a <read_keypad+0x4a>
	for(uint8_t rows_counter=0 ; rows_counter<KEYPAD_ROWS ; rows_counter++)
 80003b4:	7bbb      	ldrb	r3, [r7, #14]
 80003b6:	3301      	adds	r3, #1
 80003b8:	73bb      	strb	r3, [r7, #14]
 80003ba:	7bbb      	ldrb	r3, [r7, #14]
 80003bc:	2b03      	cmp	r3, #3
 80003be:	d9b8      	bls.n	8000332 <read_keypad+0x12>
			}
		}
	}
	return value;
 80003c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80003c2:	4618      	mov	r0, r3
 80003c4:	3710      	adds	r7, #16
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	08004e7c 	.word	0x08004e7c

080003d0 <lcd_4bit_intialize>:
};



void lcd_4bit_intialize(chr_lcd_4bit_t *lcd)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b084      	sub	sp, #16
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
	uint8_t l_data_pins_counter = 0;
 80003d8:	2300      	movs	r3, #0
 80003da:	73fb      	strb	r3, [r7, #15]
	if(NULL == lcd)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d05e      	beq.n	80004a0 <lcd_4bit_intialize+0xd0>
	{
		return;
	}
	else
	{
		lcd->lcd_rs.GPIO_PinMode = GPIO_PIN_GENERAL_PURPOSE_OUTPUT_PUSHPULL_MODE_2MHZ;
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	2202      	movs	r2, #2
 80003e6:	715a      	strb	r2, [r3, #5]
		lcd->lcd_rw.GPIO_PinMode = GPIO_PIN_GENERAL_PURPOSE_OUTPUT_PUSHPULL_MODE_2MHZ;
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	2202      	movs	r2, #2
 80003ec:	735a      	strb	r2, [r3, #13]
		lcd->lcd_en.GPIO_PinMode = GPIO_PIN_GENERAL_PURPOSE_OUTPUT_PUSHPULL_MODE_2MHZ;
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	2202      	movs	r2, #2
 80003f2:	755a      	strb	r2, [r3, #21]

		lcd->lcd_rs.GPIO_Logic = GPIO_LOW;
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	2200      	movs	r2, #0
 80003f8:	719a      	strb	r2, [r3, #6]
		lcd->lcd_rw.GPIO_Logic = GPIO_LOW;
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	2200      	movs	r2, #0
 80003fe:	739a      	strb	r2, [r3, #14]
		lcd->lcd_en.GPIO_Logic = GPIO_LOW;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	2200      	movs	r2, #0
 8000404:	759a      	strb	r2, [r3, #22]

		MGPIO_voidInitPortPin(&(lcd->lcd_rs));
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	4618      	mov	r0, r3
 800040a:	f7ff fea1 	bl	8000150 <MGPIO_voidInitPortPin>
		MGPIO_voidInitPortPin(&(lcd->lcd_rw));
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	3308      	adds	r3, #8
 8000412:	4618      	mov	r0, r3
 8000414:	f7ff fe9c 	bl	8000150 <MGPIO_voidInitPortPin>
		MGPIO_voidInitPortPin(&(lcd->lcd_en));
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	3310      	adds	r3, #16
 800041c:	4618      	mov	r0, r3
 800041e:	f7ff fe97 	bl	8000150 <MGPIO_voidInitPortPin>

		for(l_data_pins_counter=0 ; l_data_pins_counter<4 ; l_data_pins_counter++)
 8000422:	2300      	movs	r3, #0
 8000424:	73fb      	strb	r3, [r7, #15]
 8000426:	e018      	b.n	800045a <lcd_4bit_intialize+0x8a>
		{
			lcd->lcd_data[l_data_pins_counter].GPIO_PinMode = GPIO_PIN_GENERAL_PURPOSE_OUTPUT_PUSHPULL_MODE_2MHZ;
 8000428:	7bfb      	ldrb	r3, [r7, #15]
 800042a:	687a      	ldr	r2, [r7, #4]
 800042c:	3303      	adds	r3, #3
 800042e:	00db      	lsls	r3, r3, #3
 8000430:	4413      	add	r3, r2
 8000432:	2202      	movs	r2, #2
 8000434:	715a      	strb	r2, [r3, #5]
			lcd->lcd_data[l_data_pins_counter].GPIO_Logic = GPIO_LOW;
 8000436:	7bfb      	ldrb	r3, [r7, #15]
 8000438:	687a      	ldr	r2, [r7, #4]
 800043a:	3303      	adds	r3, #3
 800043c:	00db      	lsls	r3, r3, #3
 800043e:	4413      	add	r3, r2
 8000440:	2200      	movs	r2, #0
 8000442:	719a      	strb	r2, [r3, #6]
			MGPIO_voidInitPortPin(&(lcd->lcd_data[l_data_pins_counter]));
 8000444:	7bfb      	ldrb	r3, [r7, #15]
 8000446:	3303      	adds	r3, #3
 8000448:	00db      	lsls	r3, r3, #3
 800044a:	687a      	ldr	r2, [r7, #4]
 800044c:	4413      	add	r3, r2
 800044e:	4618      	mov	r0, r3
 8000450:	f7ff fe7e 	bl	8000150 <MGPIO_voidInitPortPin>
		for(l_data_pins_counter=0 ; l_data_pins_counter<4 ; l_data_pins_counter++)
 8000454:	7bfb      	ldrb	r3, [r7, #15]
 8000456:	3301      	adds	r3, #1
 8000458:	73fb      	strb	r3, [r7, #15]
 800045a:	7bfb      	ldrb	r3, [r7, #15]
 800045c:	2b03      	cmp	r3, #3
 800045e:	d9e3      	bls.n	8000428 <lcd_4bit_intialize+0x58>
		}

		HAL_Delay(20);
 8000460:	2014      	movs	r0, #20
 8000462:	f000 fd2d 	bl	8000ec0 <HAL_Delay>
		lcd_4bit_send_command(lcd, 0x33);
 8000466:	2133      	movs	r1, #51	; 0x33
 8000468:	6878      	ldr	r0, [r7, #4]
 800046a:	f000 f81d 	bl	80004a8 <lcd_4bit_send_command>
		lcd_4bit_send_command(lcd, 0x32);
 800046e:	2132      	movs	r1, #50	; 0x32
 8000470:	6878      	ldr	r0, [r7, #4]
 8000472:	f000 f819 	bl	80004a8 <lcd_4bit_send_command>
		lcd_4bit_send_command(lcd, _LCD_4BIT_MODE_2_LINE);
 8000476:	2128      	movs	r1, #40	; 0x28
 8000478:	6878      	ldr	r0, [r7, #4]
 800047a:	f000 f815 	bl	80004a8 <lcd_4bit_send_command>
		lcd_4bit_send_command(lcd, _LCD_DISPLAY_ON_UNDERLINE_OFF_CURSOR_OFF);
 800047e:	210c      	movs	r1, #12
 8000480:	6878      	ldr	r0, [r7, #4]
 8000482:	f000 f811 	bl	80004a8 <lcd_4bit_send_command>
		lcd_4bit_send_command(lcd, _LCD_ENTRY_MODE_INC_SHIFT_OFF);
 8000486:	2106      	movs	r1, #6
 8000488:	6878      	ldr	r0, [r7, #4]
 800048a:	f000 f80d 	bl	80004a8 <lcd_4bit_send_command>
		lcd_4bit_send_command(lcd, _LCD_DDRAM_START);
 800048e:	2180      	movs	r1, #128	; 0x80
 8000490:	6878      	ldr	r0, [r7, #4]
 8000492:	f000 f809 	bl	80004a8 <lcd_4bit_send_command>
		lcd_4bit_send_command(lcd, _LCD_CLEAR);
 8000496:	2101      	movs	r1, #1
 8000498:	6878      	ldr	r0, [r7, #4]
 800049a:	f000 f805 	bl	80004a8 <lcd_4bit_send_command>
 800049e:	e000      	b.n	80004a2 <lcd_4bit_intialize+0xd2>
		return;
 80004a0:	bf00      	nop
	}
}
 80004a2:	3710      	adds	r7, #16
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}

080004a8 <lcd_4bit_send_command>:

void lcd_4bit_send_command(chr_lcd_4bit_t *lcd, uint8_t command)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
 80004b0:	460b      	mov	r3, r1
 80004b2:	70fb      	strb	r3, [r7, #3]
	if(NULL == lcd)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d01d      	beq.n	80004f6 <lcd_4bit_send_command+0x4e>
	{
		return;
	}
	else
	{
		MGPIO_voidWritePortPin(&(lcd->lcd_rs), GPIO_LOW);
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	2100      	movs	r1, #0
 80004be:	4618      	mov	r0, r3
 80004c0:	f7ff feaa 	bl	8000218 <MGPIO_voidWritePortPin>
		MGPIO_voidWritePortPin(&(lcd->lcd_rw), GPIO_LOW);
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	3308      	adds	r3, #8
 80004c8:	2100      	movs	r1, #0
 80004ca:	4618      	mov	r0, r3
 80004cc:	f7ff fea4 	bl	8000218 <MGPIO_voidWritePortPin>
		lcd_send_4bits(lcd, command >> 4);
 80004d0:	78fb      	ldrb	r3, [r7, #3]
 80004d2:	091b      	lsrs	r3, r3, #4
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	4619      	mov	r1, r3
 80004d8:	6878      	ldr	r0, [r7, #4]
 80004da:	f000 f88b 	bl	80005f4 <lcd_send_4bits>
		lcd_4bit_send_enable_signal(lcd);
 80004de:	6878      	ldr	r0, [r7, #4]
 80004e0:	f000 f8c4 	bl	800066c <lcd_4bit_send_enable_signal>
		lcd_send_4bits(lcd, command);
 80004e4:	78fb      	ldrb	r3, [r7, #3]
 80004e6:	4619      	mov	r1, r3
 80004e8:	6878      	ldr	r0, [r7, #4]
 80004ea:	f000 f883 	bl	80005f4 <lcd_send_4bits>
		lcd_4bit_send_enable_signal(lcd);
 80004ee:	6878      	ldr	r0, [r7, #4]
 80004f0:	f000 f8bc 	bl	800066c <lcd_4bit_send_enable_signal>
 80004f4:	e000      	b.n	80004f8 <lcd_4bit_send_command+0x50>
		return;
 80004f6:	bf00      	nop
	}
}
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}

080004fe <lcd_4bit_send_char_data>:
		lcd_4bit_send_char_data_pos(lcd, row, column, mem_pos);
	}
}

void lcd_4bit_send_char_data(chr_lcd_4bit_t *lcd, uint8_t data)
{
 80004fe:	b580      	push	{r7, lr}
 8000500:	b082      	sub	sp, #8
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
 8000506:	460b      	mov	r3, r1
 8000508:	70fb      	strb	r3, [r7, #3]
	if(NULL == lcd)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d01d      	beq.n	800054c <lcd_4bit_send_char_data+0x4e>
	{
		return;
	}
	else
	{
		MGPIO_voidWritePortPin(&(lcd->lcd_rs), GPIO_HIGH);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	2101      	movs	r1, #1
 8000514:	4618      	mov	r0, r3
 8000516:	f7ff fe7f 	bl	8000218 <MGPIO_voidWritePortPin>
		MGPIO_voidWritePortPin(&(lcd->lcd_rw), GPIO_LOW);
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	3308      	adds	r3, #8
 800051e:	2100      	movs	r1, #0
 8000520:	4618      	mov	r0, r3
 8000522:	f7ff fe79 	bl	8000218 <MGPIO_voidWritePortPin>
		lcd_send_4bits(lcd, data >> 4);
 8000526:	78fb      	ldrb	r3, [r7, #3]
 8000528:	091b      	lsrs	r3, r3, #4
 800052a:	b2db      	uxtb	r3, r3
 800052c:	4619      	mov	r1, r3
 800052e:	6878      	ldr	r0, [r7, #4]
 8000530:	f000 f860 	bl	80005f4 <lcd_send_4bits>
		lcd_4bit_send_enable_signal(lcd);
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	f000 f899 	bl	800066c <lcd_4bit_send_enable_signal>
		lcd_send_4bits(lcd, data);
 800053a:	78fb      	ldrb	r3, [r7, #3]
 800053c:	4619      	mov	r1, r3
 800053e:	6878      	ldr	r0, [r7, #4]
 8000540:	f000 f858 	bl	80005f4 <lcd_send_4bits>
		lcd_4bit_send_enable_signal(lcd);
 8000544:	6878      	ldr	r0, [r7, #4]
 8000546:	f000 f891 	bl	800066c <lcd_4bit_send_enable_signal>
 800054a:	e000      	b.n	800054e <lcd_4bit_send_char_data+0x50>
		return;
 800054c:	bf00      	nop
	}
}
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}

08000554 <lcd_4bit_send_char_data_pos>:


void lcd_4bit_send_char_data_pos(chr_lcd_4bit_t *lcd,uint8_t row, uint8_t column, uint8_t data)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	4608      	mov	r0, r1
 800055e:	4611      	mov	r1, r2
 8000560:	461a      	mov	r2, r3
 8000562:	4603      	mov	r3, r0
 8000564:	70fb      	strb	r3, [r7, #3]
 8000566:	460b      	mov	r3, r1
 8000568:	70bb      	strb	r3, [r7, #2]
 800056a:	4613      	mov	r3, r2
 800056c:	707b      	strb	r3, [r7, #1]
	if(NULL == lcd)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d00b      	beq.n	800058c <lcd_4bit_send_char_data_pos+0x38>
	{
		return;
	}
	else
	{
		lcd_4bit_set_cursor(lcd, row, column);
 8000574:	78ba      	ldrb	r2, [r7, #2]
 8000576:	78fb      	ldrb	r3, [r7, #3]
 8000578:	4619      	mov	r1, r3
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f000 f89e 	bl	80006bc <lcd_4bit_set_cursor>
		lcd_4bit_send_char_data(lcd, data);
 8000580:	787b      	ldrb	r3, [r7, #1]
 8000582:	4619      	mov	r1, r3
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	f7ff ffba 	bl	80004fe <lcd_4bit_send_char_data>
 800058a:	e000      	b.n	800058e <lcd_4bit_send_char_data_pos+0x3a>
		return;
 800058c:	bf00      	nop
	}
}
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <lcd_4bit_send_string_pos>:
	}
}


void lcd_4bit_send_string_pos(chr_lcd_4bit_t *lcd, uint8_t row, uint8_t column, uint8_t *str)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	460b      	mov	r3, r1
 80005a0:	72fb      	strb	r3, [r7, #11]
 80005a2:	4613      	mov	r3, r2
 80005a4:	72bb      	strb	r3, [r7, #10]
	if(NULL == lcd)
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d013      	beq.n	80005d4 <lcd_4bit_send_string_pos+0x40>
	{
		return;
	}
	else
	{
		lcd_4bit_set_cursor(lcd, row, column);
 80005ac:	7aba      	ldrb	r2, [r7, #10]
 80005ae:	7afb      	ldrb	r3, [r7, #11]
 80005b0:	4619      	mov	r1, r3
 80005b2:	68f8      	ldr	r0, [r7, #12]
 80005b4:	f000 f882 	bl	80006bc <lcd_4bit_set_cursor>
		while(*str)
 80005b8:	e007      	b.n	80005ca <lcd_4bit_send_string_pos+0x36>
		{
			lcd_4bit_send_char_data(lcd, *str++);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	1c5a      	adds	r2, r3, #1
 80005be:	607a      	str	r2, [r7, #4]
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	4619      	mov	r1, r3
 80005c4:	68f8      	ldr	r0, [r7, #12]
 80005c6:	f7ff ff9a 	bl	80004fe <lcd_4bit_send_char_data>
		while(*str)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d1f3      	bne.n	80005ba <lcd_4bit_send_string_pos+0x26>
 80005d2:	e000      	b.n	80005d6 <lcd_4bit_send_string_pos+0x42>
		return;
 80005d4:	bf00      	nop
		}
	}
}
 80005d6:	3710      	adds	r7, #16
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <LCD_Clear>:


void LCD_Clear(chr_lcd_4bit_t *lcd)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	lcd_4bit_send_command(lcd, _LCD_CLEAR);
 80005e4:	2101      	movs	r1, #1
 80005e6:	6878      	ldr	r0, [r7, #4]
 80005e8:	f7ff ff5e 	bl	80004a8 <lcd_4bit_send_command>
}
 80005ec:	bf00      	nop
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <lcd_send_4bits>:




static void lcd_send_4bits(chr_lcd_4bit_t *lcd, uint8_t _data_command)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	460b      	mov	r3, r1
 80005fe:	70fb      	strb	r3, [r7, #3]
	MGPIO_voidWritePortPin(&(lcd->lcd_data[0]), (_data_command >> 0) & (uint8_t)0x01);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	f103 0218 	add.w	r2, r3, #24
 8000606:	78fb      	ldrb	r3, [r7, #3]
 8000608:	f003 0301 	and.w	r3, r3, #1
 800060c:	b2db      	uxtb	r3, r3
 800060e:	4619      	mov	r1, r3
 8000610:	4610      	mov	r0, r2
 8000612:	f7ff fe01 	bl	8000218 <MGPIO_voidWritePortPin>
	MGPIO_voidWritePortPin(&(lcd->lcd_data[1]), (_data_command >> 1) & (uint8_t)0x01);
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	f103 0220 	add.w	r2, r3, #32
 800061c:	78fb      	ldrb	r3, [r7, #3]
 800061e:	085b      	lsrs	r3, r3, #1
 8000620:	b2db      	uxtb	r3, r3
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	b2db      	uxtb	r3, r3
 8000628:	4619      	mov	r1, r3
 800062a:	4610      	mov	r0, r2
 800062c:	f7ff fdf4 	bl	8000218 <MGPIO_voidWritePortPin>
	MGPIO_voidWritePortPin(&(lcd->lcd_data[2]), (_data_command >> 2) & (uint8_t)0x01);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8000636:	78fb      	ldrb	r3, [r7, #3]
 8000638:	089b      	lsrs	r3, r3, #2
 800063a:	b2db      	uxtb	r3, r3
 800063c:	f003 0301 	and.w	r3, r3, #1
 8000640:	b2db      	uxtb	r3, r3
 8000642:	4619      	mov	r1, r3
 8000644:	4610      	mov	r0, r2
 8000646:	f7ff fde7 	bl	8000218 <MGPIO_voidWritePortPin>
	MGPIO_voidWritePortPin(&(lcd->lcd_data[3]), (_data_command >> 3) & (uint8_t)0x01);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8000650:	78fb      	ldrb	r3, [r7, #3]
 8000652:	08db      	lsrs	r3, r3, #3
 8000654:	b2db      	uxtb	r3, r3
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	b2db      	uxtb	r3, r3
 800065c:	4619      	mov	r1, r3
 800065e:	4610      	mov	r0, r2
 8000660:	f7ff fdda 	bl	8000218 <MGPIO_voidWritePortPin>
}
 8000664:	bf00      	nop
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}

0800066c <lcd_4bit_send_enable_signal>:


static void lcd_4bit_send_enable_signal(chr_lcd_4bit_t *lcd)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	MGPIO_voidWritePortPin(&(lcd->lcd_en), GPIO_HIGH);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	3310      	adds	r3, #16
 8000678:	2101      	movs	r1, #1
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff fdcc 	bl	8000218 <MGPIO_voidWritePortPin>
	//__delay_us(5);
	for(uint8_t i=0 ; i<10 ; i++);
 8000680:	2300      	movs	r3, #0
 8000682:	73fb      	strb	r3, [r7, #15]
 8000684:	e002      	b.n	800068c <lcd_4bit_send_enable_signal+0x20>
 8000686:	7bfb      	ldrb	r3, [r7, #15]
 8000688:	3301      	adds	r3, #1
 800068a:	73fb      	strb	r3, [r7, #15]
 800068c:	7bfb      	ldrb	r3, [r7, #15]
 800068e:	2b09      	cmp	r3, #9
 8000690:	d9f9      	bls.n	8000686 <lcd_4bit_send_enable_signal+0x1a>
	MGPIO_voidWritePortPin(&(lcd->lcd_en), GPIO_LOW);
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	3310      	adds	r3, #16
 8000696:	2100      	movs	r1, #0
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff fdbd 	bl	8000218 <MGPIO_voidWritePortPin>
	for(uint16_t i=0 ; i<2000 ; i++);
 800069e:	2300      	movs	r3, #0
 80006a0:	81bb      	strh	r3, [r7, #12]
 80006a2:	e002      	b.n	80006aa <lcd_4bit_send_enable_signal+0x3e>
 80006a4:	89bb      	ldrh	r3, [r7, #12]
 80006a6:	3301      	adds	r3, #1
 80006a8:	81bb      	strh	r3, [r7, #12]
 80006aa:	89bb      	ldrh	r3, [r7, #12]
 80006ac:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80006b0:	d3f8      	bcc.n	80006a4 <lcd_4bit_send_enable_signal+0x38>
}
 80006b2:	bf00      	nop
 80006b4:	bf00      	nop
 80006b6:	3710      	adds	r7, #16
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <lcd_4bit_set_cursor>:


static void lcd_4bit_set_cursor(chr_lcd_4bit_t *lcd, uint8_t row, uint8_t coulmn)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	460b      	mov	r3, r1
 80006c6:	70fb      	strb	r3, [r7, #3]
 80006c8:	4613      	mov	r3, r2
 80006ca:	70bb      	strb	r3, [r7, #2]
    coulmn--;
 80006cc:	78bb      	ldrb	r3, [r7, #2]
 80006ce:	3b01      	subs	r3, #1
 80006d0:	70bb      	strb	r3, [r7, #2]
    switch(row)
 80006d2:	78fb      	ldrb	r3, [r7, #3]
 80006d4:	3b01      	subs	r3, #1
 80006d6:	2b03      	cmp	r3, #3
 80006d8:	d82a      	bhi.n	8000730 <lcd_4bit_set_cursor+0x74>
 80006da:	a201      	add	r2, pc, #4	; (adr r2, 80006e0 <lcd_4bit_set_cursor+0x24>)
 80006dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006e0:	080006f1 	.word	0x080006f1
 80006e4:	08000701 	.word	0x08000701
 80006e8:	08000711 	.word	0x08000711
 80006ec:	08000721 	.word	0x08000721
    {
        case ROW1 :
        	lcd_4bit_send_command(lcd, (0x80 + coulmn));
 80006f0:	78bb      	ldrb	r3, [r7, #2]
 80006f2:	3b80      	subs	r3, #128	; 0x80
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	4619      	mov	r1, r3
 80006f8:	6878      	ldr	r0, [r7, #4]
 80006fa:	f7ff fed5 	bl	80004a8 <lcd_4bit_send_command>
        	break;
 80006fe:	e017      	b.n	8000730 <lcd_4bit_set_cursor+0x74>

        case ROW2 :
        	lcd_4bit_send_command(lcd, (0xc0 + coulmn));
 8000700:	78bb      	ldrb	r3, [r7, #2]
 8000702:	3b40      	subs	r3, #64	; 0x40
 8000704:	b2db      	uxtb	r3, r3
 8000706:	4619      	mov	r1, r3
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	f7ff fecd 	bl	80004a8 <lcd_4bit_send_command>
        	break;
 800070e:	e00f      	b.n	8000730 <lcd_4bit_set_cursor+0x74>

        case ROW3 :
        	lcd_4bit_send_command(lcd, (0x94 + coulmn));
 8000710:	78bb      	ldrb	r3, [r7, #2]
 8000712:	3b6c      	subs	r3, #108	; 0x6c
 8000714:	b2db      	uxtb	r3, r3
 8000716:	4619      	mov	r1, r3
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f7ff fec5 	bl	80004a8 <lcd_4bit_send_command>
        	break;
 800071e:	e007      	b.n	8000730 <lcd_4bit_set_cursor+0x74>

        case ROW4 :
        	lcd_4bit_send_command(lcd, (0xd4 + coulmn));
 8000720:	78bb      	ldrb	r3, [r7, #2]
 8000722:	3b2c      	subs	r3, #44	; 0x2c
 8000724:	b2db      	uxtb	r3, r3
 8000726:	4619      	mov	r1, r3
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	f7ff febd 	bl	80004a8 <lcd_4bit_send_command>
        	break;
 800072e:	bf00      	nop

        default : ;
    }
}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <MRCC_voidClockInit>:
static void MRCC_voidClockSource(uint8_t Copy_u8xClock);
static void MRCC_voidPLL_Clock_Source(uint8_t Copy_u8xPLL_Source);


void MRCC_voidClockInit(RCC_Config_t *RCC_Config)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	if(NULL == RCC_Config)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d016      	beq.n	8000774 <MRCC_voidClockInit+0x3c>
	{
		return;
	}
	else
	{
		MRCC_voidClockSource(RCC_Config->ClockSource);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	4618      	mov	r0, r3
 800074c:	f000 f852 	bl	80007f4 <MRCC_voidClockSource>
		if(RCC_Config->ClockSource == RCC_PLL)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b02      	cmp	r3, #2
 8000756:	d109      	bne.n	800076c <MRCC_voidClockInit+0x34>
		{
			MRCC_voidPLL_Clock_Source(RCC_Config->PLL_Config.PLL_Source);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	785b      	ldrb	r3, [r3, #1]
 800075c:	4618      	mov	r0, r3
 800075e:	f000 f8d9 	bl	8000914 <MRCC_voidPLL_Clock_Source>
			MRCC_voidPLL_Mul(RCC_Config->PLL_Config.PLL_Mul_Factor);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	789b      	ldrb	r3, [r3, #2]
 8000766:	4618      	mov	r0, r3
 8000768:	f000 f95a 	bl	8000a20 <MRCC_voidPLL_Mul>
		else if(RCC_Config->ClockSource == RCC_HSI)
		{
			/* HSI Trim function*/
		}
		/* Adjust Prescaler */
		MRCC_voidBus_Prescaler(RCC_Config);
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f000 f96b 	bl	8000a48 <MRCC_voidBus_Prescaler>
 8000772:	e000      	b.n	8000776 <MRCC_voidClockInit+0x3e>
		return;
 8000774:	bf00      	nop
	}
}
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}

0800077c <MRCC_voidPeripheralClockEnable>:


void MRCC_voidPeripheralClockEnable(uint8_t Copy_u8BusName, RCC_Peripheral_t Copy_u8PeripheralName)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	460a      	mov	r2, r1
 8000786:	71fb      	strb	r3, [r7, #7]
 8000788:	4613      	mov	r3, r2
 800078a:	71bb      	strb	r3, [r7, #6]
	switch(Copy_u8BusName)
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	2b02      	cmp	r3, #2
 8000790:	d01c      	beq.n	80007cc <MRCC_voidPeripheralClockEnable+0x50>
 8000792:	2b02      	cmp	r3, #2
 8000794:	dc25      	bgt.n	80007e2 <MRCC_voidPeripheralClockEnable+0x66>
 8000796:	2b00      	cmp	r3, #0
 8000798:	d002      	beq.n	80007a0 <MRCC_voidPeripheralClockEnable+0x24>
 800079a:	2b01      	cmp	r3, #1
 800079c:	d00b      	beq.n	80007b6 <MRCC_voidPeripheralClockEnable+0x3a>
		SET_BIT(RCC->APB2ENR,Copy_u8PeripheralName);
		break;

	default:
		/* return error */
		break;
 800079e:	e020      	b.n	80007e2 <MRCC_voidPeripheralClockEnable+0x66>
		SET_BIT(RCC->AHBENR,Copy_u8PeripheralName);
 80007a0:	4b13      	ldr	r3, [pc, #76]	; (80007f0 <MRCC_voidPeripheralClockEnable+0x74>)
 80007a2:	695b      	ldr	r3, [r3, #20]
 80007a4:	79ba      	ldrb	r2, [r7, #6]
 80007a6:	2101      	movs	r1, #1
 80007a8:	fa01 f202 	lsl.w	r2, r1, r2
 80007ac:	4611      	mov	r1, r2
 80007ae:	4a10      	ldr	r2, [pc, #64]	; (80007f0 <MRCC_voidPeripheralClockEnable+0x74>)
 80007b0:	430b      	orrs	r3, r1
 80007b2:	6153      	str	r3, [r2, #20]
		break;
 80007b4:	e016      	b.n	80007e4 <MRCC_voidPeripheralClockEnable+0x68>
		SET_BIT(RCC->APB1ENR,Copy_u8PeripheralName);
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <MRCC_voidPeripheralClockEnable+0x74>)
 80007b8:	69db      	ldr	r3, [r3, #28]
 80007ba:	79ba      	ldrb	r2, [r7, #6]
 80007bc:	2101      	movs	r1, #1
 80007be:	fa01 f202 	lsl.w	r2, r1, r2
 80007c2:	4611      	mov	r1, r2
 80007c4:	4a0a      	ldr	r2, [pc, #40]	; (80007f0 <MRCC_voidPeripheralClockEnable+0x74>)
 80007c6:	430b      	orrs	r3, r1
 80007c8:	61d3      	str	r3, [r2, #28]
		break;
 80007ca:	e00b      	b.n	80007e4 <MRCC_voidPeripheralClockEnable+0x68>
		SET_BIT(RCC->APB2ENR,Copy_u8PeripheralName);
 80007cc:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <MRCC_voidPeripheralClockEnable+0x74>)
 80007ce:	699b      	ldr	r3, [r3, #24]
 80007d0:	79ba      	ldrb	r2, [r7, #6]
 80007d2:	2101      	movs	r1, #1
 80007d4:	fa01 f202 	lsl.w	r2, r1, r2
 80007d8:	4611      	mov	r1, r2
 80007da:	4a05      	ldr	r2, [pc, #20]	; (80007f0 <MRCC_voidPeripheralClockEnable+0x74>)
 80007dc:	430b      	orrs	r3, r1
 80007de:	6193      	str	r3, [r2, #24]
		break;
 80007e0:	e000      	b.n	80007e4 <MRCC_voidPeripheralClockEnable+0x68>
		break;
 80007e2:	bf00      	nop
	}
}
 80007e4:	bf00      	nop
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bc80      	pop	{r7}
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	40021000 	.word	0x40021000

080007f4 <MRCC_voidClockSource>:

}


static void MRCC_voidClockSource(uint8_t Copy_u8xClock)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	71fb      	strb	r3, [r7, #7]
	/*First clear configuration bits*/
	CLEAR_BIT(RCC->CFGR , 0);
 80007fe:	4b44      	ldr	r3, [pc, #272]	; (8000910 <MRCC_voidClockSource+0x11c>)
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	4a43      	ldr	r2, [pc, #268]	; (8000910 <MRCC_voidClockSource+0x11c>)
 8000804:	f023 0301 	bic.w	r3, r3, #1
 8000808:	6053      	str	r3, [r2, #4]
	CLEAR_BIT(RCC->CFGR , 1);
 800080a:	4b41      	ldr	r3, [pc, #260]	; (8000910 <MRCC_voidClockSource+0x11c>)
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	4a40      	ldr	r2, [pc, #256]	; (8000910 <MRCC_voidClockSource+0x11c>)
 8000810:	f023 0302 	bic.w	r3, r3, #2
 8000814:	6053      	str	r3, [r2, #4]

	/*Choose clock source*/
	switch(Copy_u8xClock)
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	2b02      	cmp	r3, #2
 800081a:	d040      	beq.n	800089e <MRCC_voidClockSource+0xaa>
 800081c:	2b02      	cmp	r3, #2
 800081e:	dc58      	bgt.n	80008d2 <MRCC_voidClockSource+0xde>
 8000820:	2b00      	cmp	r3, #0
 8000822:	d002      	beq.n	800082a <MRCC_voidClockSource+0x36>
 8000824:	2b01      	cmp	r3, #1
 8000826:	d01a      	beq.n	800085e <MRCC_voidClockSource+0x6a>
 8000828:	e053      	b.n	80008d2 <MRCC_voidClockSource+0xde>
	{
	/* Internal clock*/
	case RCC_HSI:
		/*Set HSION BIT*/
		SET_BIT(RCC->CR , 0);
 800082a:	4b39      	ldr	r3, [pc, #228]	; (8000910 <MRCC_voidClockSource+0x11c>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4a38      	ldr	r2, [pc, #224]	; (8000910 <MRCC_voidClockSource+0x11c>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6013      	str	r3, [r2, #0]
		/*Wait until the clock is stable*/
		while(BIT_IS_CLEAR(RCC->CR , 1));
 8000836:	bf00      	nop
 8000838:	4b35      	ldr	r3, [pc, #212]	; (8000910 <MRCC_voidClockSource+0x11c>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f003 0302 	and.w	r3, r3, #2
 8000840:	2b00      	cmp	r3, #0
 8000842:	d0f9      	beq.n	8000838 <MRCC_voidClockSource+0x44>
		
		/* Select HSI as clock source */
		CLEAR_BIT(RCC->CFGR , 0);
 8000844:	4b32      	ldr	r3, [pc, #200]	; (8000910 <MRCC_voidClockSource+0x11c>)
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	4a31      	ldr	r2, [pc, #196]	; (8000910 <MRCC_voidClockSource+0x11c>)
 800084a:	f023 0301 	bic.w	r3, r3, #1
 800084e:	6053      	str	r3, [r2, #4]
		CLEAR_BIT(RCC->CFGR , 1);
 8000850:	4b2f      	ldr	r3, [pc, #188]	; (8000910 <MRCC_voidClockSource+0x11c>)
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	4a2e      	ldr	r2, [pc, #184]	; (8000910 <MRCC_voidClockSource+0x11c>)
 8000856:	f023 0302 	bic.w	r3, r3, #2
 800085a:	6053      	str	r3, [r2, #4]
		break;
 800085c:	e053      	b.n	8000906 <MRCC_voidClockSource+0x112>

		/*External clock*/
	case RCC_HSE :
		/* Set HSEON BIT */
		SET_BIT(RCC->CR , 16);
 800085e:	4b2c      	ldr	r3, [pc, #176]	; (8000910 <MRCC_voidClockSource+0x11c>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4a2b      	ldr	r2, [pc, #172]	; (8000910 <MRCC_voidClockSource+0x11c>)
 8000864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000868:	6013      	str	r3, [r2, #0]
		/* Check if Bypass is on */
		#if RCC_HSE_BYPASS == HSE_BYPASS_OFF_CRYSTAL
				CLEAR_BIT(RCC->CR , 18);
 800086a:	4b29      	ldr	r3, [pc, #164]	; (8000910 <MRCC_voidClockSource+0x11c>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a28      	ldr	r2, [pc, #160]	; (8000910 <MRCC_voidClockSource+0x11c>)
 8000870:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000874:	6013      	str	r3, [r2, #0]
		#elif RCC_HSE_BYPASS == HSE_BYPASS_ON_RC
				SET_BIT(RCC->CR , 18);
		#endif
		/*Wait until external clock is stable*/
		while(BIT_IS_CLEAR(RCC->CR , 17));
 8000876:	bf00      	nop
 8000878:	4b25      	ldr	r3, [pc, #148]	; (8000910 <MRCC_voidClockSource+0x11c>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000880:	2b00      	cmp	r3, #0
 8000882:	d0f9      	beq.n	8000878 <MRCC_voidClockSource+0x84>

		/* Select HSE as clock source */
		SET_BIT(RCC->CFGR , 0);
 8000884:	4b22      	ldr	r3, [pc, #136]	; (8000910 <MRCC_voidClockSource+0x11c>)
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	4a21      	ldr	r2, [pc, #132]	; (8000910 <MRCC_voidClockSource+0x11c>)
 800088a:	f043 0301 	orr.w	r3, r3, #1
 800088e:	6053      	str	r3, [r2, #4]
		CLEAR_BIT(RCC->CFGR , 1);
 8000890:	4b1f      	ldr	r3, [pc, #124]	; (8000910 <MRCC_voidClockSource+0x11c>)
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	4a1e      	ldr	r2, [pc, #120]	; (8000910 <MRCC_voidClockSource+0x11c>)
 8000896:	f023 0302 	bic.w	r3, r3, #2
 800089a:	6053      	str	r3, [r2, #4]
		break;
 800089c:	e033      	b.n	8000906 <MRCC_voidClockSource+0x112>

		/*PLL clock*/
	case RCC_PLL:
		/* Set PLLON BIT */
		SET_BIT(RCC->CR , 24);
 800089e:	4b1c      	ldr	r3, [pc, #112]	; (8000910 <MRCC_voidClockSource+0x11c>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a1b      	ldr	r2, [pc, #108]	; (8000910 <MRCC_voidClockSource+0x11c>)
 80008a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008a8:	6013      	str	r3, [r2, #0]
		/*Wait until PLL clock is stable*/
		while(BIT_IS_CLEAR(RCC->CR , 25));
 80008aa:	bf00      	nop
 80008ac:	4b18      	ldr	r3, [pc, #96]	; (8000910 <MRCC_voidClockSource+0x11c>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d0f9      	beq.n	80008ac <MRCC_voidClockSource+0xb8>

		CLEAR_BIT(RCC->CFGR , 0);
 80008b8:	4b15      	ldr	r3, [pc, #84]	; (8000910 <MRCC_voidClockSource+0x11c>)
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	4a14      	ldr	r2, [pc, #80]	; (8000910 <MRCC_voidClockSource+0x11c>)
 80008be:	f023 0301 	bic.w	r3, r3, #1
 80008c2:	6053      	str	r3, [r2, #4]
		SET_BIT(RCC->CFGR , 1);
 80008c4:	4b12      	ldr	r3, [pc, #72]	; (8000910 <MRCC_voidClockSource+0x11c>)
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	4a11      	ldr	r2, [pc, #68]	; (8000910 <MRCC_voidClockSource+0x11c>)
 80008ca:	f043 0302 	orr.w	r3, r3, #2
 80008ce:	6053      	str	r3, [r2, #4]
		break;
 80008d0:	e019      	b.n	8000906 <MRCC_voidClockSource+0x112>

		/* default HSI will be used */
	default:
		/*Set HSION BIT*/
		SET_BIT(RCC->CR , 0);
 80008d2:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <MRCC_voidClockSource+0x11c>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a0e      	ldr	r2, [pc, #56]	; (8000910 <MRCC_voidClockSource+0x11c>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	6013      	str	r3, [r2, #0]
		/*Wait until the clock is stable*/
		while(BIT_IS_CLEAR(RCC->CR , 1));
 80008de:	bf00      	nop
 80008e0:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <MRCC_voidClockSource+0x11c>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f003 0302 	and.w	r3, r3, #2
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d0f9      	beq.n	80008e0 <MRCC_voidClockSource+0xec>
		
		/* Select HSI as clock source */
		CLEAR_BIT(RCC->CFGR , 0);
 80008ec:	4b08      	ldr	r3, [pc, #32]	; (8000910 <MRCC_voidClockSource+0x11c>)
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	4a07      	ldr	r2, [pc, #28]	; (8000910 <MRCC_voidClockSource+0x11c>)
 80008f2:	f023 0301 	bic.w	r3, r3, #1
 80008f6:	6053      	str	r3, [r2, #4]
		CLEAR_BIT(RCC->CFGR , 1);
 80008f8:	4b05      	ldr	r3, [pc, #20]	; (8000910 <MRCC_voidClockSource+0x11c>)
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	4a04      	ldr	r2, [pc, #16]	; (8000910 <MRCC_voidClockSource+0x11c>)
 80008fe:	f023 0302 	bic.w	r3, r3, #2
 8000902:	6053      	str	r3, [r2, #4]
		break;
 8000904:	bf00      	nop
	}
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr
 8000910:	40021000 	.word	0x40021000

08000914 <MRCC_voidPLL_Clock_Source>:


static void MRCC_voidPLL_Clock_Source(uint8_t Copy_u8xPLL_Source)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	71fb      	strb	r3, [r7, #7]
	/* First Clear the Bits */
	CLEAR_BIT(RCC->CFGR,17);
 800091e:	4b3f      	ldr	r3, [pc, #252]	; (8000a1c <MRCC_voidPLL_Clock_Source+0x108>)
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	4a3e      	ldr	r2, [pc, #248]	; (8000a1c <MRCC_voidPLL_Clock_Source+0x108>)
 8000924:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000928:	6053      	str	r3, [r2, #4]
	CLEAR_BIT(RCC->CFGR,16);
 800092a:	4b3c      	ldr	r3, [pc, #240]	; (8000a1c <MRCC_voidPLL_Clock_Source+0x108>)
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	4a3b      	ldr	r2, [pc, #236]	; (8000a1c <MRCC_voidPLL_Clock_Source+0x108>)
 8000930:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000934:	6053      	str	r3, [r2, #4]

	switch(Copy_u8xPLL_Source)
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	2b02      	cmp	r3, #2
 800093a:	d048      	beq.n	80009ce <MRCC_voidPLL_Clock_Source+0xba>
 800093c:	2b02      	cmp	r3, #2
 800093e:	dc5a      	bgt.n	80009f6 <MRCC_voidPLL_Clock_Source+0xe2>
 8000940:	2b00      	cmp	r3, #0
 8000942:	d002      	beq.n	800094a <MRCC_voidPLL_Clock_Source+0x36>
 8000944:	2b01      	cmp	r3, #1
 8000946:	d021      	beq.n	800098c <MRCC_voidPLL_Clock_Source+0x78>
 8000948:	e055      	b.n	80009f6 <MRCC_voidPLL_Clock_Source+0xe2>
	{
		case PLL_SRC_HSE_NOT_DEVIDED:
			/* Set HSEON BIT */
			SET_BIT(RCC->CR,16);
 800094a:	4b34      	ldr	r3, [pc, #208]	; (8000a1c <MRCC_voidPLL_Clock_Source+0x108>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a33      	ldr	r2, [pc, #204]	; (8000a1c <MRCC_voidPLL_Clock_Source+0x108>)
 8000950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000954:	6013      	str	r3, [r2, #0]
			/*Wait until external clock is stable*/
			while(BIT_IS_CLEAR(RCC->CR,17));
 8000956:	bf00      	nop
 8000958:	4b30      	ldr	r3, [pc, #192]	; (8000a1c <MRCC_voidPLL_Clock_Source+0x108>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000960:	2b00      	cmp	r3, #0
 8000962:	d0f9      	beq.n	8000958 <MRCC_voidPLL_Clock_Source+0x44>

			/*Select HSE as PLL source*/
			CLEAR_BIT(RCC->CFGR,17);
 8000964:	4b2d      	ldr	r3, [pc, #180]	; (8000a1c <MRCC_voidPLL_Clock_Source+0x108>)
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	4a2c      	ldr	r2, [pc, #176]	; (8000a1c <MRCC_voidPLL_Clock_Source+0x108>)
 800096a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800096e:	6053      	str	r3, [r2, #4]
			SET_BIT(RCC->CFGR,16);
 8000970:	4b2a      	ldr	r3, [pc, #168]	; (8000a1c <MRCC_voidPLL_Clock_Source+0x108>)
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	4a29      	ldr	r2, [pc, #164]	; (8000a1c <MRCC_voidPLL_Clock_Source+0x108>)
 8000976:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800097a:	6053      	str	r3, [r2, #4]
			
			/*Wait until external clock is stable*/
			while(BIT_IS_CLEAR(RCC->CR,17));
 800097c:	bf00      	nop
 800097e:	4b27      	ldr	r3, [pc, #156]	; (8000a1c <MRCC_voidPLL_Clock_Source+0x108>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000986:	2b00      	cmp	r3, #0
 8000988:	d0f9      	beq.n	800097e <MRCC_voidPLL_Clock_Source+0x6a>
			break;
 800098a:	e042      	b.n	8000a12 <MRCC_voidPLL_Clock_Source+0xfe>
			
		case PLL_SRC_HSE_DEVIDED_BY_2:
			/* Set HSEON BIT */
			SET_BIT(RCC->CR,16);
 800098c:	4b23      	ldr	r3, [pc, #140]	; (8000a1c <MRCC_voidPLL_Clock_Source+0x108>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a22      	ldr	r2, [pc, #136]	; (8000a1c <MRCC_voidPLL_Clock_Source+0x108>)
 8000992:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000996:	6013      	str	r3, [r2, #0]
			/*Wait until external clock is stable*/
			while(BIT_IS_CLEAR(RCC->CR,17));
 8000998:	bf00      	nop
 800099a:	4b20      	ldr	r3, [pc, #128]	; (8000a1c <MRCC_voidPLL_Clock_Source+0x108>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d0f9      	beq.n	800099a <MRCC_voidPLL_Clock_Source+0x86>

			/*Select HSE as PLL source*/
			SET_BIT(RCC->CFGR,17);
 80009a6:	4b1d      	ldr	r3, [pc, #116]	; (8000a1c <MRCC_voidPLL_Clock_Source+0x108>)
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	4a1c      	ldr	r2, [pc, #112]	; (8000a1c <MRCC_voidPLL_Clock_Source+0x108>)
 80009ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009b0:	6053      	str	r3, [r2, #4]
			SET_BIT(RCC->CFGR,16);
 80009b2:	4b1a      	ldr	r3, [pc, #104]	; (8000a1c <MRCC_voidPLL_Clock_Source+0x108>)
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	4a19      	ldr	r2, [pc, #100]	; (8000a1c <MRCC_voidPLL_Clock_Source+0x108>)
 80009b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009bc:	6053      	str	r3, [r2, #4]
			/*Wait until external clock is stable*/
			while(BIT_IS_CLEAR(RCC->CR,17));
 80009be:	bf00      	nop
 80009c0:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <MRCC_voidPLL_Clock_Source+0x108>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d0f9      	beq.n	80009c0 <MRCC_voidPLL_Clock_Source+0xac>
			break;
 80009cc:	e021      	b.n	8000a12 <MRCC_voidPLL_Clock_Source+0xfe>
			
		case PLL_SRC_HSI_DEVIDED_BY_2:
			/*Set HSION BIT*/
			SET_BIT(RCC->CR,0);
 80009ce:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <MRCC_voidPLL_Clock_Source+0x108>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a12      	ldr	r2, [pc, #72]	; (8000a1c <MRCC_voidPLL_Clock_Source+0x108>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	6013      	str	r3, [r2, #0]
			/*Wait until the clock is stable*/
			while(BIT_IS_CLEAR(RCC->CR,1));
 80009da:	bf00      	nop
 80009dc:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <MRCC_voidPLL_Clock_Source+0x108>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d0f9      	beq.n	80009dc <MRCC_voidPLL_Clock_Source+0xc8>

			CLEAR_BIT(RCC->CFGR,16);
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <MRCC_voidPLL_Clock_Source+0x108>)
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	4a0b      	ldr	r2, [pc, #44]	; (8000a1c <MRCC_voidPLL_Clock_Source+0x108>)
 80009ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009f2:	6053      	str	r3, [r2, #4]
			break;
 80009f4:	e00d      	b.n	8000a12 <MRCC_voidPLL_Clock_Source+0xfe>
			
			/* default the PLL clock source is internal clock */
		default:
			/*Set HSION BIT*/
			SET_BIT(RCC->CR,0);
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <MRCC_voidPLL_Clock_Source+0x108>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4a08      	ldr	r2, [pc, #32]	; (8000a1c <MRCC_voidPLL_Clock_Source+0x108>)
 80009fc:	f043 0301 	orr.w	r3, r3, #1
 8000a00:	6013      	str	r3, [r2, #0]
			/*Wait until the clock is stable*/
			while(BIT_IS_CLEAR(RCC->CR,1));
 8000a02:	bf00      	nop
 8000a04:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <MRCC_voidPLL_Clock_Source+0x108>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f003 0302 	and.w	r3, r3, #2
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d0f9      	beq.n	8000a04 <MRCC_voidPLL_Clock_Source+0xf0>
			break;
 8000a10:	bf00      	nop
	}
}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr
 8000a1c:	40021000 	.word	0x40021000

08000a20 <MRCC_voidPLL_Mul>:


static void MRCC_voidPLL_Mul(uint8_t Copy_u8xMul_Factor)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	71fb      	strb	r3, [r7, #7]
	RCC->CFGR |= (Copy_u8xMul_Factor << 18);
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MRCC_voidPLL_Mul+0x24>)
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	79fa      	ldrb	r2, [r7, #7]
 8000a30:	0492      	lsls	r2, r2, #18
 8000a32:	4611      	mov	r1, r2
 8000a34:	4a03      	ldr	r2, [pc, #12]	; (8000a44 <MRCC_voidPLL_Mul+0x24>)
 8000a36:	430b      	orrs	r3, r1
 8000a38:	6053      	str	r3, [r2, #4]
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr
 8000a44:	40021000 	.word	0x40021000

08000a48 <MRCC_voidBus_Prescaler>:


static void MRCC_voidBus_Prescaler(RCC_Config_t *Copy_u8RCC_Config)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	if(NULL == Copy_u8RCC_Config)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d01b      	beq.n	8000a8e <MRCC_voidBus_Prescaler+0x46>
	{
		return;
	}
	else
	{
		RCC->CFGR |= ((Copy_u8RCC_Config->Prescaler.AHB_Prescaler)  << 4);
 8000a56:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <MRCC_voidBus_Prescaler+0x50>)
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	78d2      	ldrb	r2, [r2, #3]
 8000a5e:	0112      	lsls	r2, r2, #4
 8000a60:	4611      	mov	r1, r2
 8000a62:	4a0d      	ldr	r2, [pc, #52]	; (8000a98 <MRCC_voidBus_Prescaler+0x50>)
 8000a64:	430b      	orrs	r3, r1
 8000a66:	6053      	str	r3, [r2, #4]
		RCC->CFGR |= ((Copy_u8RCC_Config->Prescaler.ABP1_Prescaler) << 8);
 8000a68:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <MRCC_voidBus_Prescaler+0x50>)
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	687a      	ldr	r2, [r7, #4]
 8000a6e:	7912      	ldrb	r2, [r2, #4]
 8000a70:	0212      	lsls	r2, r2, #8
 8000a72:	4611      	mov	r1, r2
 8000a74:	4a08      	ldr	r2, [pc, #32]	; (8000a98 <MRCC_voidBus_Prescaler+0x50>)
 8000a76:	430b      	orrs	r3, r1
 8000a78:	6053      	str	r3, [r2, #4]
		RCC->CFGR |= ((Copy_u8RCC_Config->Prescaler.ABP2_Prescaler) << 11);
 8000a7a:	4b07      	ldr	r3, [pc, #28]	; (8000a98 <MRCC_voidBus_Prescaler+0x50>)
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	7952      	ldrb	r2, [r2, #5]
 8000a82:	02d2      	lsls	r2, r2, #11
 8000a84:	4611      	mov	r1, r2
 8000a86:	4a04      	ldr	r2, [pc, #16]	; (8000a98 <MRCC_voidBus_Prescaler+0x50>)
 8000a88:	430b      	orrs	r3, r1
 8000a8a:	6053      	str	r3, [r2, #4]
 8000a8c:	e000      	b.n	8000a90 <MRCC_voidBus_Prescaler+0x48>
		return;
 8000a8e:	bf00      	nop
	}
}
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr
 8000a98:	40021000 	.word	0x40021000

08000a9c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem01 */
  myBinarySem01Handle = osSemaphoreNew(1, 0, &myBinarySem01_attributes);
 8000aa0:	4a10      	ldr	r2, [pc, #64]	; (8000ae4 <MX_FREERTOS_Init+0x48>)
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	f001 f801 	bl	8001aac <osSemaphoreNew>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	4a0e      	ldr	r2, [pc, #56]	; (8000ae8 <MX_FREERTOS_Init+0x4c>)
 8000aae:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (5, sizeof(uint8_t), &myQueue01_attributes);
 8000ab0:	4a0e      	ldr	r2, [pc, #56]	; (8000aec <MX_FREERTOS_Init+0x50>)
 8000ab2:	2101      	movs	r1, #1
 8000ab4:	2005      	movs	r0, #5
 8000ab6:	f001 f953 	bl	8001d60 <osMessageQueueNew>
 8000aba:	4603      	mov	r3, r0
 8000abc:	4a0c      	ldr	r2, [pc, #48]	; (8000af0 <MX_FREERTOS_Init+0x54>)
 8000abe:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of task1 */
  task1Handle = osThreadNew(vLcdTask, NULL, &task1_attributes);
 8000ac0:	4a0c      	ldr	r2, [pc, #48]	; (8000af4 <MX_FREERTOS_Init+0x58>)
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	480c      	ldr	r0, [pc, #48]	; (8000af8 <MX_FREERTOS_Init+0x5c>)
 8000ac6:	f000 ff47 	bl	8001958 <osThreadNew>
 8000aca:	4603      	mov	r3, r0
 8000acc:	4a0b      	ldr	r2, [pc, #44]	; (8000afc <MX_FREERTOS_Init+0x60>)
 8000ace:	6013      	str	r3, [r2, #0]

  /* creation of task2 */
  task2Handle = osThreadNew(vKeypadTask, NULL, &task2_attributes);
 8000ad0:	4a0b      	ldr	r2, [pc, #44]	; (8000b00 <MX_FREERTOS_Init+0x64>)
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	480b      	ldr	r0, [pc, #44]	; (8000b04 <MX_FREERTOS_Init+0x68>)
 8000ad6:	f000 ff3f 	bl	8001958 <osThreadNew>
 8000ada:	4603      	mov	r3, r0
 8000adc:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <MX_FREERTOS_Init+0x6c>)
 8000ade:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	08004eec 	.word	0x08004eec
 8000ae8:	200000d0 	.word	0x200000d0
 8000aec:	08004ed4 	.word	0x08004ed4
 8000af0:	200000cc 	.word	0x200000cc
 8000af4:	08004e8c 	.word	0x08004e8c
 8000af8:	08000b0d 	.word	0x08000b0d
 8000afc:	200000c4 	.word	0x200000c4
 8000b00:	08004eb0 	.word	0x08004eb0
 8000b04:	08000b55 	.word	0x08000b55
 8000b08:	200000c8 	.word	0x200000c8

08000b0c <vLcdTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_vLcdTask */
void vLcdTask(void *argument)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN vLcdTask */
	BaseType_t RetVal = pdTRUE;
 8000b14:	2301      	movs	r3, #1
 8000b16:	60fb      	str	r3, [r7, #12]
	uint8_t message = 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	72fb      	strb	r3, [r7, #11]
	/* Infinite loop */
	for(;;)
	{
		RetVal= xQueueReceive(myQueue01Handle, &message, HAL_MAX_DELAY);
 8000b1c:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <vLcdTask+0x3c>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f107 010b 	add.w	r1, r7, #11
 8000b24:	f04f 32ff 	mov.w	r2, #4294967295
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f001 fe4f 	bl	80027cc <xQueueReceive>
 8000b2e:	60f8      	str	r0, [r7, #12]
		lcd_4bit_send_char_data_pos(&lcd_1, 1, 14, message);
 8000b30:	7afb      	ldrb	r3, [r7, #11]
 8000b32:	220e      	movs	r2, #14
 8000b34:	2101      	movs	r1, #1
 8000b36:	4805      	ldr	r0, [pc, #20]	; (8000b4c <vLcdTask+0x40>)
 8000b38:	f7ff fd0c 	bl	8000554 <lcd_4bit_send_char_data_pos>
		osSemaphoreRelease(myBinarySem01Handle);
 8000b3c:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <vLcdTask+0x44>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f001 f8b5 	bl	8001cb0 <osSemaphoreRelease>
		RetVal= xQueueReceive(myQueue01Handle, &message, HAL_MAX_DELAY);
 8000b46:	e7e9      	b.n	8000b1c <vLcdTask+0x10>
 8000b48:	200000cc 	.word	0x200000cc
 8000b4c:	20000040 	.word	0x20000040
 8000b50:	200000d0 	.word	0x200000d0

08000b54 <vKeypadTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vKeypadTask */
void vKeypadTask(void *argument)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN vKeypadTask */
	BaseType_t RetVal = pdTRUE;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for(;;)
	{
		keypadVal = NOTPRESSED;
 8000b60:	4b1b      	ldr	r3, [pc, #108]	; (8000bd0 <vKeypadTask+0x7c>)
 8000b62:	22ff      	movs	r2, #255	; 0xff
 8000b64:	701a      	strb	r2, [r3, #0]
		keypadVal = read_keypad(&keypad_1);
 8000b66:	481b      	ldr	r0, [pc, #108]	; (8000bd4 <vKeypadTask+0x80>)
 8000b68:	f7ff fbda 	bl	8000320 <read_keypad>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	461a      	mov	r2, r3
 8000b70:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <vKeypadTask+0x7c>)
 8000b72:	701a      	strb	r2, [r3, #0]
		if(keypadVal != NOTPRESSED)
 8000b74:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <vKeypadTask+0x7c>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2bff      	cmp	r3, #255	; 0xff
 8000b7a:	d0f1      	beq.n	8000b60 <vKeypadTask+0xc>
		{
			LCD_Clear(&lcd_1);
 8000b7c:	4816      	ldr	r0, [pc, #88]	; (8000bd8 <vKeypadTask+0x84>)
 8000b7e:	f7ff fd2d 	bl	80005dc <LCD_Clear>
			if(keypadVal<'1' || keypadVal>'9') lcd_4bit_send_string_pos(&lcd_1, 1, 1, "Direction => ");
 8000b82:	4b13      	ldr	r3, [pc, #76]	; (8000bd0 <vKeypadTask+0x7c>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b30      	cmp	r3, #48	; 0x30
 8000b88:	d903      	bls.n	8000b92 <vKeypadTask+0x3e>
 8000b8a:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <vKeypadTask+0x7c>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	2b39      	cmp	r3, #57	; 0x39
 8000b90:	d906      	bls.n	8000ba0 <vKeypadTask+0x4c>
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <vKeypadTask+0x88>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	2101      	movs	r1, #1
 8000b98:	480f      	ldr	r0, [pc, #60]	; (8000bd8 <vKeypadTask+0x84>)
 8000b9a:	f7ff fcfb 	bl	8000594 <lcd_4bit_send_string_pos>
 8000b9e:	e005      	b.n	8000bac <vKeypadTask+0x58>
			else lcd_4bit_send_string_pos(&lcd_1, 1, 1, "Character => ");
 8000ba0:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <vKeypadTask+0x8c>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	480c      	ldr	r0, [pc, #48]	; (8000bd8 <vKeypadTask+0x84>)
 8000ba8:	f7ff fcf4 	bl	8000594 <lcd_4bit_send_string_pos>
			RetVal = xQueueSendToFront(myQueue01Handle, (void *)&keypadVal, HAL_MAX_DELAY);
 8000bac:	4b0d      	ldr	r3, [pc, #52]	; (8000be4 <vKeypadTask+0x90>)
 8000bae:	6818      	ldr	r0, [r3, #0]
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb6:	4906      	ldr	r1, [pc, #24]	; (8000bd0 <vKeypadTask+0x7c>)
 8000bb8:	f001 fbe4 	bl	8002384 <xQueueGenericSend>
 8000bbc:	60f8      	str	r0, [r7, #12]
			osSemaphoreAcquire(myBinarySem01Handle, HAL_MAX_DELAY);
 8000bbe:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <vKeypadTask+0x94>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f001 f80c 	bl	8001be4 <osSemaphoreAcquire>
		keypadVal = NOTPRESSED;
 8000bcc:	e7c8      	b.n	8000b60 <vKeypadTask+0xc>
 8000bce:	bf00      	nop
 8000bd0:	2000007e 	.word	0x2000007e
 8000bd4:	20000000 	.word	0x20000000
 8000bd8:	20000040 	.word	0x20000040
 8000bdc:	08004e44 	.word	0x08004e44
 8000be0:	08004e54 	.word	0x08004e54
 8000be4:	200000cc 	.word	0x200000cc
 8000be8:	200000d0 	.word	0x200000d0

08000bec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bf2:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <MX_GPIO_Init+0x24>)
 8000bf4:	4a06      	ldr	r2, [pc, #24]	; (8000c10 <MX_GPIO_Init+0x24>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	6193      	str	r3, [r2, #24]
 8000bfa:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <MX_GPIO_Init+0x24>)
 8000bfc:	699b      	ldr	r3, [r3, #24]
 8000bfe:	f003 0320 	and.w	r3, r3, #32
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]

}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr
 8000c10:	40021000 	.word	0x40021000

08000c14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c18:	f000 f8f0 	bl	8000dfc <HAL_Init>

  /* USER CODE BEGIN Init */

	MRCC_voidClockInit(&RCC_obj);
 8000c1c:	4812      	ldr	r0, [pc, #72]	; (8000c68 <main+0x54>)
 8000c1e:	f7ff fd8b 	bl	8000738 <MRCC_voidClockInit>
	MRCC_voidPeripheralClockEnable(RCC_APB2_BUS , RCC_GPIOA_CLOCK);
 8000c22:	2102      	movs	r1, #2
 8000c24:	2002      	movs	r0, #2
 8000c26:	f7ff fda9 	bl	800077c <MRCC_voidPeripheralClockEnable>
	MRCC_voidPeripheralClockEnable(RCC_APB2_BUS , RCC_GPIOB_CLOCK);
 8000c2a:	2103      	movs	r1, #3
 8000c2c:	2002      	movs	r0, #2
 8000c2e:	f7ff fda5 	bl	800077c <MRCC_voidPeripheralClockEnable>

	lcd_4bit_intialize(&lcd_1);
 8000c32:	480e      	ldr	r0, [pc, #56]	; (8000c6c <main+0x58>)
 8000c34:	f7ff fbcc 	bl	80003d0 <lcd_4bit_intialize>
	keypad_initialize(&keypad_1);
 8000c38:	480d      	ldr	r0, [pc, #52]	; (8000c70 <main+0x5c>)
 8000c3a:	f7ff fb2c 	bl	8000296 <keypad_initialize>
	MGPIO_voidInitPortPin(&DecrementButton);
 8000c3e:	480d      	ldr	r0, [pc, #52]	; (8000c74 <main+0x60>)
 8000c40:	f7ff fa86 	bl	8000150 <MGPIO_voidInitPortPin>
	MGPIO_voidInitPortPin(&ChoiceButton);
 8000c44:	480c      	ldr	r0, [pc, #48]	; (8000c78 <main+0x64>)
 8000c46:	f7ff fa83 	bl	8000150 <MGPIO_voidInitPortPin>
	MGPIO_voidInitPortPin(&IncrementButton);
 8000c4a:	480c      	ldr	r0, [pc, #48]	; (8000c7c <main+0x68>)
 8000c4c:	f7ff fa80 	bl	8000150 <MGPIO_voidInitPortPin>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c50:	f000 f816 	bl	8000c80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c54:	f7ff ffca 	bl	8000bec <MX_GPIO_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000c58:	f000 fe18 	bl	800188c <osKernelInitialize>
  MX_FREERTOS_Init();
 8000c5c:	f7ff ff1e 	bl	8000a9c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000c60:	f000 fe46 	bl	80018f0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <main+0x50>
 8000c66:	bf00      	nop
 8000c68:	20000078 	.word	0x20000078
 8000c6c:	20000040 	.word	0x20000040
 8000c70:	20000000 	.word	0x20000000
 8000c74:	20000080 	.word	0x20000080
 8000c78:	20000088 	.word	0x20000088
 8000c7c:	20000090 	.word	0x20000090

08000c80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b090      	sub	sp, #64	; 0x40
 8000c84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c86:	f107 0318 	add.w	r3, r7, #24
 8000c8a:	2228      	movs	r2, #40	; 0x28
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f004 f87c 	bl	8004d8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
 8000ca0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ca6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000caa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000cac:	2300      	movs	r3, #0
 8000cae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cbc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cc2:	f107 0318 	add.w	r3, r7, #24
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 fa02 	bl	80010d0 <HAL_RCC_OscConfig>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000cd2:	f000 f819 	bl	8000d08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd6:	230f      	movs	r3, #15
 8000cd8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000cde:	2380      	movs	r3, #128	; 0x80
 8000ce0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ce2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000ce6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cec:	1d3b      	adds	r3, r7, #4
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f000 fc6f 	bl	80015d4 <HAL_RCC_ClockConfig>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000cfc:	f000 f804 	bl	8000d08 <Error_Handler>
  }
}
 8000d00:	bf00      	nop
 8000d02:	3740      	adds	r7, #64	; 0x40
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d0c:	b672      	cpsid	i
}
 8000d0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <Error_Handler+0x8>
	...

08000d14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d1a:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <HAL_MspInit+0x48>)
 8000d1c:	699b      	ldr	r3, [r3, #24]
 8000d1e:	4a0f      	ldr	r2, [pc, #60]	; (8000d5c <HAL_MspInit+0x48>)
 8000d20:	f043 0302 	orr.w	r3, r3, #2
 8000d24:	6193      	str	r3, [r2, #24]
 8000d26:	4b0d      	ldr	r3, [pc, #52]	; (8000d5c <HAL_MspInit+0x48>)
 8000d28:	699b      	ldr	r3, [r3, #24]
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	607b      	str	r3, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d32:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <HAL_MspInit+0x48>)
 8000d34:	4a09      	ldr	r2, [pc, #36]	; (8000d5c <HAL_MspInit+0x48>)
 8000d36:	69db      	ldr	r3, [r3, #28]
 8000d38:	61d3      	str	r3, [r2, #28]
 8000d3a:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <HAL_MspInit+0x48>)
 8000d3c:	69db      	ldr	r3, [r3, #28]
 8000d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d42:	603b      	str	r3, [r7, #0]
 8000d44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d46:	2200      	movs	r2, #0
 8000d48:	210f      	movs	r1, #15
 8000d4a:	f06f 0001 	mvn.w	r0, #1
 8000d4e:	f000 f996 	bl	800107e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40021000 	.word	0x40021000

08000d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <NMI_Handler+0x4>

08000d66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d6a:	e7fe      	b.n	8000d6a <HardFault_Handler+0x4>

08000d6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <MemManage_Handler+0x4>

08000d72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <BusFault_Handler+0x4>

08000d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <UsageFault_Handler+0x4>

08000d7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bc80      	pop	{r7}
 8000d88:	4770      	bx	lr

08000d8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d8e:	f000 f87b 	bl	8000e88 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000d92:	f002 ff3b 	bl	8003c0c <xTaskGetSchedulerState>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d001      	beq.n	8000da0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000d9c:	f003 fd9c 	bl	80048d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr

08000db0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000db0:	f7ff fff8 	bl	8000da4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000db4:	480b      	ldr	r0, [pc, #44]	; (8000de4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000db6:	490c      	ldr	r1, [pc, #48]	; (8000de8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000db8:	4a0c      	ldr	r2, [pc, #48]	; (8000dec <LoopFillZerobss+0x16>)
  movs r3, #0
 8000dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dbc:	e002      	b.n	8000dc4 <LoopCopyDataInit>

08000dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc2:	3304      	adds	r3, #4

08000dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc8:	d3f9      	bcc.n	8000dbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dca:	4a09      	ldr	r2, [pc, #36]	; (8000df0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000dcc:	4c09      	ldr	r4, [pc, #36]	; (8000df4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd0:	e001      	b.n	8000dd6 <LoopFillZerobss>

08000dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd4:	3204      	adds	r2, #4

08000dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd8:	d3fb      	bcc.n	8000dd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dda:	f003 ffdf 	bl	8004d9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dde:	f7ff ff19 	bl	8000c14 <main>
  bx lr
 8000de2:	4770      	bx	lr
  ldr r0, =_sdata
 8000de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de8:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8000dec:	08004f28 	.word	0x08004f28
  ldr r2, =_sbss
 8000df0:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8000df4:	20001a20 	.word	0x20001a20

08000df8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000df8:	e7fe      	b.n	8000df8 <ADC1_2_IRQHandler>
	...

08000dfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e00:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <HAL_Init+0x28>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a07      	ldr	r2, [pc, #28]	; (8000e24 <HAL_Init+0x28>)
 8000e06:	f043 0310 	orr.w	r3, r3, #16
 8000e0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e0c:	2003      	movs	r0, #3
 8000e0e:	f000 f92b 	bl	8001068 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e12:	200f      	movs	r0, #15
 8000e14:	f000 f808 	bl	8000e28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e18:	f7ff ff7c 	bl	8000d14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40022000 	.word	0x40022000

08000e28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <HAL_InitTick+0x54>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <HAL_InitTick+0x58>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e46:	4618      	mov	r0, r3
 8000e48:	f000 f935 	bl	80010b6 <HAL_SYSTICK_Config>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e00e      	b.n	8000e74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2b0f      	cmp	r3, #15
 8000e5a:	d80a      	bhi.n	8000e72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	6879      	ldr	r1, [r7, #4]
 8000e60:	f04f 30ff 	mov.w	r0, #4294967295
 8000e64:	f000 f90b 	bl	800107e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e68:	4a06      	ldr	r2, [pc, #24]	; (8000e84 <HAL_InitTick+0x5c>)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	e000      	b.n	8000e74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000098 	.word	0x20000098
 8000e80:	200000a0 	.word	0x200000a0
 8000e84:	2000009c 	.word	0x2000009c

08000e88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e8c:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <HAL_IncTick+0x1c>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	461a      	mov	r2, r3
 8000e92:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <HAL_IncTick+0x20>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4413      	add	r3, r2
 8000e98:	4a03      	ldr	r2, [pc, #12]	; (8000ea8 <HAL_IncTick+0x20>)
 8000e9a:	6013      	str	r3, [r2, #0]
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr
 8000ea4:	200000a0 	.word	0x200000a0
 8000ea8:	200000d4 	.word	0x200000d4

08000eac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb0:	4b02      	ldr	r3, [pc, #8]	; (8000ebc <HAL_GetTick+0x10>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr
 8000ebc:	200000d4 	.word	0x200000d4

08000ec0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ec8:	f7ff fff0 	bl	8000eac <HAL_GetTick>
 8000ecc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ed8:	d005      	beq.n	8000ee6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eda:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <HAL_Delay+0x44>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ee6:	bf00      	nop
 8000ee8:	f7ff ffe0 	bl	8000eac <HAL_GetTick>
 8000eec:	4602      	mov	r2, r0
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d8f7      	bhi.n	8000ee8 <HAL_Delay+0x28>
  {
  }
}
 8000ef8:	bf00      	nop
 8000efa:	bf00      	nop
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	200000a0 	.word	0x200000a0

08000f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <__NVIC_SetPriorityGrouping+0x44>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f1e:	68ba      	ldr	r2, [r7, #8]
 8000f20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f24:	4013      	ands	r3, r2
 8000f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f3a:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <__NVIC_SetPriorityGrouping+0x44>)
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	60d3      	str	r3, [r2, #12]
}
 8000f40:	bf00      	nop
 8000f42:	3714      	adds	r7, #20
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bc80      	pop	{r7}
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f54:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <__NVIC_GetPriorityGrouping+0x18>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	0a1b      	lsrs	r3, r3, #8
 8000f5a:	f003 0307 	and.w	r3, r3, #7
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bc80      	pop	{r7}
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	6039      	str	r1, [r7, #0]
 8000f76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	db0a      	blt.n	8000f96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	490c      	ldr	r1, [pc, #48]	; (8000fb8 <__NVIC_SetPriority+0x4c>)
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	0112      	lsls	r2, r2, #4
 8000f8c:	b2d2      	uxtb	r2, r2
 8000f8e:	440b      	add	r3, r1
 8000f90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f94:	e00a      	b.n	8000fac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	b2da      	uxtb	r2, r3
 8000f9a:	4908      	ldr	r1, [pc, #32]	; (8000fbc <__NVIC_SetPriority+0x50>)
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	f003 030f 	and.w	r3, r3, #15
 8000fa2:	3b04      	subs	r3, #4
 8000fa4:	0112      	lsls	r2, r2, #4
 8000fa6:	b2d2      	uxtb	r2, r2
 8000fa8:	440b      	add	r3, r1
 8000faa:	761a      	strb	r2, [r3, #24]
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	e000e100 	.word	0xe000e100
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b089      	sub	sp, #36	; 0x24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	f1c3 0307 	rsb	r3, r3, #7
 8000fda:	2b04      	cmp	r3, #4
 8000fdc:	bf28      	it	cs
 8000fde:	2304      	movcs	r3, #4
 8000fe0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3304      	adds	r3, #4
 8000fe6:	2b06      	cmp	r3, #6
 8000fe8:	d902      	bls.n	8000ff0 <NVIC_EncodePriority+0x30>
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	3b03      	subs	r3, #3
 8000fee:	e000      	b.n	8000ff2 <NVIC_EncodePriority+0x32>
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43da      	mvns	r2, r3
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	401a      	ands	r2, r3
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001008:	f04f 31ff 	mov.w	r1, #4294967295
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	fa01 f303 	lsl.w	r3, r1, r3
 8001012:	43d9      	mvns	r1, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001018:	4313      	orrs	r3, r2
         );
}
 800101a:	4618      	mov	r0, r3
 800101c:	3724      	adds	r7, #36	; 0x24
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr

08001024 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3b01      	subs	r3, #1
 8001030:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001034:	d301      	bcc.n	800103a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001036:	2301      	movs	r3, #1
 8001038:	e00f      	b.n	800105a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800103a:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <SysTick_Config+0x40>)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3b01      	subs	r3, #1
 8001040:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001042:	210f      	movs	r1, #15
 8001044:	f04f 30ff 	mov.w	r0, #4294967295
 8001048:	f7ff ff90 	bl	8000f6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800104c:	4b05      	ldr	r3, [pc, #20]	; (8001064 <SysTick_Config+0x40>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001052:	4b04      	ldr	r3, [pc, #16]	; (8001064 <SysTick_Config+0x40>)
 8001054:	2207      	movs	r2, #7
 8001056:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	e000e010 	.word	0xe000e010

08001068 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff ff49 	bl	8000f08 <__NVIC_SetPriorityGrouping>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800107e:	b580      	push	{r7, lr}
 8001080:	b086      	sub	sp, #24
 8001082:	af00      	add	r7, sp, #0
 8001084:	4603      	mov	r3, r0
 8001086:	60b9      	str	r1, [r7, #8]
 8001088:	607a      	str	r2, [r7, #4]
 800108a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001090:	f7ff ff5e 	bl	8000f50 <__NVIC_GetPriorityGrouping>
 8001094:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	68b9      	ldr	r1, [r7, #8]
 800109a:	6978      	ldr	r0, [r7, #20]
 800109c:	f7ff ff90 	bl	8000fc0 <NVIC_EncodePriority>
 80010a0:	4602      	mov	r2, r0
 80010a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010a6:	4611      	mov	r1, r2
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ff5f 	bl	8000f6c <__NVIC_SetPriority>
}
 80010ae:	bf00      	nop
 80010b0:	3718      	adds	r7, #24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff ffb0 	bl	8001024 <SysTick_Config>
 80010c4:	4603      	mov	r3, r0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d101      	bne.n	80010e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e272      	b.n	80015c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	f000 8087 	beq.w	80011fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010f0:	4b92      	ldr	r3, [pc, #584]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f003 030c 	and.w	r3, r3, #12
 80010f8:	2b04      	cmp	r3, #4
 80010fa:	d00c      	beq.n	8001116 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010fc:	4b8f      	ldr	r3, [pc, #572]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f003 030c 	and.w	r3, r3, #12
 8001104:	2b08      	cmp	r3, #8
 8001106:	d112      	bne.n	800112e <HAL_RCC_OscConfig+0x5e>
 8001108:	4b8c      	ldr	r3, [pc, #560]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001114:	d10b      	bne.n	800112e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001116:	4b89      	ldr	r3, [pc, #548]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d06c      	beq.n	80011fc <HAL_RCC_OscConfig+0x12c>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d168      	bne.n	80011fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e24c      	b.n	80015c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001136:	d106      	bne.n	8001146 <HAL_RCC_OscConfig+0x76>
 8001138:	4b80      	ldr	r3, [pc, #512]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a7f      	ldr	r2, [pc, #508]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 800113e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001142:	6013      	str	r3, [r2, #0]
 8001144:	e02e      	b.n	80011a4 <HAL_RCC_OscConfig+0xd4>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d10c      	bne.n	8001168 <HAL_RCC_OscConfig+0x98>
 800114e:	4b7b      	ldr	r3, [pc, #492]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a7a      	ldr	r2, [pc, #488]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 8001154:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001158:	6013      	str	r3, [r2, #0]
 800115a:	4b78      	ldr	r3, [pc, #480]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a77      	ldr	r2, [pc, #476]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 8001160:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001164:	6013      	str	r3, [r2, #0]
 8001166:	e01d      	b.n	80011a4 <HAL_RCC_OscConfig+0xd4>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001170:	d10c      	bne.n	800118c <HAL_RCC_OscConfig+0xbc>
 8001172:	4b72      	ldr	r3, [pc, #456]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a71      	ldr	r2, [pc, #452]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 8001178:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800117c:	6013      	str	r3, [r2, #0]
 800117e:	4b6f      	ldr	r3, [pc, #444]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a6e      	ldr	r2, [pc, #440]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 8001184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001188:	6013      	str	r3, [r2, #0]
 800118a:	e00b      	b.n	80011a4 <HAL_RCC_OscConfig+0xd4>
 800118c:	4b6b      	ldr	r3, [pc, #428]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a6a      	ldr	r2, [pc, #424]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 8001192:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001196:	6013      	str	r3, [r2, #0]
 8001198:	4b68      	ldr	r3, [pc, #416]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a67      	ldr	r2, [pc, #412]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 800119e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d013      	beq.n	80011d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ac:	f7ff fe7e 	bl	8000eac <HAL_GetTick>
 80011b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011b2:	e008      	b.n	80011c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011b4:	f7ff fe7a 	bl	8000eac <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b64      	cmp	r3, #100	; 0x64
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e200      	b.n	80015c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c6:	4b5d      	ldr	r3, [pc, #372]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d0f0      	beq.n	80011b4 <HAL_RCC_OscConfig+0xe4>
 80011d2:	e014      	b.n	80011fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d4:	f7ff fe6a 	bl	8000eac <HAL_GetTick>
 80011d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011da:	e008      	b.n	80011ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011dc:	f7ff fe66 	bl	8000eac <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	2b64      	cmp	r3, #100	; 0x64
 80011e8:	d901      	bls.n	80011ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e1ec      	b.n	80015c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ee:	4b53      	ldr	r3, [pc, #332]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d1f0      	bne.n	80011dc <HAL_RCC_OscConfig+0x10c>
 80011fa:	e000      	b.n	80011fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d063      	beq.n	80012d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800120a:	4b4c      	ldr	r3, [pc, #304]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f003 030c 	and.w	r3, r3, #12
 8001212:	2b00      	cmp	r3, #0
 8001214:	d00b      	beq.n	800122e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001216:	4b49      	ldr	r3, [pc, #292]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f003 030c 	and.w	r3, r3, #12
 800121e:	2b08      	cmp	r3, #8
 8001220:	d11c      	bne.n	800125c <HAL_RCC_OscConfig+0x18c>
 8001222:	4b46      	ldr	r3, [pc, #280]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d116      	bne.n	800125c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800122e:	4b43      	ldr	r3, [pc, #268]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d005      	beq.n	8001246 <HAL_RCC_OscConfig+0x176>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	691b      	ldr	r3, [r3, #16]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d001      	beq.n	8001246 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e1c0      	b.n	80015c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001246:	4b3d      	ldr	r3, [pc, #244]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	4939      	ldr	r1, [pc, #228]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 8001256:	4313      	orrs	r3, r2
 8001258:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800125a:	e03a      	b.n	80012d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	691b      	ldr	r3, [r3, #16]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d020      	beq.n	80012a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001264:	4b36      	ldr	r3, [pc, #216]	; (8001340 <HAL_RCC_OscConfig+0x270>)
 8001266:	2201      	movs	r2, #1
 8001268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126a:	f7ff fe1f 	bl	8000eac <HAL_GetTick>
 800126e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001270:	e008      	b.n	8001284 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001272:	f7ff fe1b 	bl	8000eac <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	2b02      	cmp	r3, #2
 800127e:	d901      	bls.n	8001284 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001280:	2303      	movs	r3, #3
 8001282:	e1a1      	b.n	80015c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001284:	4b2d      	ldr	r3, [pc, #180]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	2b00      	cmp	r3, #0
 800128e:	d0f0      	beq.n	8001272 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001290:	4b2a      	ldr	r3, [pc, #168]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	00db      	lsls	r3, r3, #3
 800129e:	4927      	ldr	r1, [pc, #156]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 80012a0:	4313      	orrs	r3, r2
 80012a2:	600b      	str	r3, [r1, #0]
 80012a4:	e015      	b.n	80012d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012a6:	4b26      	ldr	r3, [pc, #152]	; (8001340 <HAL_RCC_OscConfig+0x270>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ac:	f7ff fdfe 	bl	8000eac <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012b4:	f7ff fdfa 	bl	8000eac <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e180      	b.n	80015c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012c6:	4b1d      	ldr	r3, [pc, #116]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1f0      	bne.n	80012b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0308 	and.w	r3, r3, #8
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d03a      	beq.n	8001354 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	699b      	ldr	r3, [r3, #24]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d019      	beq.n	800131a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012e6:	4b17      	ldr	r3, [pc, #92]	; (8001344 <HAL_RCC_OscConfig+0x274>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ec:	f7ff fdde 	bl	8000eac <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012f4:	f7ff fdda 	bl	8000eac <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e160      	b.n	80015c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001306:	4b0d      	ldr	r3, [pc, #52]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 8001308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d0f0      	beq.n	80012f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001312:	2001      	movs	r0, #1
 8001314:	f000 fa9c 	bl	8001850 <RCC_Delay>
 8001318:	e01c      	b.n	8001354 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800131a:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <HAL_RCC_OscConfig+0x274>)
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001320:	f7ff fdc4 	bl	8000eac <HAL_GetTick>
 8001324:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001326:	e00f      	b.n	8001348 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001328:	f7ff fdc0 	bl	8000eac <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b02      	cmp	r3, #2
 8001334:	d908      	bls.n	8001348 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e146      	b.n	80015c8 <HAL_RCC_OscConfig+0x4f8>
 800133a:	bf00      	nop
 800133c:	40021000 	.word	0x40021000
 8001340:	42420000 	.word	0x42420000
 8001344:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001348:	4b92      	ldr	r3, [pc, #584]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 800134a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d1e9      	bne.n	8001328 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0304 	and.w	r3, r3, #4
 800135c:	2b00      	cmp	r3, #0
 800135e:	f000 80a6 	beq.w	80014ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001362:	2300      	movs	r3, #0
 8001364:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001366:	4b8b      	ldr	r3, [pc, #556]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 8001368:	69db      	ldr	r3, [r3, #28]
 800136a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d10d      	bne.n	800138e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001372:	4b88      	ldr	r3, [pc, #544]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 8001374:	69db      	ldr	r3, [r3, #28]
 8001376:	4a87      	ldr	r2, [pc, #540]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 8001378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800137c:	61d3      	str	r3, [r2, #28]
 800137e:	4b85      	ldr	r3, [pc, #532]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800138a:	2301      	movs	r3, #1
 800138c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800138e:	4b82      	ldr	r3, [pc, #520]	; (8001598 <HAL_RCC_OscConfig+0x4c8>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001396:	2b00      	cmp	r3, #0
 8001398:	d118      	bne.n	80013cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800139a:	4b7f      	ldr	r3, [pc, #508]	; (8001598 <HAL_RCC_OscConfig+0x4c8>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a7e      	ldr	r2, [pc, #504]	; (8001598 <HAL_RCC_OscConfig+0x4c8>)
 80013a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013a6:	f7ff fd81 	bl	8000eac <HAL_GetTick>
 80013aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ac:	e008      	b.n	80013c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ae:	f7ff fd7d 	bl	8000eac <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b64      	cmp	r3, #100	; 0x64
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e103      	b.n	80015c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c0:	4b75      	ldr	r3, [pc, #468]	; (8001598 <HAL_RCC_OscConfig+0x4c8>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d0f0      	beq.n	80013ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d106      	bne.n	80013e2 <HAL_RCC_OscConfig+0x312>
 80013d4:	4b6f      	ldr	r3, [pc, #444]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 80013d6:	6a1b      	ldr	r3, [r3, #32]
 80013d8:	4a6e      	ldr	r2, [pc, #440]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 80013da:	f043 0301 	orr.w	r3, r3, #1
 80013de:	6213      	str	r3, [r2, #32]
 80013e0:	e02d      	b.n	800143e <HAL_RCC_OscConfig+0x36e>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d10c      	bne.n	8001404 <HAL_RCC_OscConfig+0x334>
 80013ea:	4b6a      	ldr	r3, [pc, #424]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 80013ec:	6a1b      	ldr	r3, [r3, #32]
 80013ee:	4a69      	ldr	r2, [pc, #420]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 80013f0:	f023 0301 	bic.w	r3, r3, #1
 80013f4:	6213      	str	r3, [r2, #32]
 80013f6:	4b67      	ldr	r3, [pc, #412]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 80013f8:	6a1b      	ldr	r3, [r3, #32]
 80013fa:	4a66      	ldr	r2, [pc, #408]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 80013fc:	f023 0304 	bic.w	r3, r3, #4
 8001400:	6213      	str	r3, [r2, #32]
 8001402:	e01c      	b.n	800143e <HAL_RCC_OscConfig+0x36e>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	2b05      	cmp	r3, #5
 800140a:	d10c      	bne.n	8001426 <HAL_RCC_OscConfig+0x356>
 800140c:	4b61      	ldr	r3, [pc, #388]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 800140e:	6a1b      	ldr	r3, [r3, #32]
 8001410:	4a60      	ldr	r2, [pc, #384]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 8001412:	f043 0304 	orr.w	r3, r3, #4
 8001416:	6213      	str	r3, [r2, #32]
 8001418:	4b5e      	ldr	r3, [pc, #376]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 800141a:	6a1b      	ldr	r3, [r3, #32]
 800141c:	4a5d      	ldr	r2, [pc, #372]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 800141e:	f043 0301 	orr.w	r3, r3, #1
 8001422:	6213      	str	r3, [r2, #32]
 8001424:	e00b      	b.n	800143e <HAL_RCC_OscConfig+0x36e>
 8001426:	4b5b      	ldr	r3, [pc, #364]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 8001428:	6a1b      	ldr	r3, [r3, #32]
 800142a:	4a5a      	ldr	r2, [pc, #360]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 800142c:	f023 0301 	bic.w	r3, r3, #1
 8001430:	6213      	str	r3, [r2, #32]
 8001432:	4b58      	ldr	r3, [pc, #352]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 8001434:	6a1b      	ldr	r3, [r3, #32]
 8001436:	4a57      	ldr	r2, [pc, #348]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 8001438:	f023 0304 	bic.w	r3, r3, #4
 800143c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d015      	beq.n	8001472 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001446:	f7ff fd31 	bl	8000eac <HAL_GetTick>
 800144a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800144c:	e00a      	b.n	8001464 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800144e:	f7ff fd2d 	bl	8000eac <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	f241 3288 	movw	r2, #5000	; 0x1388
 800145c:	4293      	cmp	r3, r2
 800145e:	d901      	bls.n	8001464 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e0b1      	b.n	80015c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001464:	4b4b      	ldr	r3, [pc, #300]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 8001466:	6a1b      	ldr	r3, [r3, #32]
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d0ee      	beq.n	800144e <HAL_RCC_OscConfig+0x37e>
 8001470:	e014      	b.n	800149c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001472:	f7ff fd1b 	bl	8000eac <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001478:	e00a      	b.n	8001490 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800147a:	f7ff fd17 	bl	8000eac <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	f241 3288 	movw	r2, #5000	; 0x1388
 8001488:	4293      	cmp	r3, r2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e09b      	b.n	80015c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001490:	4b40      	ldr	r3, [pc, #256]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 8001492:	6a1b      	ldr	r3, [r3, #32]
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1ee      	bne.n	800147a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800149c:	7dfb      	ldrb	r3, [r7, #23]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d105      	bne.n	80014ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014a2:	4b3c      	ldr	r3, [pc, #240]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 80014a4:	69db      	ldr	r3, [r3, #28]
 80014a6:	4a3b      	ldr	r2, [pc, #236]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 80014a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	f000 8087 	beq.w	80015c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014b8:	4b36      	ldr	r3, [pc, #216]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f003 030c 	and.w	r3, r3, #12
 80014c0:	2b08      	cmp	r3, #8
 80014c2:	d061      	beq.n	8001588 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	69db      	ldr	r3, [r3, #28]
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d146      	bne.n	800155a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014cc:	4b33      	ldr	r3, [pc, #204]	; (800159c <HAL_RCC_OscConfig+0x4cc>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d2:	f7ff fceb 	bl	8000eac <HAL_GetTick>
 80014d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014d8:	e008      	b.n	80014ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014da:	f7ff fce7 	bl	8000eac <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e06d      	b.n	80015c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014ec:	4b29      	ldr	r3, [pc, #164]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1f0      	bne.n	80014da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a1b      	ldr	r3, [r3, #32]
 80014fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001500:	d108      	bne.n	8001514 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001502:	4b24      	ldr	r3, [pc, #144]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	4921      	ldr	r1, [pc, #132]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 8001510:	4313      	orrs	r3, r2
 8001512:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001514:	4b1f      	ldr	r3, [pc, #124]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a19      	ldr	r1, [r3, #32]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001524:	430b      	orrs	r3, r1
 8001526:	491b      	ldr	r1, [pc, #108]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 8001528:	4313      	orrs	r3, r2
 800152a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800152c:	4b1b      	ldr	r3, [pc, #108]	; (800159c <HAL_RCC_OscConfig+0x4cc>)
 800152e:	2201      	movs	r2, #1
 8001530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001532:	f7ff fcbb 	bl	8000eac <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001538:	e008      	b.n	800154c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800153a:	f7ff fcb7 	bl	8000eac <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e03d      	b.n	80015c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800154c:	4b11      	ldr	r3, [pc, #68]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d0f0      	beq.n	800153a <HAL_RCC_OscConfig+0x46a>
 8001558:	e035      	b.n	80015c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800155a:	4b10      	ldr	r3, [pc, #64]	; (800159c <HAL_RCC_OscConfig+0x4cc>)
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001560:	f7ff fca4 	bl	8000eac <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001568:	f7ff fca0 	bl	8000eac <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e026      	b.n	80015c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800157a:	4b06      	ldr	r3, [pc, #24]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1f0      	bne.n	8001568 <HAL_RCC_OscConfig+0x498>
 8001586:	e01e      	b.n	80015c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	69db      	ldr	r3, [r3, #28]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d107      	bne.n	80015a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e019      	b.n	80015c8 <HAL_RCC_OscConfig+0x4f8>
 8001594:	40021000 	.word	0x40021000
 8001598:	40007000 	.word	0x40007000
 800159c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015a0:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <HAL_RCC_OscConfig+0x500>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a1b      	ldr	r3, [r3, #32]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d106      	bne.n	80015c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015be:	429a      	cmp	r2, r3
 80015c0:	d001      	beq.n	80015c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e000      	b.n	80015c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3718      	adds	r7, #24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40021000 	.word	0x40021000

080015d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d101      	bne.n	80015e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e0d0      	b.n	800178a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015e8:	4b6a      	ldr	r3, [pc, #424]	; (8001794 <HAL_RCC_ClockConfig+0x1c0>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0307 	and.w	r3, r3, #7
 80015f0:	683a      	ldr	r2, [r7, #0]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d910      	bls.n	8001618 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015f6:	4b67      	ldr	r3, [pc, #412]	; (8001794 <HAL_RCC_ClockConfig+0x1c0>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f023 0207 	bic.w	r2, r3, #7
 80015fe:	4965      	ldr	r1, [pc, #404]	; (8001794 <HAL_RCC_ClockConfig+0x1c0>)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	4313      	orrs	r3, r2
 8001604:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001606:	4b63      	ldr	r3, [pc, #396]	; (8001794 <HAL_RCC_ClockConfig+0x1c0>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	683a      	ldr	r2, [r7, #0]
 8001610:	429a      	cmp	r2, r3
 8001612:	d001      	beq.n	8001618 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e0b8      	b.n	800178a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0302 	and.w	r3, r3, #2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d020      	beq.n	8001666 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	2b00      	cmp	r3, #0
 800162e:	d005      	beq.n	800163c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001630:	4b59      	ldr	r3, [pc, #356]	; (8001798 <HAL_RCC_ClockConfig+0x1c4>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	4a58      	ldr	r2, [pc, #352]	; (8001798 <HAL_RCC_ClockConfig+0x1c4>)
 8001636:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800163a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0308 	and.w	r3, r3, #8
 8001644:	2b00      	cmp	r3, #0
 8001646:	d005      	beq.n	8001654 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001648:	4b53      	ldr	r3, [pc, #332]	; (8001798 <HAL_RCC_ClockConfig+0x1c4>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	4a52      	ldr	r2, [pc, #328]	; (8001798 <HAL_RCC_ClockConfig+0x1c4>)
 800164e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001652:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001654:	4b50      	ldr	r3, [pc, #320]	; (8001798 <HAL_RCC_ClockConfig+0x1c4>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	494d      	ldr	r1, [pc, #308]	; (8001798 <HAL_RCC_ClockConfig+0x1c4>)
 8001662:	4313      	orrs	r3, r2
 8001664:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	2b00      	cmp	r3, #0
 8001670:	d040      	beq.n	80016f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d107      	bne.n	800168a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167a:	4b47      	ldr	r3, [pc, #284]	; (8001798 <HAL_RCC_ClockConfig+0x1c4>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d115      	bne.n	80016b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e07f      	b.n	800178a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	2b02      	cmp	r3, #2
 8001690:	d107      	bne.n	80016a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001692:	4b41      	ldr	r3, [pc, #260]	; (8001798 <HAL_RCC_ClockConfig+0x1c4>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d109      	bne.n	80016b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e073      	b.n	800178a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a2:	4b3d      	ldr	r3, [pc, #244]	; (8001798 <HAL_RCC_ClockConfig+0x1c4>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e06b      	b.n	800178a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016b2:	4b39      	ldr	r3, [pc, #228]	; (8001798 <HAL_RCC_ClockConfig+0x1c4>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f023 0203 	bic.w	r2, r3, #3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	4936      	ldr	r1, [pc, #216]	; (8001798 <HAL_RCC_ClockConfig+0x1c4>)
 80016c0:	4313      	orrs	r3, r2
 80016c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016c4:	f7ff fbf2 	bl	8000eac <HAL_GetTick>
 80016c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ca:	e00a      	b.n	80016e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016cc:	f7ff fbee 	bl	8000eac <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016da:	4293      	cmp	r3, r2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e053      	b.n	800178a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016e2:	4b2d      	ldr	r3, [pc, #180]	; (8001798 <HAL_RCC_ClockConfig+0x1c4>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f003 020c 	and.w	r2, r3, #12
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d1eb      	bne.n	80016cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016f4:	4b27      	ldr	r3, [pc, #156]	; (8001794 <HAL_RCC_ClockConfig+0x1c0>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0307 	and.w	r3, r3, #7
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d210      	bcs.n	8001724 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001702:	4b24      	ldr	r3, [pc, #144]	; (8001794 <HAL_RCC_ClockConfig+0x1c0>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f023 0207 	bic.w	r2, r3, #7
 800170a:	4922      	ldr	r1, [pc, #136]	; (8001794 <HAL_RCC_ClockConfig+0x1c0>)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	4313      	orrs	r3, r2
 8001710:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001712:	4b20      	ldr	r3, [pc, #128]	; (8001794 <HAL_RCC_ClockConfig+0x1c0>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	429a      	cmp	r2, r3
 800171e:	d001      	beq.n	8001724 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e032      	b.n	800178a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	2b00      	cmp	r3, #0
 800172e:	d008      	beq.n	8001742 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001730:	4b19      	ldr	r3, [pc, #100]	; (8001798 <HAL_RCC_ClockConfig+0x1c4>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	4916      	ldr	r1, [pc, #88]	; (8001798 <HAL_RCC_ClockConfig+0x1c4>)
 800173e:	4313      	orrs	r3, r2
 8001740:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0308 	and.w	r3, r3, #8
 800174a:	2b00      	cmp	r3, #0
 800174c:	d009      	beq.n	8001762 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800174e:	4b12      	ldr	r3, [pc, #72]	; (8001798 <HAL_RCC_ClockConfig+0x1c4>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	691b      	ldr	r3, [r3, #16]
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	490e      	ldr	r1, [pc, #56]	; (8001798 <HAL_RCC_ClockConfig+0x1c4>)
 800175e:	4313      	orrs	r3, r2
 8001760:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001762:	f000 f821 	bl	80017a8 <HAL_RCC_GetSysClockFreq>
 8001766:	4602      	mov	r2, r0
 8001768:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <HAL_RCC_ClockConfig+0x1c4>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	091b      	lsrs	r3, r3, #4
 800176e:	f003 030f 	and.w	r3, r3, #15
 8001772:	490a      	ldr	r1, [pc, #40]	; (800179c <HAL_RCC_ClockConfig+0x1c8>)
 8001774:	5ccb      	ldrb	r3, [r1, r3]
 8001776:	fa22 f303 	lsr.w	r3, r2, r3
 800177a:	4a09      	ldr	r2, [pc, #36]	; (80017a0 <HAL_RCC_ClockConfig+0x1cc>)
 800177c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800177e:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <HAL_RCC_ClockConfig+0x1d0>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff fb50 	bl	8000e28 <HAL_InitTick>

  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40022000 	.word	0x40022000
 8001798:	40021000 	.word	0x40021000
 800179c:	08004efc 	.word	0x08004efc
 80017a0:	20000098 	.word	0x20000098
 80017a4:	2000009c 	.word	0x2000009c

080017a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b087      	sub	sp, #28
 80017ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	2300      	movs	r3, #0
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	2300      	movs	r3, #0
 80017b8:	617b      	str	r3, [r7, #20]
 80017ba:	2300      	movs	r3, #0
 80017bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80017be:	2300      	movs	r3, #0
 80017c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80017c2:	4b1e      	ldr	r3, [pc, #120]	; (800183c <HAL_RCC_GetSysClockFreq+0x94>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f003 030c 	and.w	r3, r3, #12
 80017ce:	2b04      	cmp	r3, #4
 80017d0:	d002      	beq.n	80017d8 <HAL_RCC_GetSysClockFreq+0x30>
 80017d2:	2b08      	cmp	r3, #8
 80017d4:	d003      	beq.n	80017de <HAL_RCC_GetSysClockFreq+0x36>
 80017d6:	e027      	b.n	8001828 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017d8:	4b19      	ldr	r3, [pc, #100]	; (8001840 <HAL_RCC_GetSysClockFreq+0x98>)
 80017da:	613b      	str	r3, [r7, #16]
      break;
 80017dc:	e027      	b.n	800182e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	0c9b      	lsrs	r3, r3, #18
 80017e2:	f003 030f 	and.w	r3, r3, #15
 80017e6:	4a17      	ldr	r2, [pc, #92]	; (8001844 <HAL_RCC_GetSysClockFreq+0x9c>)
 80017e8:	5cd3      	ldrb	r3, [r2, r3]
 80017ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d010      	beq.n	8001818 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017f6:	4b11      	ldr	r3, [pc, #68]	; (800183c <HAL_RCC_GetSysClockFreq+0x94>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	0c5b      	lsrs	r3, r3, #17
 80017fc:	f003 0301 	and.w	r3, r3, #1
 8001800:	4a11      	ldr	r2, [pc, #68]	; (8001848 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001802:	5cd3      	ldrb	r3, [r2, r3]
 8001804:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a0d      	ldr	r2, [pc, #52]	; (8001840 <HAL_RCC_GetSysClockFreq+0x98>)
 800180a:	fb03 f202 	mul.w	r2, r3, r2
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	fbb2 f3f3 	udiv	r3, r2, r3
 8001814:	617b      	str	r3, [r7, #20]
 8001816:	e004      	b.n	8001822 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a0c      	ldr	r2, [pc, #48]	; (800184c <HAL_RCC_GetSysClockFreq+0xa4>)
 800181c:	fb02 f303 	mul.w	r3, r2, r3
 8001820:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	613b      	str	r3, [r7, #16]
      break;
 8001826:	e002      	b.n	800182e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001828:	4b05      	ldr	r3, [pc, #20]	; (8001840 <HAL_RCC_GetSysClockFreq+0x98>)
 800182a:	613b      	str	r3, [r7, #16]
      break;
 800182c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800182e:	693b      	ldr	r3, [r7, #16]
}
 8001830:	4618      	mov	r0, r3
 8001832:	371c      	adds	r7, #28
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	40021000 	.word	0x40021000
 8001840:	007a1200 	.word	0x007a1200
 8001844:	08004f0c 	.word	0x08004f0c
 8001848:	08004f1c 	.word	0x08004f1c
 800184c:	003d0900 	.word	0x003d0900

08001850 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001858:	4b0a      	ldr	r3, [pc, #40]	; (8001884 <RCC_Delay+0x34>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a0a      	ldr	r2, [pc, #40]	; (8001888 <RCC_Delay+0x38>)
 800185e:	fba2 2303 	umull	r2, r3, r2, r3
 8001862:	0a5b      	lsrs	r3, r3, #9
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	fb02 f303 	mul.w	r3, r2, r3
 800186a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800186c:	bf00      	nop
  }
  while (Delay --);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	1e5a      	subs	r2, r3, #1
 8001872:	60fa      	str	r2, [r7, #12]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d1f9      	bne.n	800186c <RCC_Delay+0x1c>
}
 8001878:	bf00      	nop
 800187a:	bf00      	nop
 800187c:	3714      	adds	r7, #20
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr
 8001884:	20000098 	.word	0x20000098
 8001888:	10624dd3 	.word	0x10624dd3

0800188c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001892:	f3ef 8305 	mrs	r3, IPSR
 8001896:	60bb      	str	r3, [r7, #8]
  return(result);
 8001898:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800189a:	2b00      	cmp	r3, #0
 800189c:	d10f      	bne.n	80018be <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800189e:	f3ef 8310 	mrs	r3, PRIMASK
 80018a2:	607b      	str	r3, [r7, #4]
  return(result);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d109      	bne.n	80018be <osKernelInitialize+0x32>
 80018aa:	4b10      	ldr	r3, [pc, #64]	; (80018ec <osKernelInitialize+0x60>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d109      	bne.n	80018c6 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80018b2:	f3ef 8311 	mrs	r3, BASEPRI
 80018b6:	603b      	str	r3, [r7, #0]
  return(result);
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80018be:	f06f 0305 	mvn.w	r3, #5
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	e00c      	b.n	80018e0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80018c6:	4b09      	ldr	r3, [pc, #36]	; (80018ec <osKernelInitialize+0x60>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d105      	bne.n	80018da <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80018ce:	4b07      	ldr	r3, [pc, #28]	; (80018ec <osKernelInitialize+0x60>)
 80018d0:	2201      	movs	r2, #1
 80018d2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80018d4:	2300      	movs	r3, #0
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	e002      	b.n	80018e0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80018da:	f04f 33ff 	mov.w	r3, #4294967295
 80018de:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80018e0:	68fb      	ldr	r3, [r7, #12]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3714      	adds	r7, #20
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr
 80018ec:	200000d8 	.word	0x200000d8

080018f0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80018f6:	f3ef 8305 	mrs	r3, IPSR
 80018fa:	60bb      	str	r3, [r7, #8]
  return(result);
 80018fc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d10f      	bne.n	8001922 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001902:	f3ef 8310 	mrs	r3, PRIMASK
 8001906:	607b      	str	r3, [r7, #4]
  return(result);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d109      	bne.n	8001922 <osKernelStart+0x32>
 800190e:	4b11      	ldr	r3, [pc, #68]	; (8001954 <osKernelStart+0x64>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2b02      	cmp	r3, #2
 8001914:	d109      	bne.n	800192a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001916:	f3ef 8311 	mrs	r3, BASEPRI
 800191a:	603b      	str	r3, [r7, #0]
  return(result);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <osKernelStart+0x3a>
    stat = osErrorISR;
 8001922:	f06f 0305 	mvn.w	r3, #5
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	e00e      	b.n	8001948 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800192a:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <osKernelStart+0x64>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d107      	bne.n	8001942 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8001932:	4b08      	ldr	r3, [pc, #32]	; (8001954 <osKernelStart+0x64>)
 8001934:	2202      	movs	r2, #2
 8001936:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001938:	f001 fd1c 	bl	8003374 <vTaskStartScheduler>
      stat = osOK;
 800193c:	2300      	movs	r3, #0
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	e002      	b.n	8001948 <osKernelStart+0x58>
    } else {
      stat = osError;
 8001942:	f04f 33ff 	mov.w	r3, #4294967295
 8001946:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001948:	68fb      	ldr	r3, [r7, #12]
}
 800194a:	4618      	mov	r0, r3
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	200000d8 	.word	0x200000d8

08001958 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001958:	b580      	push	{r7, lr}
 800195a:	b092      	sub	sp, #72	; 0x48
 800195c:	af04      	add	r7, sp, #16
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001968:	f3ef 8305 	mrs	r3, IPSR
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8001970:	2b00      	cmp	r3, #0
 8001972:	f040 8094 	bne.w	8001a9e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001976:	f3ef 8310 	mrs	r3, PRIMASK
 800197a:	623b      	str	r3, [r7, #32]
  return(result);
 800197c:	6a3b      	ldr	r3, [r7, #32]
 800197e:	2b00      	cmp	r3, #0
 8001980:	f040 808d 	bne.w	8001a9e <osThreadNew+0x146>
 8001984:	4b48      	ldr	r3, [pc, #288]	; (8001aa8 <osThreadNew+0x150>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2b02      	cmp	r3, #2
 800198a:	d106      	bne.n	800199a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800198c:	f3ef 8311 	mrs	r3, BASEPRI
 8001990:	61fb      	str	r3, [r7, #28]
  return(result);
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	2b00      	cmp	r3, #0
 8001996:	f040 8082 	bne.w	8001a9e <osThreadNew+0x146>
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d07e      	beq.n	8001a9e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80019a0:	2380      	movs	r3, #128	; 0x80
 80019a2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80019a4:	2318      	movs	r3, #24
 80019a6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80019a8:	2300      	movs	r3, #0
 80019aa:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80019ac:	f107 031b 	add.w	r3, r7, #27
 80019b0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80019b2:	f04f 33ff 	mov.w	r3, #4294967295
 80019b6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d045      	beq.n	8001a4a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d002      	beq.n	80019cc <osThreadNew+0x74>
        name = attr->name;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d002      	beq.n	80019da <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80019da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d008      	beq.n	80019f2 <osThreadNew+0x9a>
 80019e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019e2:	2b38      	cmp	r3, #56	; 0x38
 80019e4:	d805      	bhi.n	80019f2 <osThreadNew+0x9a>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <osThreadNew+0x9e>
        return (NULL);
 80019f2:	2300      	movs	r3, #0
 80019f4:	e054      	b.n	8001aa0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	089b      	lsrs	r3, r3, #2
 8001a04:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d00e      	beq.n	8001a2c <osThreadNew+0xd4>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	2b5b      	cmp	r3, #91	; 0x5b
 8001a14:	d90a      	bls.n	8001a2c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d006      	beq.n	8001a2c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d002      	beq.n	8001a2c <osThreadNew+0xd4>
        mem = 1;
 8001a26:	2301      	movs	r3, #1
 8001a28:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a2a:	e010      	b.n	8001a4e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d10c      	bne.n	8001a4e <osThreadNew+0xf6>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d108      	bne.n	8001a4e <osThreadNew+0xf6>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	691b      	ldr	r3, [r3, #16]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d104      	bne.n	8001a4e <osThreadNew+0xf6>
          mem = 0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a48:	e001      	b.n	8001a4e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8001a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d110      	bne.n	8001a76 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001a5c:	9202      	str	r2, [sp, #8]
 8001a5e:	9301      	str	r3, [sp, #4]
 8001a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a62:	9300      	str	r3, [sp, #0]
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a68:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001a6a:	68f8      	ldr	r0, [r7, #12]
 8001a6c:	f001 faea 	bl	8003044 <xTaskCreateStatic>
 8001a70:	4603      	mov	r3, r0
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	e013      	b.n	8001a9e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8001a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d110      	bne.n	8001a9e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	9301      	str	r3, [sp, #4]
 8001a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001a8e:	68f8      	ldr	r0, [r7, #12]
 8001a90:	f001 fb34 	bl	80030fc <xTaskCreate>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d001      	beq.n	8001a9e <osThreadNew+0x146>
          hTask = NULL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001a9e:	697b      	ldr	r3, [r7, #20]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3738      	adds	r7, #56	; 0x38
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	200000d8 	.word	0x200000d8

08001aac <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08c      	sub	sp, #48	; 0x30
 8001ab0:	af02      	add	r7, sp, #8
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001abc:	f3ef 8305 	mrs	r3, IPSR
 8001ac0:	61bb      	str	r3, [r7, #24]
  return(result);
 8001ac2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	f040 8086 	bne.w	8001bd6 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001aca:	f3ef 8310 	mrs	r3, PRIMASK
 8001ace:	617b      	str	r3, [r7, #20]
  return(result);
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d17f      	bne.n	8001bd6 <osSemaphoreNew+0x12a>
 8001ad6:	4b42      	ldr	r3, [pc, #264]	; (8001be0 <osSemaphoreNew+0x134>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d105      	bne.n	8001aea <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001ade:	f3ef 8311 	mrs	r3, BASEPRI
 8001ae2:	613b      	str	r3, [r7, #16]
  return(result);
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d175      	bne.n	8001bd6 <osSemaphoreNew+0x12a>
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d072      	beq.n	8001bd6 <osSemaphoreNew+0x12a>
 8001af0:	68ba      	ldr	r2, [r7, #8]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d86e      	bhi.n	8001bd6 <osSemaphoreNew+0x12a>
    mem = -1;
 8001af8:	f04f 33ff 	mov.w	r3, #4294967295
 8001afc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d015      	beq.n	8001b30 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d006      	beq.n	8001b1a <osSemaphoreNew+0x6e>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	2b4f      	cmp	r3, #79	; 0x4f
 8001b12:	d902      	bls.n	8001b1a <osSemaphoreNew+0x6e>
        mem = 1;
 8001b14:	2301      	movs	r3, #1
 8001b16:	623b      	str	r3, [r7, #32]
 8001b18:	e00c      	b.n	8001b34 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d108      	bne.n	8001b34 <osSemaphoreNew+0x88>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d104      	bne.n	8001b34 <osSemaphoreNew+0x88>
          mem = 0;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	623b      	str	r3, [r7, #32]
 8001b2e:	e001      	b.n	8001b34 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8001b30:	2300      	movs	r3, #0
 8001b32:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8001b34:	6a3b      	ldr	r3, [r7, #32]
 8001b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b3a:	d04c      	beq.n	8001bd6 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d128      	bne.n	8001b94 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8001b42:	6a3b      	ldr	r3, [r7, #32]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d10a      	bne.n	8001b5e <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	2203      	movs	r2, #3
 8001b4e:	9200      	str	r2, [sp, #0]
 8001b50:	2200      	movs	r2, #0
 8001b52:	2100      	movs	r1, #0
 8001b54:	2001      	movs	r0, #1
 8001b56:	f000 fad3 	bl	8002100 <xQueueGenericCreateStatic>
 8001b5a:	6278      	str	r0, [r7, #36]	; 0x24
 8001b5c:	e005      	b.n	8001b6a <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8001b5e:	2203      	movs	r2, #3
 8001b60:	2100      	movs	r1, #0
 8001b62:	2001      	movs	r0, #1
 8001b64:	f000 fb43 	bl	80021ee <xQueueGenericCreate>
 8001b68:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d022      	beq.n	8001bb6 <osSemaphoreNew+0x10a>
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d01f      	beq.n	8001bb6 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8001b76:	2300      	movs	r3, #0
 8001b78:	2200      	movs	r2, #0
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b7e:	f000 fc01 	bl	8002384 <xQueueGenericSend>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d016      	beq.n	8001bb6 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8001b88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b8a:	f001 f88b 	bl	8002ca4 <vQueueDelete>
            hSemaphore = NULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
 8001b92:	e010      	b.n	8001bb6 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8001b94:	6a3b      	ldr	r3, [r7, #32]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d108      	bne.n	8001bac <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	68b9      	ldr	r1, [r7, #8]
 8001ba2:	68f8      	ldr	r0, [r7, #12]
 8001ba4:	f000 fb84 	bl	80022b0 <xQueueCreateCountingSemaphoreStatic>
 8001ba8:	6278      	str	r0, [r7, #36]	; 0x24
 8001baa:	e004      	b.n	8001bb6 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8001bac:	68b9      	ldr	r1, [r7, #8]
 8001bae:	68f8      	ldr	r0, [r7, #12]
 8001bb0:	f000 fbb5 	bl	800231e <xQueueCreateCountingSemaphore>
 8001bb4:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d00c      	beq.n	8001bd6 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <osSemaphoreNew+0x11e>
          name = attr->name;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	61fb      	str	r3, [r7, #28]
 8001bc8:	e001      	b.n	8001bce <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8001bce:	69f9      	ldr	r1, [r7, #28]
 8001bd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001bd2:	f001 f9b1 	bl	8002f38 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3728      	adds	r7, #40	; 0x28
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	200000d8 	.word	0x200000d8

08001be4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b088      	sub	sp, #32
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d103      	bne.n	8001c04 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8001bfc:	f06f 0303 	mvn.w	r3, #3
 8001c00:	61fb      	str	r3, [r7, #28]
 8001c02:	e04b      	b.n	8001c9c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c04:	f3ef 8305 	mrs	r3, IPSR
 8001c08:	617b      	str	r3, [r7, #20]
  return(result);
 8001c0a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d10f      	bne.n	8001c30 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c10:	f3ef 8310 	mrs	r3, PRIMASK
 8001c14:	613b      	str	r3, [r7, #16]
  return(result);
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d109      	bne.n	8001c30 <osSemaphoreAcquire+0x4c>
 8001c1c:	4b22      	ldr	r3, [pc, #136]	; (8001ca8 <osSemaphoreAcquire+0xc4>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d128      	bne.n	8001c76 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001c24:	f3ef 8311 	mrs	r3, BASEPRI
 8001c28:	60fb      	str	r3, [r7, #12]
  return(result);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d022      	beq.n	8001c76 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8001c36:	f06f 0303 	mvn.w	r3, #3
 8001c3a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8001c3c:	e02d      	b.n	8001c9a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8001c42:	f107 0308 	add.w	r3, r7, #8
 8001c46:	461a      	mov	r2, r3
 8001c48:	2100      	movs	r1, #0
 8001c4a:	69b8      	ldr	r0, [r7, #24]
 8001c4c:	f000 ffaa 	bl	8002ba4 <xQueueReceiveFromISR>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d003      	beq.n	8001c5e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8001c56:	f06f 0302 	mvn.w	r3, #2
 8001c5a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8001c5c:	e01d      	b.n	8001c9a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d01a      	beq.n	8001c9a <osSemaphoreAcquire+0xb6>
 8001c64:	4b11      	ldr	r3, [pc, #68]	; (8001cac <osSemaphoreAcquire+0xc8>)
 8001c66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	f3bf 8f4f 	dsb	sy
 8001c70:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8001c74:	e011      	b.n	8001c9a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8001c76:	6839      	ldr	r1, [r7, #0]
 8001c78:	69b8      	ldr	r0, [r7, #24]
 8001c7a:	f000 fe87 	bl	800298c <xQueueSemaphoreTake>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d00b      	beq.n	8001c9c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8001c8a:	f06f 0301 	mvn.w	r3, #1
 8001c8e:	61fb      	str	r3, [r7, #28]
 8001c90:	e004      	b.n	8001c9c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8001c92:	f06f 0302 	mvn.w	r3, #2
 8001c96:	61fb      	str	r3, [r7, #28]
 8001c98:	e000      	b.n	8001c9c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8001c9a:	bf00      	nop
      }
    }
  }

  return (stat);
 8001c9c:	69fb      	ldr	r3, [r7, #28]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3720      	adds	r7, #32
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	200000d8 	.word	0x200000d8
 8001cac:	e000ed04 	.word	0xe000ed04

08001cb0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b088      	sub	sp, #32
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d103      	bne.n	8001cce <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8001cc6:	f06f 0303 	mvn.w	r3, #3
 8001cca:	61fb      	str	r3, [r7, #28]
 8001ccc:	e03e      	b.n	8001d4c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001cce:	f3ef 8305 	mrs	r3, IPSR
 8001cd2:	617b      	str	r3, [r7, #20]
  return(result);
 8001cd4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d10f      	bne.n	8001cfa <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001cda:	f3ef 8310 	mrs	r3, PRIMASK
 8001cde:	613b      	str	r3, [r7, #16]
  return(result);
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d109      	bne.n	8001cfa <osSemaphoreRelease+0x4a>
 8001ce6:	4b1c      	ldr	r3, [pc, #112]	; (8001d58 <osSemaphoreRelease+0xa8>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d120      	bne.n	8001d30 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001cee:	f3ef 8311 	mrs	r3, BASEPRI
 8001cf2:	60fb      	str	r3, [r7, #12]
  return(result);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d01a      	beq.n	8001d30 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8001cfe:	f107 0308 	add.w	r3, r7, #8
 8001d02:	4619      	mov	r1, r3
 8001d04:	69b8      	ldr	r0, [r7, #24]
 8001d06:	f000 fcd3 	bl	80026b0 <xQueueGiveFromISR>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d003      	beq.n	8001d18 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8001d10:	f06f 0302 	mvn.w	r3, #2
 8001d14:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8001d16:	e018      	b.n	8001d4a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d015      	beq.n	8001d4a <osSemaphoreRelease+0x9a>
 8001d1e:	4b0f      	ldr	r3, [pc, #60]	; (8001d5c <osSemaphoreRelease+0xac>)
 8001d20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	f3bf 8f4f 	dsb	sy
 8001d2a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8001d2e:	e00c      	b.n	8001d4a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8001d30:	2300      	movs	r3, #0
 8001d32:	2200      	movs	r2, #0
 8001d34:	2100      	movs	r1, #0
 8001d36:	69b8      	ldr	r0, [r7, #24]
 8001d38:	f000 fb24 	bl	8002384 <xQueueGenericSend>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d004      	beq.n	8001d4c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8001d42:	f06f 0302 	mvn.w	r3, #2
 8001d46:	61fb      	str	r3, [r7, #28]
 8001d48:	e000      	b.n	8001d4c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8001d4a:	bf00      	nop
    }
  }

  return (stat);
 8001d4c:	69fb      	ldr	r3, [r7, #28]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3720      	adds	r7, #32
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	200000d8 	.word	0x200000d8
 8001d5c:	e000ed04 	.word	0xe000ed04

08001d60 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b08c      	sub	sp, #48	; 0x30
 8001d64:	af02      	add	r7, sp, #8
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001d70:	f3ef 8305 	mrs	r3, IPSR
 8001d74:	61bb      	str	r3, [r7, #24]
  return(result);
 8001d76:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d16f      	bne.n	8001e5c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d7c:	f3ef 8310 	mrs	r3, PRIMASK
 8001d80:	617b      	str	r3, [r7, #20]
  return(result);
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d169      	bne.n	8001e5c <osMessageQueueNew+0xfc>
 8001d88:	4b37      	ldr	r3, [pc, #220]	; (8001e68 <osMessageQueueNew+0x108>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d105      	bne.n	8001d9c <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001d90:	f3ef 8311 	mrs	r3, BASEPRI
 8001d94:	613b      	str	r3, [r7, #16]
  return(result);
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d15f      	bne.n	8001e5c <osMessageQueueNew+0xfc>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d05c      	beq.n	8001e5c <osMessageQueueNew+0xfc>
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d059      	beq.n	8001e5c <osMessageQueueNew+0xfc>
    mem = -1;
 8001da8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dac:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d029      	beq.n	8001e08 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d012      	beq.n	8001de2 <osMessageQueueNew+0x82>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	2b4f      	cmp	r3, #79	; 0x4f
 8001dc2:	d90e      	bls.n	8001de2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d00a      	beq.n	8001de2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	695a      	ldr	r2, [r3, #20]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	68b9      	ldr	r1, [r7, #8]
 8001dd4:	fb01 f303 	mul.w	r3, r1, r3
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d302      	bcc.n	8001de2 <osMessageQueueNew+0x82>
        mem = 1;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	623b      	str	r3, [r7, #32]
 8001de0:	e014      	b.n	8001e0c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d110      	bne.n	8001e0c <osMessageQueueNew+0xac>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d10c      	bne.n	8001e0c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d108      	bne.n	8001e0c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	695b      	ldr	r3, [r3, #20]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d104      	bne.n	8001e0c <osMessageQueueNew+0xac>
          mem = 0;
 8001e02:	2300      	movs	r3, #0
 8001e04:	623b      	str	r3, [r7, #32]
 8001e06:	e001      	b.n	8001e0c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8001e0c:	6a3b      	ldr	r3, [r7, #32]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d10b      	bne.n	8001e2a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	691a      	ldr	r2, [r3, #16]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	9100      	str	r1, [sp, #0]
 8001e1e:	68b9      	ldr	r1, [r7, #8]
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f000 f96d 	bl	8002100 <xQueueGenericCreateStatic>
 8001e26:	6278      	str	r0, [r7, #36]	; 0x24
 8001e28:	e008      	b.n	8001e3c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8001e2a:	6a3b      	ldr	r3, [r7, #32]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d105      	bne.n	8001e3c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8001e30:	2200      	movs	r2, #0
 8001e32:	68b9      	ldr	r1, [r7, #8]
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f000 f9da 	bl	80021ee <xQueueGenericCreate>
 8001e3a:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00c      	beq.n	8001e5c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d003      	beq.n	8001e50 <osMessageQueueNew+0xf0>
        name = attr->name;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	61fb      	str	r3, [r7, #28]
 8001e4e:	e001      	b.n	8001e54 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8001e54:	69f9      	ldr	r1, [r7, #28]
 8001e56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e58:	f001 f86e 	bl	8002f38 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3728      	adds	r7, #40	; 0x28
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	200000d8 	.word	0x200000d8

08001e6c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4a06      	ldr	r2, [pc, #24]	; (8001e94 <vApplicationGetIdleTaskMemory+0x28>)
 8001e7c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	4a05      	ldr	r2, [pc, #20]	; (8001e98 <vApplicationGetIdleTaskMemory+0x2c>)
 8001e82:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2280      	movs	r2, #128	; 0x80
 8001e88:	601a      	str	r2, [r3, #0]
}
 8001e8a:	bf00      	nop
 8001e8c:	3714      	adds	r7, #20
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bc80      	pop	{r7}
 8001e92:	4770      	bx	lr
 8001e94:	200000dc 	.word	0x200000dc
 8001e98:	20000138 	.word	0x20000138

08001e9c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	4a07      	ldr	r2, [pc, #28]	; (8001ec8 <vApplicationGetTimerTaskMemory+0x2c>)
 8001eac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	4a06      	ldr	r2, [pc, #24]	; (8001ecc <vApplicationGetTimerTaskMemory+0x30>)
 8001eb2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eba:	601a      	str	r2, [r3, #0]
}
 8001ebc:	bf00      	nop
 8001ebe:	3714      	adds	r7, #20
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bc80      	pop	{r7}
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	20000338 	.word	0x20000338
 8001ecc:	20000394 	.word	0x20000394

08001ed0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f103 0208 	add.w	r2, r3, #8
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ee8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f103 0208 	add.w	r2, r3, #8
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f103 0208 	add.w	r2, r3, #8
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bc80      	pop	{r7}
 8001f0c:	4770      	bx	lr

08001f0e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bc80      	pop	{r7}
 8001f24:	4770      	bx	lr

08001f26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001f26:	b480      	push	{r7}
 8001f28:	b085      	sub	sp, #20
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
 8001f2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	1c5a      	adds	r2, r3, #1
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	601a      	str	r2, [r3, #0]
}
 8001f62:	bf00      	nop
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bc80      	pop	{r7}
 8001f6a:	4770      	bx	lr

08001f6c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f82:	d103      	bne.n	8001f8c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	e00c      	b.n	8001fa6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3308      	adds	r3, #8
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	e002      	b.n	8001f9a <vListInsert+0x2e>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68ba      	ldr	r2, [r7, #8]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d2f6      	bcs.n	8001f94 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	1c5a      	adds	r2, r3, #1
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	601a      	str	r2, [r3, #0]
}
 8001fd2:	bf00      	nop
 8001fd4:	3714      	adds	r7, #20
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bc80      	pop	{r7}
 8001fda:	4770      	bx	lr

08001fdc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	6892      	ldr	r2, [r2, #8]
 8001ff2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	6852      	ldr	r2, [r2, #4]
 8001ffc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	429a      	cmp	r2, r3
 8002006:	d103      	bne.n	8002010 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689a      	ldr	r2, [r3, #8]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	1e5a      	subs	r2, r3, #1
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3714      	adds	r7, #20
 8002028:	46bd      	mov	sp, r7
 800202a:	bc80      	pop	{r7}
 800202c:	4770      	bx	lr
	...

08002030 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d10a      	bne.n	800205a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002048:	f383 8811 	msr	BASEPRI, r3
 800204c:	f3bf 8f6f 	isb	sy
 8002050:	f3bf 8f4f 	dsb	sy
 8002054:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002056:	bf00      	nop
 8002058:	e7fe      	b.n	8002058 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800205a:	f002 fbbf 	bl	80047dc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002066:	68f9      	ldr	r1, [r7, #12]
 8002068:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800206a:	fb01 f303 	mul.w	r3, r1, r3
 800206e:	441a      	add	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800208a:	3b01      	subs	r3, #1
 800208c:	68f9      	ldr	r1, [r7, #12]
 800208e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002090:	fb01 f303 	mul.w	r3, r1, r3
 8002094:	441a      	add	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	22ff      	movs	r2, #255	; 0xff
 800209e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	22ff      	movs	r2, #255	; 0xff
 80020a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d114      	bne.n	80020da <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d01a      	beq.n	80020ee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	3310      	adds	r3, #16
 80020bc:	4618      	mov	r0, r3
 80020be:	f001 fbe3 	bl	8003888 <xTaskRemoveFromEventList>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d012      	beq.n	80020ee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80020c8:	4b0c      	ldr	r3, [pc, #48]	; (80020fc <xQueueGenericReset+0xcc>)
 80020ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	f3bf 8f4f 	dsb	sy
 80020d4:	f3bf 8f6f 	isb	sy
 80020d8:	e009      	b.n	80020ee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	3310      	adds	r3, #16
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff fef6 	bl	8001ed0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	3324      	adds	r3, #36	; 0x24
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff fef1 	bl	8001ed0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80020ee:	f002 fba5 	bl	800483c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80020f2:	2301      	movs	r3, #1
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3710      	adds	r7, #16
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	e000ed04 	.word	0xe000ed04

08002100 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002100:	b580      	push	{r7, lr}
 8002102:	b08e      	sub	sp, #56	; 0x38
 8002104:	af02      	add	r7, sp, #8
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
 800210c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d10a      	bne.n	800212a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002118:	f383 8811 	msr	BASEPRI, r3
 800211c:	f3bf 8f6f 	isb	sy
 8002120:	f3bf 8f4f 	dsb	sy
 8002124:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002126:	bf00      	nop
 8002128:	e7fe      	b.n	8002128 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d10a      	bne.n	8002146 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002134:	f383 8811 	msr	BASEPRI, r3
 8002138:	f3bf 8f6f 	isb	sy
 800213c:	f3bf 8f4f 	dsb	sy
 8002140:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002142:	bf00      	nop
 8002144:	e7fe      	b.n	8002144 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d002      	beq.n	8002152 <xQueueGenericCreateStatic+0x52>
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <xQueueGenericCreateStatic+0x56>
 8002152:	2301      	movs	r3, #1
 8002154:	e000      	b.n	8002158 <xQueueGenericCreateStatic+0x58>
 8002156:	2300      	movs	r3, #0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d10a      	bne.n	8002172 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800215c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002160:	f383 8811 	msr	BASEPRI, r3
 8002164:	f3bf 8f6f 	isb	sy
 8002168:	f3bf 8f4f 	dsb	sy
 800216c:	623b      	str	r3, [r7, #32]
}
 800216e:	bf00      	nop
 8002170:	e7fe      	b.n	8002170 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d102      	bne.n	800217e <xQueueGenericCreateStatic+0x7e>
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <xQueueGenericCreateStatic+0x82>
 800217e:	2301      	movs	r3, #1
 8002180:	e000      	b.n	8002184 <xQueueGenericCreateStatic+0x84>
 8002182:	2300      	movs	r3, #0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10a      	bne.n	800219e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800218c:	f383 8811 	msr	BASEPRI, r3
 8002190:	f3bf 8f6f 	isb	sy
 8002194:	f3bf 8f4f 	dsb	sy
 8002198:	61fb      	str	r3, [r7, #28]
}
 800219a:	bf00      	nop
 800219c:	e7fe      	b.n	800219c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800219e:	2350      	movs	r3, #80	; 0x50
 80021a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	2b50      	cmp	r3, #80	; 0x50
 80021a6:	d00a      	beq.n	80021be <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80021a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ac:	f383 8811 	msr	BASEPRI, r3
 80021b0:	f3bf 8f6f 	isb	sy
 80021b4:	f3bf 8f4f 	dsb	sy
 80021b8:	61bb      	str	r3, [r7, #24]
}
 80021ba:	bf00      	nop
 80021bc:	e7fe      	b.n	80021bc <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80021c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d00d      	beq.n	80021e4 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80021c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80021d0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80021d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021d6:	9300      	str	r3, [sp, #0]
 80021d8:	4613      	mov	r3, r2
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	68b9      	ldr	r1, [r7, #8]
 80021de:	68f8      	ldr	r0, [r7, #12]
 80021e0:	f000 f843 	bl	800226a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80021e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3730      	adds	r7, #48	; 0x30
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b08a      	sub	sp, #40	; 0x28
 80021f2:	af02      	add	r7, sp, #8
 80021f4:	60f8      	str	r0, [r7, #12]
 80021f6:	60b9      	str	r1, [r7, #8]
 80021f8:	4613      	mov	r3, r2
 80021fa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10a      	bne.n	8002218 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002206:	f383 8811 	msr	BASEPRI, r3
 800220a:	f3bf 8f6f 	isb	sy
 800220e:	f3bf 8f4f 	dsb	sy
 8002212:	613b      	str	r3, [r7, #16]
}
 8002214:	bf00      	nop
 8002216:	e7fe      	b.n	8002216 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d102      	bne.n	8002224 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800221e:	2300      	movs	r3, #0
 8002220:	61fb      	str	r3, [r7, #28]
 8002222:	e004      	b.n	800222e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	fb02 f303 	mul.w	r3, r2, r3
 800222c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	3350      	adds	r3, #80	; 0x50
 8002232:	4618      	mov	r0, r3
 8002234:	f002 fbd2 	bl	80049dc <pvPortMalloc>
 8002238:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00f      	beq.n	8002260 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	3350      	adds	r3, #80	; 0x50
 8002244:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800224e:	79fa      	ldrb	r2, [r7, #7]
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	4613      	mov	r3, r2
 8002256:	697a      	ldr	r2, [r7, #20]
 8002258:	68b9      	ldr	r1, [r7, #8]
 800225a:	68f8      	ldr	r0, [r7, #12]
 800225c:	f000 f805 	bl	800226a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002260:	69bb      	ldr	r3, [r7, #24]
	}
 8002262:	4618      	mov	r0, r3
 8002264:	3720      	adds	r7, #32
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b084      	sub	sp, #16
 800226e:	af00      	add	r7, sp, #0
 8002270:	60f8      	str	r0, [r7, #12]
 8002272:	60b9      	str	r1, [r7, #8]
 8002274:	607a      	str	r2, [r7, #4]
 8002276:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d103      	bne.n	8002286 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	e002      	b.n	800228c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	68ba      	ldr	r2, [r7, #8]
 8002296:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002298:	2101      	movs	r1, #1
 800229a:	69b8      	ldr	r0, [r7, #24]
 800229c:	f7ff fec8 	bl	8002030 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	78fa      	ldrb	r2, [r7, #3]
 80022a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80022a8:	bf00      	nop
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b08a      	sub	sp, #40	; 0x28
 80022b4:	af02      	add	r7, sp, #8
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d10a      	bne.n	80022d8 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80022c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022c6:	f383 8811 	msr	BASEPRI, r3
 80022ca:	f3bf 8f6f 	isb	sy
 80022ce:	f3bf 8f4f 	dsb	sy
 80022d2:	61bb      	str	r3, [r7, #24]
}
 80022d4:	bf00      	nop
 80022d6:	e7fe      	b.n	80022d6 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80022d8:	68ba      	ldr	r2, [r7, #8]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d90a      	bls.n	80022f6 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80022e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022e4:	f383 8811 	msr	BASEPRI, r3
 80022e8:	f3bf 8f6f 	isb	sy
 80022ec:	f3bf 8f4f 	dsb	sy
 80022f0:	617b      	str	r3, [r7, #20]
}
 80022f2:	bf00      	nop
 80022f4:	e7fe      	b.n	80022f4 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80022f6:	2302      	movs	r3, #2
 80022f8:	9300      	str	r3, [sp, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	2100      	movs	r1, #0
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f7ff fefd 	bl	8002100 <xQueueGenericCreateStatic>
 8002306:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d002      	beq.n	8002314 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	68ba      	ldr	r2, [r7, #8]
 8002312:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002314:	69fb      	ldr	r3, [r7, #28]
	}
 8002316:	4618      	mov	r0, r3
 8002318:	3720      	adds	r7, #32
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800231e:	b580      	push	{r7, lr}
 8002320:	b086      	sub	sp, #24
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
 8002326:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d10a      	bne.n	8002344 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800232e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002332:	f383 8811 	msr	BASEPRI, r3
 8002336:	f3bf 8f6f 	isb	sy
 800233a:	f3bf 8f4f 	dsb	sy
 800233e:	613b      	str	r3, [r7, #16]
}
 8002340:	bf00      	nop
 8002342:	e7fe      	b.n	8002342 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	429a      	cmp	r2, r3
 800234a:	d90a      	bls.n	8002362 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800234c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002350:	f383 8811 	msr	BASEPRI, r3
 8002354:	f3bf 8f6f 	isb	sy
 8002358:	f3bf 8f4f 	dsb	sy
 800235c:	60fb      	str	r3, [r7, #12]
}
 800235e:	bf00      	nop
 8002360:	e7fe      	b.n	8002360 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002362:	2202      	movs	r2, #2
 8002364:	2100      	movs	r1, #0
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7ff ff41 	bl	80021ee <xQueueGenericCreate>
 800236c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d002      	beq.n	800237a <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800237a:	697b      	ldr	r3, [r7, #20]
	}
 800237c:	4618      	mov	r0, r3
 800237e:	3718      	adds	r7, #24
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b08e      	sub	sp, #56	; 0x38
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
 8002390:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002392:	2300      	movs	r3, #0
 8002394:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800239a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800239c:	2b00      	cmp	r3, #0
 800239e:	d10a      	bne.n	80023b6 <xQueueGenericSend+0x32>
	__asm volatile
 80023a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a4:	f383 8811 	msr	BASEPRI, r3
 80023a8:	f3bf 8f6f 	isb	sy
 80023ac:	f3bf 8f4f 	dsb	sy
 80023b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80023b2:	bf00      	nop
 80023b4:	e7fe      	b.n	80023b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d103      	bne.n	80023c4 <xQueueGenericSend+0x40>
 80023bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <xQueueGenericSend+0x44>
 80023c4:	2301      	movs	r3, #1
 80023c6:	e000      	b.n	80023ca <xQueueGenericSend+0x46>
 80023c8:	2300      	movs	r3, #0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10a      	bne.n	80023e4 <xQueueGenericSend+0x60>
	__asm volatile
 80023ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023d2:	f383 8811 	msr	BASEPRI, r3
 80023d6:	f3bf 8f6f 	isb	sy
 80023da:	f3bf 8f4f 	dsb	sy
 80023de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80023e0:	bf00      	nop
 80023e2:	e7fe      	b.n	80023e2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d103      	bne.n	80023f2 <xQueueGenericSend+0x6e>
 80023ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d101      	bne.n	80023f6 <xQueueGenericSend+0x72>
 80023f2:	2301      	movs	r3, #1
 80023f4:	e000      	b.n	80023f8 <xQueueGenericSend+0x74>
 80023f6:	2300      	movs	r3, #0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10a      	bne.n	8002412 <xQueueGenericSend+0x8e>
	__asm volatile
 80023fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002400:	f383 8811 	msr	BASEPRI, r3
 8002404:	f3bf 8f6f 	isb	sy
 8002408:	f3bf 8f4f 	dsb	sy
 800240c:	623b      	str	r3, [r7, #32]
}
 800240e:	bf00      	nop
 8002410:	e7fe      	b.n	8002410 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002412:	f001 fbfb 	bl	8003c0c <xTaskGetSchedulerState>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d102      	bne.n	8002422 <xQueueGenericSend+0x9e>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <xQueueGenericSend+0xa2>
 8002422:	2301      	movs	r3, #1
 8002424:	e000      	b.n	8002428 <xQueueGenericSend+0xa4>
 8002426:	2300      	movs	r3, #0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10a      	bne.n	8002442 <xQueueGenericSend+0xbe>
	__asm volatile
 800242c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002430:	f383 8811 	msr	BASEPRI, r3
 8002434:	f3bf 8f6f 	isb	sy
 8002438:	f3bf 8f4f 	dsb	sy
 800243c:	61fb      	str	r3, [r7, #28]
}
 800243e:	bf00      	nop
 8002440:	e7fe      	b.n	8002440 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002442:	f002 f9cb 	bl	80047dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002448:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800244a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800244c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800244e:	429a      	cmp	r2, r3
 8002450:	d302      	bcc.n	8002458 <xQueueGenericSend+0xd4>
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	2b02      	cmp	r3, #2
 8002456:	d129      	bne.n	80024ac <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	68b9      	ldr	r1, [r7, #8]
 800245c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800245e:	f000 fc5b 	bl	8002d18 <prvCopyDataToQueue>
 8002462:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002468:	2b00      	cmp	r3, #0
 800246a:	d010      	beq.n	800248e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800246c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800246e:	3324      	adds	r3, #36	; 0x24
 8002470:	4618      	mov	r0, r3
 8002472:	f001 fa09 	bl	8003888 <xTaskRemoveFromEventList>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d013      	beq.n	80024a4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800247c:	4b3f      	ldr	r3, [pc, #252]	; (800257c <xQueueGenericSend+0x1f8>)
 800247e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	f3bf 8f4f 	dsb	sy
 8002488:	f3bf 8f6f 	isb	sy
 800248c:	e00a      	b.n	80024a4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800248e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002490:	2b00      	cmp	r3, #0
 8002492:	d007      	beq.n	80024a4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002494:	4b39      	ldr	r3, [pc, #228]	; (800257c <xQueueGenericSend+0x1f8>)
 8002496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	f3bf 8f4f 	dsb	sy
 80024a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80024a4:	f002 f9ca 	bl	800483c <vPortExitCritical>
				return pdPASS;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e063      	b.n	8002574 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d103      	bne.n	80024ba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80024b2:	f002 f9c3 	bl	800483c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80024b6:	2300      	movs	r3, #0
 80024b8:	e05c      	b.n	8002574 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80024ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d106      	bne.n	80024ce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80024c0:	f107 0314 	add.w	r3, r7, #20
 80024c4:	4618      	mov	r0, r3
 80024c6:	f001 fa43 	bl	8003950 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80024ca:	2301      	movs	r3, #1
 80024cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80024ce:	f002 f9b5 	bl	800483c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80024d2:	f000 ffb5 	bl	8003440 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80024d6:	f002 f981 	bl	80047dc <vPortEnterCritical>
 80024da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024e0:	b25b      	sxtb	r3, r3
 80024e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e6:	d103      	bne.n	80024f0 <xQueueGenericSend+0x16c>
 80024e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024f6:	b25b      	sxtb	r3, r3
 80024f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024fc:	d103      	bne.n	8002506 <xQueueGenericSend+0x182>
 80024fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002506:	f002 f999 	bl	800483c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800250a:	1d3a      	adds	r2, r7, #4
 800250c:	f107 0314 	add.w	r3, r7, #20
 8002510:	4611      	mov	r1, r2
 8002512:	4618      	mov	r0, r3
 8002514:	f001 fa32 	bl	800397c <xTaskCheckForTimeOut>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d124      	bne.n	8002568 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800251e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002520:	f000 fcf2 	bl	8002f08 <prvIsQueueFull>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d018      	beq.n	800255c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800252a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252c:	3310      	adds	r3, #16
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	4611      	mov	r1, r2
 8002532:	4618      	mov	r0, r3
 8002534:	f001 f958 	bl	80037e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002538:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800253a:	f000 fc7d 	bl	8002e38 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800253e:	f000 ff8d 	bl	800345c <xTaskResumeAll>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	f47f af7c 	bne.w	8002442 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800254a:	4b0c      	ldr	r3, [pc, #48]	; (800257c <xQueueGenericSend+0x1f8>)
 800254c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002550:	601a      	str	r2, [r3, #0]
 8002552:	f3bf 8f4f 	dsb	sy
 8002556:	f3bf 8f6f 	isb	sy
 800255a:	e772      	b.n	8002442 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800255c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800255e:	f000 fc6b 	bl	8002e38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002562:	f000 ff7b 	bl	800345c <xTaskResumeAll>
 8002566:	e76c      	b.n	8002442 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002568:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800256a:	f000 fc65 	bl	8002e38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800256e:	f000 ff75 	bl	800345c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002572:	2300      	movs	r3, #0
		}
	}
}
 8002574:	4618      	mov	r0, r3
 8002576:	3738      	adds	r7, #56	; 0x38
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	e000ed04 	.word	0xe000ed04

08002580 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b08e      	sub	sp, #56	; 0x38
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
 800258c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10a      	bne.n	80025ae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800259c:	f383 8811 	msr	BASEPRI, r3
 80025a0:	f3bf 8f6f 	isb	sy
 80025a4:	f3bf 8f4f 	dsb	sy
 80025a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80025aa:	bf00      	nop
 80025ac:	e7fe      	b.n	80025ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d103      	bne.n	80025bc <xQueueGenericSendFromISR+0x3c>
 80025b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d101      	bne.n	80025c0 <xQueueGenericSendFromISR+0x40>
 80025bc:	2301      	movs	r3, #1
 80025be:	e000      	b.n	80025c2 <xQueueGenericSendFromISR+0x42>
 80025c0:	2300      	movs	r3, #0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10a      	bne.n	80025dc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80025c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ca:	f383 8811 	msr	BASEPRI, r3
 80025ce:	f3bf 8f6f 	isb	sy
 80025d2:	f3bf 8f4f 	dsb	sy
 80025d6:	623b      	str	r3, [r7, #32]
}
 80025d8:	bf00      	nop
 80025da:	e7fe      	b.n	80025da <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d103      	bne.n	80025ea <xQueueGenericSendFromISR+0x6a>
 80025e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d101      	bne.n	80025ee <xQueueGenericSendFromISR+0x6e>
 80025ea:	2301      	movs	r3, #1
 80025ec:	e000      	b.n	80025f0 <xQueueGenericSendFromISR+0x70>
 80025ee:	2300      	movs	r3, #0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d10a      	bne.n	800260a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80025f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f8:	f383 8811 	msr	BASEPRI, r3
 80025fc:	f3bf 8f6f 	isb	sy
 8002600:	f3bf 8f4f 	dsb	sy
 8002604:	61fb      	str	r3, [r7, #28]
}
 8002606:	bf00      	nop
 8002608:	e7fe      	b.n	8002608 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800260a:	f002 f9a9 	bl	8004960 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800260e:	f3ef 8211 	mrs	r2, BASEPRI
 8002612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002616:	f383 8811 	msr	BASEPRI, r3
 800261a:	f3bf 8f6f 	isb	sy
 800261e:	f3bf 8f4f 	dsb	sy
 8002622:	61ba      	str	r2, [r7, #24]
 8002624:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002626:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002628:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800262a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800262c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800262e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002632:	429a      	cmp	r2, r3
 8002634:	d302      	bcc.n	800263c <xQueueGenericSendFromISR+0xbc>
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	2b02      	cmp	r3, #2
 800263a:	d12c      	bne.n	8002696 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800263c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800263e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	68b9      	ldr	r1, [r7, #8]
 800264a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800264c:	f000 fb64 	bl	8002d18 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002650:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002658:	d112      	bne.n	8002680 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800265a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800265c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265e:	2b00      	cmp	r3, #0
 8002660:	d016      	beq.n	8002690 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002664:	3324      	adds	r3, #36	; 0x24
 8002666:	4618      	mov	r0, r3
 8002668:	f001 f90e 	bl	8003888 <xTaskRemoveFromEventList>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00e      	beq.n	8002690 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d00b      	beq.n	8002690 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	e007      	b.n	8002690 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002680:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002684:	3301      	adds	r3, #1
 8002686:	b2db      	uxtb	r3, r3
 8002688:	b25a      	sxtb	r2, r3
 800268a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002690:	2301      	movs	r3, #1
 8002692:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002694:	e001      	b.n	800269a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002696:	2300      	movs	r3, #0
 8002698:	637b      	str	r3, [r7, #52]	; 0x34
 800269a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800269c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80026a4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80026a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3738      	adds	r7, #56	; 0x38
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b08e      	sub	sp, #56	; 0x38
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80026be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d10a      	bne.n	80026da <xQueueGiveFromISR+0x2a>
	__asm volatile
 80026c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c8:	f383 8811 	msr	BASEPRI, r3
 80026cc:	f3bf 8f6f 	isb	sy
 80026d0:	f3bf 8f4f 	dsb	sy
 80026d4:	623b      	str	r3, [r7, #32]
}
 80026d6:	bf00      	nop
 80026d8:	e7fe      	b.n	80026d8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80026da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00a      	beq.n	80026f8 <xQueueGiveFromISR+0x48>
	__asm volatile
 80026e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e6:	f383 8811 	msr	BASEPRI, r3
 80026ea:	f3bf 8f6f 	isb	sy
 80026ee:	f3bf 8f4f 	dsb	sy
 80026f2:	61fb      	str	r3, [r7, #28]
}
 80026f4:	bf00      	nop
 80026f6:	e7fe      	b.n	80026f6 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80026f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d103      	bne.n	8002708 <xQueueGiveFromISR+0x58>
 8002700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <xQueueGiveFromISR+0x5c>
 8002708:	2301      	movs	r3, #1
 800270a:	e000      	b.n	800270e <xQueueGiveFromISR+0x5e>
 800270c:	2300      	movs	r3, #0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10a      	bne.n	8002728 <xQueueGiveFromISR+0x78>
	__asm volatile
 8002712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002716:	f383 8811 	msr	BASEPRI, r3
 800271a:	f3bf 8f6f 	isb	sy
 800271e:	f3bf 8f4f 	dsb	sy
 8002722:	61bb      	str	r3, [r7, #24]
}
 8002724:	bf00      	nop
 8002726:	e7fe      	b.n	8002726 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002728:	f002 f91a 	bl	8004960 <vPortValidateInterruptPriority>
	__asm volatile
 800272c:	f3ef 8211 	mrs	r2, BASEPRI
 8002730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002734:	f383 8811 	msr	BASEPRI, r3
 8002738:	f3bf 8f6f 	isb	sy
 800273c:	f3bf 8f4f 	dsb	sy
 8002740:	617a      	str	r2, [r7, #20]
 8002742:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8002744:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002746:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800274a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800274e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002752:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002754:	429a      	cmp	r2, r3
 8002756:	d22b      	bcs.n	80027b0 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800275a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800275e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002764:	1c5a      	adds	r2, r3, #1
 8002766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002768:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800276a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800276e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002772:	d112      	bne.n	800279a <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002778:	2b00      	cmp	r3, #0
 800277a:	d016      	beq.n	80027aa <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800277c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800277e:	3324      	adds	r3, #36	; 0x24
 8002780:	4618      	mov	r0, r3
 8002782:	f001 f881 	bl	8003888 <xTaskRemoveFromEventList>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00e      	beq.n	80027aa <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00b      	beq.n	80027aa <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	2201      	movs	r2, #1
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	e007      	b.n	80027aa <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800279a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800279e:	3301      	adds	r3, #1
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	b25a      	sxtb	r2, r3
 80027a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80027aa:	2301      	movs	r3, #1
 80027ac:	637b      	str	r3, [r7, #52]	; 0x34
 80027ae:	e001      	b.n	80027b4 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80027b0:	2300      	movs	r3, #0
 80027b2:	637b      	str	r3, [r7, #52]	; 0x34
 80027b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b6:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f383 8811 	msr	BASEPRI, r3
}
 80027be:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80027c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3738      	adds	r7, #56	; 0x38
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
	...

080027cc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b08c      	sub	sp, #48	; 0x30
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80027d8:	2300      	movs	r3, #0
 80027da:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80027e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10a      	bne.n	80027fc <xQueueReceive+0x30>
	__asm volatile
 80027e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ea:	f383 8811 	msr	BASEPRI, r3
 80027ee:	f3bf 8f6f 	isb	sy
 80027f2:	f3bf 8f4f 	dsb	sy
 80027f6:	623b      	str	r3, [r7, #32]
}
 80027f8:	bf00      	nop
 80027fa:	e7fe      	b.n	80027fa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d103      	bne.n	800280a <xQueueReceive+0x3e>
 8002802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <xQueueReceive+0x42>
 800280a:	2301      	movs	r3, #1
 800280c:	e000      	b.n	8002810 <xQueueReceive+0x44>
 800280e:	2300      	movs	r3, #0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10a      	bne.n	800282a <xQueueReceive+0x5e>
	__asm volatile
 8002814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002818:	f383 8811 	msr	BASEPRI, r3
 800281c:	f3bf 8f6f 	isb	sy
 8002820:	f3bf 8f4f 	dsb	sy
 8002824:	61fb      	str	r3, [r7, #28]
}
 8002826:	bf00      	nop
 8002828:	e7fe      	b.n	8002828 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800282a:	f001 f9ef 	bl	8003c0c <xTaskGetSchedulerState>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d102      	bne.n	800283a <xQueueReceive+0x6e>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <xQueueReceive+0x72>
 800283a:	2301      	movs	r3, #1
 800283c:	e000      	b.n	8002840 <xQueueReceive+0x74>
 800283e:	2300      	movs	r3, #0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d10a      	bne.n	800285a <xQueueReceive+0x8e>
	__asm volatile
 8002844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002848:	f383 8811 	msr	BASEPRI, r3
 800284c:	f3bf 8f6f 	isb	sy
 8002850:	f3bf 8f4f 	dsb	sy
 8002854:	61bb      	str	r3, [r7, #24]
}
 8002856:	bf00      	nop
 8002858:	e7fe      	b.n	8002858 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800285a:	f001 ffbf 	bl	80047dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800285e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002862:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	2b00      	cmp	r3, #0
 8002868:	d01f      	beq.n	80028aa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800286a:	68b9      	ldr	r1, [r7, #8]
 800286c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800286e:	f000 fabd 	bl	8002dec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002874:	1e5a      	subs	r2, r3, #1
 8002876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002878:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800287a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00f      	beq.n	80028a2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002884:	3310      	adds	r3, #16
 8002886:	4618      	mov	r0, r3
 8002888:	f000 fffe 	bl	8003888 <xTaskRemoveFromEventList>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d007      	beq.n	80028a2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002892:	4b3d      	ldr	r3, [pc, #244]	; (8002988 <xQueueReceive+0x1bc>)
 8002894:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	f3bf 8f4f 	dsb	sy
 800289e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80028a2:	f001 ffcb 	bl	800483c <vPortExitCritical>
				return pdPASS;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e069      	b.n	800297e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d103      	bne.n	80028b8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80028b0:	f001 ffc4 	bl	800483c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80028b4:	2300      	movs	r3, #0
 80028b6:	e062      	b.n	800297e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80028b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d106      	bne.n	80028cc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80028be:	f107 0310 	add.w	r3, r7, #16
 80028c2:	4618      	mov	r0, r3
 80028c4:	f001 f844 	bl	8003950 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80028c8:	2301      	movs	r3, #1
 80028ca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80028cc:	f001 ffb6 	bl	800483c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80028d0:	f000 fdb6 	bl	8003440 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80028d4:	f001 ff82 	bl	80047dc <vPortEnterCritical>
 80028d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028de:	b25b      	sxtb	r3, r3
 80028e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e4:	d103      	bne.n	80028ee <xQueueReceive+0x122>
 80028e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028f4:	b25b      	sxtb	r3, r3
 80028f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028fa:	d103      	bne.n	8002904 <xQueueReceive+0x138>
 80028fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002904:	f001 ff9a 	bl	800483c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002908:	1d3a      	adds	r2, r7, #4
 800290a:	f107 0310 	add.w	r3, r7, #16
 800290e:	4611      	mov	r1, r2
 8002910:	4618      	mov	r0, r3
 8002912:	f001 f833 	bl	800397c <xTaskCheckForTimeOut>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d123      	bne.n	8002964 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800291c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800291e:	f000 fadd 	bl	8002edc <prvIsQueueEmpty>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d017      	beq.n	8002958 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800292a:	3324      	adds	r3, #36	; 0x24
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	4611      	mov	r1, r2
 8002930:	4618      	mov	r0, r3
 8002932:	f000 ff59 	bl	80037e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002936:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002938:	f000 fa7e 	bl	8002e38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800293c:	f000 fd8e 	bl	800345c <xTaskResumeAll>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d189      	bne.n	800285a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002946:	4b10      	ldr	r3, [pc, #64]	; (8002988 <xQueueReceive+0x1bc>)
 8002948:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	f3bf 8f4f 	dsb	sy
 8002952:	f3bf 8f6f 	isb	sy
 8002956:	e780      	b.n	800285a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002958:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800295a:	f000 fa6d 	bl	8002e38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800295e:	f000 fd7d 	bl	800345c <xTaskResumeAll>
 8002962:	e77a      	b.n	800285a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002964:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002966:	f000 fa67 	bl	8002e38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800296a:	f000 fd77 	bl	800345c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800296e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002970:	f000 fab4 	bl	8002edc <prvIsQueueEmpty>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	f43f af6f 	beq.w	800285a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800297c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800297e:	4618      	mov	r0, r3
 8002980:	3730      	adds	r7, #48	; 0x30
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	e000ed04 	.word	0xe000ed04

0800298c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b08e      	sub	sp, #56	; 0x38
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002996:	2300      	movs	r3, #0
 8002998:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800299e:	2300      	movs	r3, #0
 80029a0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80029a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10a      	bne.n	80029be <xQueueSemaphoreTake+0x32>
	__asm volatile
 80029a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ac:	f383 8811 	msr	BASEPRI, r3
 80029b0:	f3bf 8f6f 	isb	sy
 80029b4:	f3bf 8f4f 	dsb	sy
 80029b8:	623b      	str	r3, [r7, #32]
}
 80029ba:	bf00      	nop
 80029bc:	e7fe      	b.n	80029bc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80029be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00a      	beq.n	80029dc <xQueueSemaphoreTake+0x50>
	__asm volatile
 80029c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ca:	f383 8811 	msr	BASEPRI, r3
 80029ce:	f3bf 8f6f 	isb	sy
 80029d2:	f3bf 8f4f 	dsb	sy
 80029d6:	61fb      	str	r3, [r7, #28]
}
 80029d8:	bf00      	nop
 80029da:	e7fe      	b.n	80029da <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80029dc:	f001 f916 	bl	8003c0c <xTaskGetSchedulerState>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d102      	bne.n	80029ec <xQueueSemaphoreTake+0x60>
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d101      	bne.n	80029f0 <xQueueSemaphoreTake+0x64>
 80029ec:	2301      	movs	r3, #1
 80029ee:	e000      	b.n	80029f2 <xQueueSemaphoreTake+0x66>
 80029f0:	2300      	movs	r3, #0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10a      	bne.n	8002a0c <xQueueSemaphoreTake+0x80>
	__asm volatile
 80029f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029fa:	f383 8811 	msr	BASEPRI, r3
 80029fe:	f3bf 8f6f 	isb	sy
 8002a02:	f3bf 8f4f 	dsb	sy
 8002a06:	61bb      	str	r3, [r7, #24]
}
 8002a08:	bf00      	nop
 8002a0a:	e7fe      	b.n	8002a0a <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002a0c:	f001 fee6 	bl	80047dc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a14:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d024      	beq.n	8002a66 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a1e:	1e5a      	subs	r2, r3, #1
 8002a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a22:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d104      	bne.n	8002a36 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8002a2c:	f001 fa6e 	bl	8003f0c <pvTaskIncrementMutexHeldCount>
 8002a30:	4602      	mov	r2, r0
 8002a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a34:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00f      	beq.n	8002a5e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a40:	3310      	adds	r3, #16
 8002a42:	4618      	mov	r0, r3
 8002a44:	f000 ff20 	bl	8003888 <xTaskRemoveFromEventList>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d007      	beq.n	8002a5e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002a4e:	4b54      	ldr	r3, [pc, #336]	; (8002ba0 <xQueueSemaphoreTake+0x214>)
 8002a50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	f3bf 8f4f 	dsb	sy
 8002a5a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002a5e:	f001 feed 	bl	800483c <vPortExitCritical>
				return pdPASS;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e097      	b.n	8002b96 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d111      	bne.n	8002a90 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00a      	beq.n	8002a88 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8002a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a76:	f383 8811 	msr	BASEPRI, r3
 8002a7a:	f3bf 8f6f 	isb	sy
 8002a7e:	f3bf 8f4f 	dsb	sy
 8002a82:	617b      	str	r3, [r7, #20]
}
 8002a84:	bf00      	nop
 8002a86:	e7fe      	b.n	8002a86 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002a88:	f001 fed8 	bl	800483c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	e082      	b.n	8002b96 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d106      	bne.n	8002aa4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002a96:	f107 030c 	add.w	r3, r7, #12
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f000 ff58 	bl	8003950 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002aa4:	f001 feca 	bl	800483c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002aa8:	f000 fcca 	bl	8003440 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002aac:	f001 fe96 	bl	80047dc <vPortEnterCritical>
 8002ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ab6:	b25b      	sxtb	r3, r3
 8002ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002abc:	d103      	bne.n	8002ac6 <xQueueSemaphoreTake+0x13a>
 8002abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002acc:	b25b      	sxtb	r3, r3
 8002ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad2:	d103      	bne.n	8002adc <xQueueSemaphoreTake+0x150>
 8002ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002adc:	f001 feae 	bl	800483c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ae0:	463a      	mov	r2, r7
 8002ae2:	f107 030c 	add.w	r3, r7, #12
 8002ae6:	4611      	mov	r1, r2
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f000 ff47 	bl	800397c <xTaskCheckForTimeOut>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d132      	bne.n	8002b5a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002af4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002af6:	f000 f9f1 	bl	8002edc <prvIsQueueEmpty>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d026      	beq.n	8002b4e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d109      	bne.n	8002b1c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8002b08:	f001 fe68 	bl	80047dc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8002b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f001 f899 	bl	8003c48 <xTaskPriorityInherit>
 8002b16:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8002b18:	f001 fe90 	bl	800483c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b1e:	3324      	adds	r3, #36	; 0x24
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	4611      	mov	r1, r2
 8002b24:	4618      	mov	r0, r3
 8002b26:	f000 fe5f 	bl	80037e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002b2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b2c:	f000 f984 	bl	8002e38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002b30:	f000 fc94 	bl	800345c <xTaskResumeAll>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f47f af68 	bne.w	8002a0c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8002b3c:	4b18      	ldr	r3, [pc, #96]	; (8002ba0 <xQueueSemaphoreTake+0x214>)
 8002b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	f3bf 8f4f 	dsb	sy
 8002b48:	f3bf 8f6f 	isb	sy
 8002b4c:	e75e      	b.n	8002a0c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002b4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b50:	f000 f972 	bl	8002e38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002b54:	f000 fc82 	bl	800345c <xTaskResumeAll>
 8002b58:	e758      	b.n	8002a0c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002b5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b5c:	f000 f96c 	bl	8002e38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002b60:	f000 fc7c 	bl	800345c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b66:	f000 f9b9 	bl	8002edc <prvIsQueueEmpty>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f43f af4d 	beq.w	8002a0c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00d      	beq.n	8002b94 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8002b78:	f001 fe30 	bl	80047dc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002b7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b7e:	f000 f8b4 	bl	8002cea <prvGetDisinheritPriorityAfterTimeout>
 8002b82:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8002b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f001 f938 	bl	8003e00 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002b90:	f001 fe54 	bl	800483c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002b94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3738      	adds	r7, #56	; 0x38
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	e000ed04 	.word	0xe000ed04

08002ba4 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b08e      	sub	sp, #56	; 0x38
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10a      	bne.n	8002bd0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8002bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bbe:	f383 8811 	msr	BASEPRI, r3
 8002bc2:	f3bf 8f6f 	isb	sy
 8002bc6:	f3bf 8f4f 	dsb	sy
 8002bca:	623b      	str	r3, [r7, #32]
}
 8002bcc:	bf00      	nop
 8002bce:	e7fe      	b.n	8002bce <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d103      	bne.n	8002bde <xQueueReceiveFromISR+0x3a>
 8002bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <xQueueReceiveFromISR+0x3e>
 8002bde:	2301      	movs	r3, #1
 8002be0:	e000      	b.n	8002be4 <xQueueReceiveFromISR+0x40>
 8002be2:	2300      	movs	r3, #0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10a      	bne.n	8002bfe <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8002be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bec:	f383 8811 	msr	BASEPRI, r3
 8002bf0:	f3bf 8f6f 	isb	sy
 8002bf4:	f3bf 8f4f 	dsb	sy
 8002bf8:	61fb      	str	r3, [r7, #28]
}
 8002bfa:	bf00      	nop
 8002bfc:	e7fe      	b.n	8002bfc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002bfe:	f001 feaf 	bl	8004960 <vPortValidateInterruptPriority>
	__asm volatile
 8002c02:	f3ef 8211 	mrs	r2, BASEPRI
 8002c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c0a:	f383 8811 	msr	BASEPRI, r3
 8002c0e:	f3bf 8f6f 	isb	sy
 8002c12:	f3bf 8f4f 	dsb	sy
 8002c16:	61ba      	str	r2, [r7, #24]
 8002c18:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002c1a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c22:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d02f      	beq.n	8002c8a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002c34:	68b9      	ldr	r1, [r7, #8]
 8002c36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c38:	f000 f8d8 	bl	8002dec <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c3e:	1e5a      	subs	r2, r3, #1
 8002c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c42:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002c44:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c4c:	d112      	bne.n	8002c74 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d016      	beq.n	8002c84 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c58:	3310      	adds	r3, #16
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f000 fe14 	bl	8003888 <xTaskRemoveFromEventList>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00e      	beq.n	8002c84 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00b      	beq.n	8002c84 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	e007      	b.n	8002c84 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002c74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c78:	3301      	adds	r3, #1
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	b25a      	sxtb	r2, r3
 8002c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8002c84:	2301      	movs	r3, #1
 8002c86:	637b      	str	r3, [r7, #52]	; 0x34
 8002c88:	e001      	b.n	8002c8e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	637b      	str	r3, [r7, #52]	; 0x34
 8002c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c90:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	f383 8811 	msr	BASEPRI, r3
}
 8002c98:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3738      	adds	r7, #56	; 0x38
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10a      	bne.n	8002ccc <vQueueDelete+0x28>
	__asm volatile
 8002cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cba:	f383 8811 	msr	BASEPRI, r3
 8002cbe:	f3bf 8f6f 	isb	sy
 8002cc2:	f3bf 8f4f 	dsb	sy
 8002cc6:	60bb      	str	r3, [r7, #8]
}
 8002cc8:	bf00      	nop
 8002cca:	e7fe      	b.n	8002cca <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f000 f95b 	bl	8002f88 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d102      	bne.n	8002ce2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f001 ff41 	bl	8004b64 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8002ce2:	bf00      	nop
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002cea:	b480      	push	{r7}
 8002cec:	b085      	sub	sp, #20
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d006      	beq.n	8002d08 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	e001      	b.n	8002d0c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
	}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr

08002d18 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002d24:	2300      	movs	r3, #0
 8002d26:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d2c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10d      	bne.n	8002d52 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d14d      	bne.n	8002dda <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f000 ffee 	bl	8003d24 <xTaskPriorityDisinherit>
 8002d48:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	605a      	str	r2, [r3, #4]
 8002d50:	e043      	b.n	8002dda <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d119      	bne.n	8002d8c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6898      	ldr	r0, [r3, #8]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d60:	461a      	mov	r2, r3
 8002d62:	68b9      	ldr	r1, [r7, #8]
 8002d64:	f002 f83e 	bl	8004de4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	689a      	ldr	r2, [r3, #8]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d70:	441a      	add	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	689a      	ldr	r2, [r3, #8]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d32b      	bcc.n	8002dda <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	609a      	str	r2, [r3, #8]
 8002d8a:	e026      	b.n	8002dda <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	68d8      	ldr	r0, [r3, #12]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d94:	461a      	mov	r2, r3
 8002d96:	68b9      	ldr	r1, [r7, #8]
 8002d98:	f002 f824 	bl	8004de4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	68da      	ldr	r2, [r3, #12]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da4:	425b      	negs	r3, r3
 8002da6:	441a      	add	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	68da      	ldr	r2, [r3, #12]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d207      	bcs.n	8002dc8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc0:	425b      	negs	r3, r3
 8002dc2:	441a      	add	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d105      	bne.n	8002dda <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d002      	beq.n	8002dda <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1c5a      	adds	r2, r3, #1
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002de2:	697b      	ldr	r3, [r7, #20]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3718      	adds	r7, #24
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d018      	beq.n	8002e30 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68da      	ldr	r2, [r3, #12]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	441a      	add	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68da      	ldr	r2, [r3, #12]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d303      	bcc.n	8002e20 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68d9      	ldr	r1, [r3, #12]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e28:	461a      	mov	r2, r3
 8002e2a:	6838      	ldr	r0, [r7, #0]
 8002e2c:	f001 ffda 	bl	8004de4 <memcpy>
	}
}
 8002e30:	bf00      	nop
 8002e32:	3708      	adds	r7, #8
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002e40:	f001 fccc 	bl	80047dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e4a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e4c:	e011      	b.n	8002e72 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d012      	beq.n	8002e7c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	3324      	adds	r3, #36	; 0x24
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 fd14 	bl	8003888 <xTaskRemoveFromEventList>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002e66:	f000 fdeb 	bl	8003a40 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002e6a:	7bfb      	ldrb	r3, [r7, #15]
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	dce9      	bgt.n	8002e4e <prvUnlockQueue+0x16>
 8002e7a:	e000      	b.n	8002e7e <prvUnlockQueue+0x46>
					break;
 8002e7c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	22ff      	movs	r2, #255	; 0xff
 8002e82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002e86:	f001 fcd9 	bl	800483c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002e8a:	f001 fca7 	bl	80047dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e94:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e96:	e011      	b.n	8002ebc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d012      	beq.n	8002ec6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3310      	adds	r3, #16
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f000 fcef 	bl	8003888 <xTaskRemoveFromEventList>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002eb0:	f000 fdc6 	bl	8003a40 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002eb4:	7bbb      	ldrb	r3, [r7, #14]
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ebc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	dce9      	bgt.n	8002e98 <prvUnlockQueue+0x60>
 8002ec4:	e000      	b.n	8002ec8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002ec6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	22ff      	movs	r2, #255	; 0xff
 8002ecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002ed0:	f001 fcb4 	bl	800483c <vPortExitCritical>
}
 8002ed4:	bf00      	nop
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002ee4:	f001 fc7a 	bl	80047dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d102      	bne.n	8002ef6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	60fb      	str	r3, [r7, #12]
 8002ef4:	e001      	b.n	8002efa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002efa:	f001 fc9f 	bl	800483c <vPortExitCritical>

	return xReturn;
 8002efe:	68fb      	ldr	r3, [r7, #12]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002f10:	f001 fc64 	bl	80047dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d102      	bne.n	8002f26 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002f20:	2301      	movs	r3, #1
 8002f22:	60fb      	str	r3, [r7, #12]
 8002f24:	e001      	b.n	8002f2a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002f26:	2300      	movs	r3, #0
 8002f28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002f2a:	f001 fc87 	bl	800483c <vPortExitCritical>

	return xReturn;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f42:	2300      	movs	r3, #0
 8002f44:	60fb      	str	r3, [r7, #12]
 8002f46:	e014      	b.n	8002f72 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002f48:	4a0e      	ldr	r2, [pc, #56]	; (8002f84 <vQueueAddToRegistry+0x4c>)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d10b      	bne.n	8002f6c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002f54:	490b      	ldr	r1, [pc, #44]	; (8002f84 <vQueueAddToRegistry+0x4c>)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002f5e:	4a09      	ldr	r2, [pc, #36]	; (8002f84 <vQueueAddToRegistry+0x4c>)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	4413      	add	r3, r2
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002f6a:	e006      	b.n	8002f7a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	3301      	adds	r3, #1
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2b07      	cmp	r3, #7
 8002f76:	d9e7      	bls.n	8002f48 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002f78:	bf00      	nop
 8002f7a:	bf00      	nop
 8002f7c:	3714      	adds	r7, #20
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bc80      	pop	{r7}
 8002f82:	4770      	bx	lr
 8002f84:	20000794 	.word	0x20000794

08002f88 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f90:	2300      	movs	r3, #0
 8002f92:	60fb      	str	r3, [r7, #12]
 8002f94:	e016      	b.n	8002fc4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8002f96:	4a10      	ldr	r2, [pc, #64]	; (8002fd8 <vQueueUnregisterQueue+0x50>)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	4413      	add	r3, r2
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d10b      	bne.n	8002fbe <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8002fa6:	4a0c      	ldr	r2, [pc, #48]	; (8002fd8 <vQueueUnregisterQueue+0x50>)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2100      	movs	r1, #0
 8002fac:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8002fb0:	4a09      	ldr	r2, [pc, #36]	; (8002fd8 <vQueueUnregisterQueue+0x50>)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	4413      	add	r3, r2
 8002fb8:	2200      	movs	r2, #0
 8002fba:	605a      	str	r2, [r3, #4]
				break;
 8002fbc:	e006      	b.n	8002fcc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2b07      	cmp	r3, #7
 8002fc8:	d9e5      	bls.n	8002f96 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8002fca:	bf00      	nop
 8002fcc:	bf00      	nop
 8002fce:	3714      	adds	r7, #20
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bc80      	pop	{r7}
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	20000794 	.word	0x20000794

08002fdc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002fec:	f001 fbf6 	bl	80047dc <vPortEnterCritical>
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ff6:	b25b      	sxtb	r3, r3
 8002ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffc:	d103      	bne.n	8003006 <vQueueWaitForMessageRestricted+0x2a>
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800300c:	b25b      	sxtb	r3, r3
 800300e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003012:	d103      	bne.n	800301c <vQueueWaitForMessageRestricted+0x40>
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800301c:	f001 fc0e 	bl	800483c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003024:	2b00      	cmp	r3, #0
 8003026:	d106      	bne.n	8003036 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	3324      	adds	r3, #36	; 0x24
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	68b9      	ldr	r1, [r7, #8]
 8003030:	4618      	mov	r0, r3
 8003032:	f000 fbfd 	bl	8003830 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003036:	6978      	ldr	r0, [r7, #20]
 8003038:	f7ff fefe 	bl	8002e38 <prvUnlockQueue>
	}
 800303c:	bf00      	nop
 800303e:	3718      	adds	r7, #24
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003044:	b580      	push	{r7, lr}
 8003046:	b08e      	sub	sp, #56	; 0x38
 8003048:	af04      	add	r7, sp, #16
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
 8003050:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003054:	2b00      	cmp	r3, #0
 8003056:	d10a      	bne.n	800306e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800305c:	f383 8811 	msr	BASEPRI, r3
 8003060:	f3bf 8f6f 	isb	sy
 8003064:	f3bf 8f4f 	dsb	sy
 8003068:	623b      	str	r3, [r7, #32]
}
 800306a:	bf00      	nop
 800306c:	e7fe      	b.n	800306c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800306e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003070:	2b00      	cmp	r3, #0
 8003072:	d10a      	bne.n	800308a <xTaskCreateStatic+0x46>
	__asm volatile
 8003074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003078:	f383 8811 	msr	BASEPRI, r3
 800307c:	f3bf 8f6f 	isb	sy
 8003080:	f3bf 8f4f 	dsb	sy
 8003084:	61fb      	str	r3, [r7, #28]
}
 8003086:	bf00      	nop
 8003088:	e7fe      	b.n	8003088 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800308a:	235c      	movs	r3, #92	; 0x5c
 800308c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	2b5c      	cmp	r3, #92	; 0x5c
 8003092:	d00a      	beq.n	80030aa <xTaskCreateStatic+0x66>
	__asm volatile
 8003094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003098:	f383 8811 	msr	BASEPRI, r3
 800309c:	f3bf 8f6f 	isb	sy
 80030a0:	f3bf 8f4f 	dsb	sy
 80030a4:	61bb      	str	r3, [r7, #24]
}
 80030a6:	bf00      	nop
 80030a8:	e7fe      	b.n	80030a8 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80030aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d01e      	beq.n	80030ee <xTaskCreateStatic+0xaa>
 80030b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d01b      	beq.n	80030ee <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80030b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030be:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80030c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c2:	2202      	movs	r2, #2
 80030c4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80030c8:	2300      	movs	r3, #0
 80030ca:	9303      	str	r3, [sp, #12]
 80030cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ce:	9302      	str	r3, [sp, #8]
 80030d0:	f107 0314 	add.w	r3, r7, #20
 80030d4:	9301      	str	r3, [sp, #4]
 80030d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d8:	9300      	str	r3, [sp, #0]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	68b9      	ldr	r1, [r7, #8]
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f000 f850 	bl	8003186 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80030e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80030e8:	f000 f8d4 	bl	8003294 <prvAddNewTaskToReadyList>
 80030ec:	e001      	b.n	80030f2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80030ee:	2300      	movs	r3, #0
 80030f0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80030f2:	697b      	ldr	r3, [r7, #20]
	}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3728      	adds	r7, #40	; 0x28
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b08c      	sub	sp, #48	; 0x30
 8003100:	af04      	add	r7, sp, #16
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	603b      	str	r3, [r7, #0]
 8003108:	4613      	mov	r3, r2
 800310a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800310c:	88fb      	ldrh	r3, [r7, #6]
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4618      	mov	r0, r3
 8003112:	f001 fc63 	bl	80049dc <pvPortMalloc>
 8003116:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00e      	beq.n	800313c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800311e:	205c      	movs	r0, #92	; 0x5c
 8003120:	f001 fc5c 	bl	80049dc <pvPortMalloc>
 8003124:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d003      	beq.n	8003134 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	631a      	str	r2, [r3, #48]	; 0x30
 8003132:	e005      	b.n	8003140 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003134:	6978      	ldr	r0, [r7, #20]
 8003136:	f001 fd15 	bl	8004b64 <vPortFree>
 800313a:	e001      	b.n	8003140 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800313c:	2300      	movs	r3, #0
 800313e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d017      	beq.n	8003176 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800314e:	88fa      	ldrh	r2, [r7, #6]
 8003150:	2300      	movs	r3, #0
 8003152:	9303      	str	r3, [sp, #12]
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	9302      	str	r3, [sp, #8]
 8003158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800315a:	9301      	str	r3, [sp, #4]
 800315c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	68b9      	ldr	r1, [r7, #8]
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f000 f80e 	bl	8003186 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800316a:	69f8      	ldr	r0, [r7, #28]
 800316c:	f000 f892 	bl	8003294 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003170:	2301      	movs	r3, #1
 8003172:	61bb      	str	r3, [r7, #24]
 8003174:	e002      	b.n	800317c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003176:	f04f 33ff 	mov.w	r3, #4294967295
 800317a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800317c:	69bb      	ldr	r3, [r7, #24]
	}
 800317e:	4618      	mov	r0, r3
 8003180:	3720      	adds	r7, #32
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b088      	sub	sp, #32
 800318a:	af00      	add	r7, sp, #0
 800318c:	60f8      	str	r0, [r7, #12]
 800318e:	60b9      	str	r1, [r7, #8]
 8003190:	607a      	str	r2, [r7, #4]
 8003192:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003196:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	461a      	mov	r2, r3
 800319e:	21a5      	movs	r1, #165	; 0xa5
 80031a0:	f001 fdf4 	bl	8004d8c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80031a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80031ae:	3b01      	subs	r3, #1
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4413      	add	r3, r2
 80031b4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	f023 0307 	bic.w	r3, r3, #7
 80031bc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	f003 0307 	and.w	r3, r3, #7
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00a      	beq.n	80031de <prvInitialiseNewTask+0x58>
	__asm volatile
 80031c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031cc:	f383 8811 	msr	BASEPRI, r3
 80031d0:	f3bf 8f6f 	isb	sy
 80031d4:	f3bf 8f4f 	dsb	sy
 80031d8:	617b      	str	r3, [r7, #20]
}
 80031da:	bf00      	nop
 80031dc:	e7fe      	b.n	80031dc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80031de:	2300      	movs	r3, #0
 80031e0:	61fb      	str	r3, [r7, #28]
 80031e2:	e012      	b.n	800320a <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80031e4:	68ba      	ldr	r2, [r7, #8]
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	4413      	add	r3, r2
 80031ea:	7819      	ldrb	r1, [r3, #0]
 80031ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	4413      	add	r3, r2
 80031f2:	3334      	adds	r3, #52	; 0x34
 80031f4:	460a      	mov	r2, r1
 80031f6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80031f8:	68ba      	ldr	r2, [r7, #8]
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	4413      	add	r3, r2
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d006      	beq.n	8003212 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	3301      	adds	r3, #1
 8003208:	61fb      	str	r3, [r7, #28]
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	2b0f      	cmp	r3, #15
 800320e:	d9e9      	bls.n	80031e4 <prvInitialiseNewTask+0x5e>
 8003210:	e000      	b.n	8003214 <prvInitialiseNewTask+0x8e>
		{
			break;
 8003212:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003216:	2200      	movs	r2, #0
 8003218:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800321c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321e:	2b37      	cmp	r3, #55	; 0x37
 8003220:	d901      	bls.n	8003226 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003222:	2337      	movs	r3, #55	; 0x37
 8003224:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003228:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800322a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800322c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800322e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003230:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003234:	2200      	movs	r2, #0
 8003236:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323a:	3304      	adds	r3, #4
 800323c:	4618      	mov	r0, r3
 800323e:	f7fe fe66 	bl	8001f0e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003244:	3318      	adds	r3, #24
 8003246:	4618      	mov	r0, r3
 8003248:	f7fe fe61 	bl	8001f0e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800324c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003250:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003254:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800325c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003260:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003264:	2200      	movs	r2, #0
 8003266:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326a:	2200      	movs	r2, #0
 800326c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	68f9      	ldr	r1, [r7, #12]
 8003274:	69b8      	ldr	r0, [r7, #24]
 8003276:	f001 f9c3 	bl	8004600 <pxPortInitialiseStack>
 800327a:	4602      	mov	r2, r0
 800327c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800327e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003282:	2b00      	cmp	r3, #0
 8003284:	d002      	beq.n	800328c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003288:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800328a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800328c:	bf00      	nop
 800328e:	3720      	adds	r7, #32
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800329c:	f001 fa9e 	bl	80047dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80032a0:	4b2d      	ldr	r3, [pc, #180]	; (8003358 <prvAddNewTaskToReadyList+0xc4>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	3301      	adds	r3, #1
 80032a6:	4a2c      	ldr	r2, [pc, #176]	; (8003358 <prvAddNewTaskToReadyList+0xc4>)
 80032a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80032aa:	4b2c      	ldr	r3, [pc, #176]	; (800335c <prvAddNewTaskToReadyList+0xc8>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d109      	bne.n	80032c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80032b2:	4a2a      	ldr	r2, [pc, #168]	; (800335c <prvAddNewTaskToReadyList+0xc8>)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80032b8:	4b27      	ldr	r3, [pc, #156]	; (8003358 <prvAddNewTaskToReadyList+0xc4>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d110      	bne.n	80032e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80032c0:	f000 fbe2 	bl	8003a88 <prvInitialiseTaskLists>
 80032c4:	e00d      	b.n	80032e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80032c6:	4b26      	ldr	r3, [pc, #152]	; (8003360 <prvAddNewTaskToReadyList+0xcc>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d109      	bne.n	80032e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80032ce:	4b23      	ldr	r3, [pc, #140]	; (800335c <prvAddNewTaskToReadyList+0xc8>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d8:	429a      	cmp	r2, r3
 80032da:	d802      	bhi.n	80032e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80032dc:	4a1f      	ldr	r2, [pc, #124]	; (800335c <prvAddNewTaskToReadyList+0xc8>)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80032e2:	4b20      	ldr	r3, [pc, #128]	; (8003364 <prvAddNewTaskToReadyList+0xd0>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	3301      	adds	r3, #1
 80032e8:	4a1e      	ldr	r2, [pc, #120]	; (8003364 <prvAddNewTaskToReadyList+0xd0>)
 80032ea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80032ec:	4b1d      	ldr	r3, [pc, #116]	; (8003364 <prvAddNewTaskToReadyList+0xd0>)
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032f8:	4b1b      	ldr	r3, [pc, #108]	; (8003368 <prvAddNewTaskToReadyList+0xd4>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d903      	bls.n	8003308 <prvAddNewTaskToReadyList+0x74>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003304:	4a18      	ldr	r2, [pc, #96]	; (8003368 <prvAddNewTaskToReadyList+0xd4>)
 8003306:	6013      	str	r3, [r2, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800330c:	4613      	mov	r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4413      	add	r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	4a15      	ldr	r2, [pc, #84]	; (800336c <prvAddNewTaskToReadyList+0xd8>)
 8003316:	441a      	add	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3304      	adds	r3, #4
 800331c:	4619      	mov	r1, r3
 800331e:	4610      	mov	r0, r2
 8003320:	f7fe fe01 	bl	8001f26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003324:	f001 fa8a 	bl	800483c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003328:	4b0d      	ldr	r3, [pc, #52]	; (8003360 <prvAddNewTaskToReadyList+0xcc>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00e      	beq.n	800334e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003330:	4b0a      	ldr	r3, [pc, #40]	; (800335c <prvAddNewTaskToReadyList+0xc8>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333a:	429a      	cmp	r2, r3
 800333c:	d207      	bcs.n	800334e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800333e:	4b0c      	ldr	r3, [pc, #48]	; (8003370 <prvAddNewTaskToReadyList+0xdc>)
 8003340:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	f3bf 8f4f 	dsb	sy
 800334a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800334e:	bf00      	nop
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	20000ca8 	.word	0x20000ca8
 800335c:	200007d4 	.word	0x200007d4
 8003360:	20000cb4 	.word	0x20000cb4
 8003364:	20000cc4 	.word	0x20000cc4
 8003368:	20000cb0 	.word	0x20000cb0
 800336c:	200007d8 	.word	0x200007d8
 8003370:	e000ed04 	.word	0xe000ed04

08003374 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b08a      	sub	sp, #40	; 0x28
 8003378:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800337a:	2300      	movs	r3, #0
 800337c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800337e:	2300      	movs	r3, #0
 8003380:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003382:	463a      	mov	r2, r7
 8003384:	1d39      	adds	r1, r7, #4
 8003386:	f107 0308 	add.w	r3, r7, #8
 800338a:	4618      	mov	r0, r3
 800338c:	f7fe fd6e 	bl	8001e6c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003390:	6839      	ldr	r1, [r7, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	9202      	str	r2, [sp, #8]
 8003398:	9301      	str	r3, [sp, #4]
 800339a:	2300      	movs	r3, #0
 800339c:	9300      	str	r3, [sp, #0]
 800339e:	2300      	movs	r3, #0
 80033a0:	460a      	mov	r2, r1
 80033a2:	4921      	ldr	r1, [pc, #132]	; (8003428 <vTaskStartScheduler+0xb4>)
 80033a4:	4821      	ldr	r0, [pc, #132]	; (800342c <vTaskStartScheduler+0xb8>)
 80033a6:	f7ff fe4d 	bl	8003044 <xTaskCreateStatic>
 80033aa:	4603      	mov	r3, r0
 80033ac:	4a20      	ldr	r2, [pc, #128]	; (8003430 <vTaskStartScheduler+0xbc>)
 80033ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80033b0:	4b1f      	ldr	r3, [pc, #124]	; (8003430 <vTaskStartScheduler+0xbc>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d002      	beq.n	80033be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80033b8:	2301      	movs	r3, #1
 80033ba:	617b      	str	r3, [r7, #20]
 80033bc:	e001      	b.n	80033c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80033be:	2300      	movs	r3, #0
 80033c0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d102      	bne.n	80033ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80033c8:	f000 fe08 	bl	8003fdc <xTimerCreateTimerTask>
 80033cc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d116      	bne.n	8003402 <vTaskStartScheduler+0x8e>
	__asm volatile
 80033d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d8:	f383 8811 	msr	BASEPRI, r3
 80033dc:	f3bf 8f6f 	isb	sy
 80033e0:	f3bf 8f4f 	dsb	sy
 80033e4:	613b      	str	r3, [r7, #16]
}
 80033e6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80033e8:	4b12      	ldr	r3, [pc, #72]	; (8003434 <vTaskStartScheduler+0xc0>)
 80033ea:	f04f 32ff 	mov.w	r2, #4294967295
 80033ee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80033f0:	4b11      	ldr	r3, [pc, #68]	; (8003438 <vTaskStartScheduler+0xc4>)
 80033f2:	2201      	movs	r2, #1
 80033f4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80033f6:	4b11      	ldr	r3, [pc, #68]	; (800343c <vTaskStartScheduler+0xc8>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80033fc:	f001 f97c 	bl	80046f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003400:	e00e      	b.n	8003420 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003408:	d10a      	bne.n	8003420 <vTaskStartScheduler+0xac>
	__asm volatile
 800340a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800340e:	f383 8811 	msr	BASEPRI, r3
 8003412:	f3bf 8f6f 	isb	sy
 8003416:	f3bf 8f4f 	dsb	sy
 800341a:	60fb      	str	r3, [r7, #12]
}
 800341c:	bf00      	nop
 800341e:	e7fe      	b.n	800341e <vTaskStartScheduler+0xaa>
}
 8003420:	bf00      	nop
 8003422:	3718      	adds	r7, #24
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	08004e64 	.word	0x08004e64
 800342c:	08003a59 	.word	0x08003a59
 8003430:	20000ccc 	.word	0x20000ccc
 8003434:	20000cc8 	.word	0x20000cc8
 8003438:	20000cb4 	.word	0x20000cb4
 800343c:	20000cac 	.word	0x20000cac

08003440 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003444:	4b04      	ldr	r3, [pc, #16]	; (8003458 <vTaskSuspendAll+0x18>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	3301      	adds	r3, #1
 800344a:	4a03      	ldr	r2, [pc, #12]	; (8003458 <vTaskSuspendAll+0x18>)
 800344c:	6013      	str	r3, [r2, #0]
}
 800344e:	bf00      	nop
 8003450:	46bd      	mov	sp, r7
 8003452:	bc80      	pop	{r7}
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	20000cd0 	.word	0x20000cd0

0800345c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003462:	2300      	movs	r3, #0
 8003464:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003466:	2300      	movs	r3, #0
 8003468:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800346a:	4b42      	ldr	r3, [pc, #264]	; (8003574 <xTaskResumeAll+0x118>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10a      	bne.n	8003488 <xTaskResumeAll+0x2c>
	__asm volatile
 8003472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003476:	f383 8811 	msr	BASEPRI, r3
 800347a:	f3bf 8f6f 	isb	sy
 800347e:	f3bf 8f4f 	dsb	sy
 8003482:	603b      	str	r3, [r7, #0]
}
 8003484:	bf00      	nop
 8003486:	e7fe      	b.n	8003486 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003488:	f001 f9a8 	bl	80047dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800348c:	4b39      	ldr	r3, [pc, #228]	; (8003574 <xTaskResumeAll+0x118>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	3b01      	subs	r3, #1
 8003492:	4a38      	ldr	r2, [pc, #224]	; (8003574 <xTaskResumeAll+0x118>)
 8003494:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003496:	4b37      	ldr	r3, [pc, #220]	; (8003574 <xTaskResumeAll+0x118>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d162      	bne.n	8003564 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800349e:	4b36      	ldr	r3, [pc, #216]	; (8003578 <xTaskResumeAll+0x11c>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d05e      	beq.n	8003564 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034a6:	e02f      	b.n	8003508 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80034a8:	4b34      	ldr	r3, [pc, #208]	; (800357c <xTaskResumeAll+0x120>)
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	3318      	adds	r3, #24
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7fe fd91 	bl	8001fdc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	3304      	adds	r3, #4
 80034be:	4618      	mov	r0, r3
 80034c0:	f7fe fd8c 	bl	8001fdc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c8:	4b2d      	ldr	r3, [pc, #180]	; (8003580 <xTaskResumeAll+0x124>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d903      	bls.n	80034d8 <xTaskResumeAll+0x7c>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d4:	4a2a      	ldr	r2, [pc, #168]	; (8003580 <xTaskResumeAll+0x124>)
 80034d6:	6013      	str	r3, [r2, #0]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034dc:	4613      	mov	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	4413      	add	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4a27      	ldr	r2, [pc, #156]	; (8003584 <xTaskResumeAll+0x128>)
 80034e6:	441a      	add	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	3304      	adds	r3, #4
 80034ec:	4619      	mov	r1, r3
 80034ee:	4610      	mov	r0, r2
 80034f0:	f7fe fd19 	bl	8001f26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034f8:	4b23      	ldr	r3, [pc, #140]	; (8003588 <xTaskResumeAll+0x12c>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fe:	429a      	cmp	r2, r3
 8003500:	d302      	bcc.n	8003508 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003502:	4b22      	ldr	r3, [pc, #136]	; (800358c <xTaskResumeAll+0x130>)
 8003504:	2201      	movs	r2, #1
 8003506:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003508:	4b1c      	ldr	r3, [pc, #112]	; (800357c <xTaskResumeAll+0x120>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1cb      	bne.n	80034a8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003516:	f000 fb55 	bl	8003bc4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800351a:	4b1d      	ldr	r3, [pc, #116]	; (8003590 <xTaskResumeAll+0x134>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d010      	beq.n	8003548 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003526:	f000 f845 	bl	80035b4 <xTaskIncrementTick>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d002      	beq.n	8003536 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003530:	4b16      	ldr	r3, [pc, #88]	; (800358c <xTaskResumeAll+0x130>)
 8003532:	2201      	movs	r2, #1
 8003534:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	3b01      	subs	r3, #1
 800353a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1f1      	bne.n	8003526 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003542:	4b13      	ldr	r3, [pc, #76]	; (8003590 <xTaskResumeAll+0x134>)
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003548:	4b10      	ldr	r3, [pc, #64]	; (800358c <xTaskResumeAll+0x130>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d009      	beq.n	8003564 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003550:	2301      	movs	r3, #1
 8003552:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003554:	4b0f      	ldr	r3, [pc, #60]	; (8003594 <xTaskResumeAll+0x138>)
 8003556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800355a:	601a      	str	r2, [r3, #0]
 800355c:	f3bf 8f4f 	dsb	sy
 8003560:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003564:	f001 f96a 	bl	800483c <vPortExitCritical>

	return xAlreadyYielded;
 8003568:	68bb      	ldr	r3, [r7, #8]
}
 800356a:	4618      	mov	r0, r3
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	20000cd0 	.word	0x20000cd0
 8003578:	20000ca8 	.word	0x20000ca8
 800357c:	20000c68 	.word	0x20000c68
 8003580:	20000cb0 	.word	0x20000cb0
 8003584:	200007d8 	.word	0x200007d8
 8003588:	200007d4 	.word	0x200007d4
 800358c:	20000cbc 	.word	0x20000cbc
 8003590:	20000cb8 	.word	0x20000cb8
 8003594:	e000ed04 	.word	0xe000ed04

08003598 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800359e:	4b04      	ldr	r3, [pc, #16]	; (80035b0 <xTaskGetTickCount+0x18>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80035a4:	687b      	ldr	r3, [r7, #4]
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bc80      	pop	{r7}
 80035ae:	4770      	bx	lr
 80035b0:	20000cac 	.word	0x20000cac

080035b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80035ba:	2300      	movs	r3, #0
 80035bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035be:	4b51      	ldr	r3, [pc, #324]	; (8003704 <xTaskIncrementTick+0x150>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f040 808e 	bne.w	80036e4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80035c8:	4b4f      	ldr	r3, [pc, #316]	; (8003708 <xTaskIncrementTick+0x154>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	3301      	adds	r3, #1
 80035ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80035d0:	4a4d      	ldr	r2, [pc, #308]	; (8003708 <xTaskIncrementTick+0x154>)
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d120      	bne.n	800361e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80035dc:	4b4b      	ldr	r3, [pc, #300]	; (800370c <xTaskIncrementTick+0x158>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00a      	beq.n	80035fc <xTaskIncrementTick+0x48>
	__asm volatile
 80035e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ea:	f383 8811 	msr	BASEPRI, r3
 80035ee:	f3bf 8f6f 	isb	sy
 80035f2:	f3bf 8f4f 	dsb	sy
 80035f6:	603b      	str	r3, [r7, #0]
}
 80035f8:	bf00      	nop
 80035fa:	e7fe      	b.n	80035fa <xTaskIncrementTick+0x46>
 80035fc:	4b43      	ldr	r3, [pc, #268]	; (800370c <xTaskIncrementTick+0x158>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	60fb      	str	r3, [r7, #12]
 8003602:	4b43      	ldr	r3, [pc, #268]	; (8003710 <xTaskIncrementTick+0x15c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a41      	ldr	r2, [pc, #260]	; (800370c <xTaskIncrementTick+0x158>)
 8003608:	6013      	str	r3, [r2, #0]
 800360a:	4a41      	ldr	r2, [pc, #260]	; (8003710 <xTaskIncrementTick+0x15c>)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6013      	str	r3, [r2, #0]
 8003610:	4b40      	ldr	r3, [pc, #256]	; (8003714 <xTaskIncrementTick+0x160>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	3301      	adds	r3, #1
 8003616:	4a3f      	ldr	r2, [pc, #252]	; (8003714 <xTaskIncrementTick+0x160>)
 8003618:	6013      	str	r3, [r2, #0]
 800361a:	f000 fad3 	bl	8003bc4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800361e:	4b3e      	ldr	r3, [pc, #248]	; (8003718 <xTaskIncrementTick+0x164>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	429a      	cmp	r2, r3
 8003626:	d34e      	bcc.n	80036c6 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003628:	4b38      	ldr	r3, [pc, #224]	; (800370c <xTaskIncrementTick+0x158>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <xTaskIncrementTick+0x82>
 8003632:	2301      	movs	r3, #1
 8003634:	e000      	b.n	8003638 <xTaskIncrementTick+0x84>
 8003636:	2300      	movs	r3, #0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d004      	beq.n	8003646 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800363c:	4b36      	ldr	r3, [pc, #216]	; (8003718 <xTaskIncrementTick+0x164>)
 800363e:	f04f 32ff 	mov.w	r2, #4294967295
 8003642:	601a      	str	r2, [r3, #0]
					break;
 8003644:	e03f      	b.n	80036c6 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003646:	4b31      	ldr	r3, [pc, #196]	; (800370c <xTaskIncrementTick+0x158>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	429a      	cmp	r2, r3
 800365c:	d203      	bcs.n	8003666 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800365e:	4a2e      	ldr	r2, [pc, #184]	; (8003718 <xTaskIncrementTick+0x164>)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6013      	str	r3, [r2, #0]
						break;
 8003664:	e02f      	b.n	80036c6 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	3304      	adds	r3, #4
 800366a:	4618      	mov	r0, r3
 800366c:	f7fe fcb6 	bl	8001fdc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003674:	2b00      	cmp	r3, #0
 8003676:	d004      	beq.n	8003682 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	3318      	adds	r3, #24
 800367c:	4618      	mov	r0, r3
 800367e:	f7fe fcad 	bl	8001fdc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003686:	4b25      	ldr	r3, [pc, #148]	; (800371c <xTaskIncrementTick+0x168>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	429a      	cmp	r2, r3
 800368c:	d903      	bls.n	8003696 <xTaskIncrementTick+0xe2>
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003692:	4a22      	ldr	r2, [pc, #136]	; (800371c <xTaskIncrementTick+0x168>)
 8003694:	6013      	str	r3, [r2, #0]
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800369a:	4613      	mov	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	4413      	add	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4a1f      	ldr	r2, [pc, #124]	; (8003720 <xTaskIncrementTick+0x16c>)
 80036a4:	441a      	add	r2, r3
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	3304      	adds	r3, #4
 80036aa:	4619      	mov	r1, r3
 80036ac:	4610      	mov	r0, r2
 80036ae:	f7fe fc3a 	bl	8001f26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b6:	4b1b      	ldr	r3, [pc, #108]	; (8003724 <xTaskIncrementTick+0x170>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036bc:	429a      	cmp	r2, r3
 80036be:	d3b3      	bcc.n	8003628 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80036c0:	2301      	movs	r3, #1
 80036c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036c4:	e7b0      	b.n	8003628 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80036c6:	4b17      	ldr	r3, [pc, #92]	; (8003724 <xTaskIncrementTick+0x170>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036cc:	4914      	ldr	r1, [pc, #80]	; (8003720 <xTaskIncrementTick+0x16c>)
 80036ce:	4613      	mov	r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	4413      	add	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	440b      	add	r3, r1
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d907      	bls.n	80036ee <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80036de:	2301      	movs	r3, #1
 80036e0:	617b      	str	r3, [r7, #20]
 80036e2:	e004      	b.n	80036ee <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80036e4:	4b10      	ldr	r3, [pc, #64]	; (8003728 <xTaskIncrementTick+0x174>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	3301      	adds	r3, #1
 80036ea:	4a0f      	ldr	r2, [pc, #60]	; (8003728 <xTaskIncrementTick+0x174>)
 80036ec:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80036ee:	4b0f      	ldr	r3, [pc, #60]	; (800372c <xTaskIncrementTick+0x178>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80036f6:	2301      	movs	r3, #1
 80036f8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80036fa:	697b      	ldr	r3, [r7, #20]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3718      	adds	r7, #24
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	20000cd0 	.word	0x20000cd0
 8003708:	20000cac 	.word	0x20000cac
 800370c:	20000c60 	.word	0x20000c60
 8003710:	20000c64 	.word	0x20000c64
 8003714:	20000cc0 	.word	0x20000cc0
 8003718:	20000cc8 	.word	0x20000cc8
 800371c:	20000cb0 	.word	0x20000cb0
 8003720:	200007d8 	.word	0x200007d8
 8003724:	200007d4 	.word	0x200007d4
 8003728:	20000cb8 	.word	0x20000cb8
 800372c:	20000cbc 	.word	0x20000cbc

08003730 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003736:	4b27      	ldr	r3, [pc, #156]	; (80037d4 <vTaskSwitchContext+0xa4>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800373e:	4b26      	ldr	r3, [pc, #152]	; (80037d8 <vTaskSwitchContext+0xa8>)
 8003740:	2201      	movs	r2, #1
 8003742:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003744:	e041      	b.n	80037ca <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003746:	4b24      	ldr	r3, [pc, #144]	; (80037d8 <vTaskSwitchContext+0xa8>)
 8003748:	2200      	movs	r2, #0
 800374a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800374c:	4b23      	ldr	r3, [pc, #140]	; (80037dc <vTaskSwitchContext+0xac>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	60fb      	str	r3, [r7, #12]
 8003752:	e010      	b.n	8003776 <vTaskSwitchContext+0x46>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10a      	bne.n	8003770 <vTaskSwitchContext+0x40>
	__asm volatile
 800375a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800375e:	f383 8811 	msr	BASEPRI, r3
 8003762:	f3bf 8f6f 	isb	sy
 8003766:	f3bf 8f4f 	dsb	sy
 800376a:	607b      	str	r3, [r7, #4]
}
 800376c:	bf00      	nop
 800376e:	e7fe      	b.n	800376e <vTaskSwitchContext+0x3e>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	3b01      	subs	r3, #1
 8003774:	60fb      	str	r3, [r7, #12]
 8003776:	491a      	ldr	r1, [pc, #104]	; (80037e0 <vTaskSwitchContext+0xb0>)
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	4613      	mov	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4413      	add	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	440b      	add	r3, r1
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d0e4      	beq.n	8003754 <vTaskSwitchContext+0x24>
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	4613      	mov	r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	4413      	add	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	4a12      	ldr	r2, [pc, #72]	; (80037e0 <vTaskSwitchContext+0xb0>)
 8003796:	4413      	add	r3, r2
 8003798:	60bb      	str	r3, [r7, #8]
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	605a      	str	r2, [r3, #4]
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	3308      	adds	r3, #8
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d104      	bne.n	80037ba <vTaskSwitchContext+0x8a>
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	605a      	str	r2, [r3, #4]
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	4a08      	ldr	r2, [pc, #32]	; (80037e4 <vTaskSwitchContext+0xb4>)
 80037c2:	6013      	str	r3, [r2, #0]
 80037c4:	4a05      	ldr	r2, [pc, #20]	; (80037dc <vTaskSwitchContext+0xac>)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6013      	str	r3, [r2, #0]
}
 80037ca:	bf00      	nop
 80037cc:	3714      	adds	r7, #20
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bc80      	pop	{r7}
 80037d2:	4770      	bx	lr
 80037d4:	20000cd0 	.word	0x20000cd0
 80037d8:	20000cbc 	.word	0x20000cbc
 80037dc:	20000cb0 	.word	0x20000cb0
 80037e0:	200007d8 	.word	0x200007d8
 80037e4:	200007d4 	.word	0x200007d4

080037e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10a      	bne.n	800380e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80037f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037fc:	f383 8811 	msr	BASEPRI, r3
 8003800:	f3bf 8f6f 	isb	sy
 8003804:	f3bf 8f4f 	dsb	sy
 8003808:	60fb      	str	r3, [r7, #12]
}
 800380a:	bf00      	nop
 800380c:	e7fe      	b.n	800380c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800380e:	4b07      	ldr	r3, [pc, #28]	; (800382c <vTaskPlaceOnEventList+0x44>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	3318      	adds	r3, #24
 8003814:	4619      	mov	r1, r3
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7fe fba8 	bl	8001f6c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800381c:	2101      	movs	r1, #1
 800381e:	6838      	ldr	r0, [r7, #0]
 8003820:	f000 fb88 	bl	8003f34 <prvAddCurrentTaskToDelayedList>
}
 8003824:	bf00      	nop
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	200007d4 	.word	0x200007d4

08003830 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10a      	bne.n	8003858 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003846:	f383 8811 	msr	BASEPRI, r3
 800384a:	f3bf 8f6f 	isb	sy
 800384e:	f3bf 8f4f 	dsb	sy
 8003852:	617b      	str	r3, [r7, #20]
}
 8003854:	bf00      	nop
 8003856:	e7fe      	b.n	8003856 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003858:	4b0a      	ldr	r3, [pc, #40]	; (8003884 <vTaskPlaceOnEventListRestricted+0x54>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	3318      	adds	r3, #24
 800385e:	4619      	mov	r1, r3
 8003860:	68f8      	ldr	r0, [r7, #12]
 8003862:	f7fe fb60 	bl	8001f26 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d002      	beq.n	8003872 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800386c:	f04f 33ff 	mov.w	r3, #4294967295
 8003870:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003872:	6879      	ldr	r1, [r7, #4]
 8003874:	68b8      	ldr	r0, [r7, #8]
 8003876:	f000 fb5d 	bl	8003f34 <prvAddCurrentTaskToDelayedList>
	}
 800387a:	bf00      	nop
 800387c:	3718      	adds	r7, #24
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	200007d4 	.word	0x200007d4

08003888 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10a      	bne.n	80038b4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800389e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a2:	f383 8811 	msr	BASEPRI, r3
 80038a6:	f3bf 8f6f 	isb	sy
 80038aa:	f3bf 8f4f 	dsb	sy
 80038ae:	60fb      	str	r3, [r7, #12]
}
 80038b0:	bf00      	nop
 80038b2:	e7fe      	b.n	80038b2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	3318      	adds	r3, #24
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7fe fb8f 	bl	8001fdc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038be:	4b1e      	ldr	r3, [pc, #120]	; (8003938 <xTaskRemoveFromEventList+0xb0>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d11d      	bne.n	8003902 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	3304      	adds	r3, #4
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7fe fb86 	bl	8001fdc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d4:	4b19      	ldr	r3, [pc, #100]	; (800393c <xTaskRemoveFromEventList+0xb4>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d903      	bls.n	80038e4 <xTaskRemoveFromEventList+0x5c>
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e0:	4a16      	ldr	r2, [pc, #88]	; (800393c <xTaskRemoveFromEventList+0xb4>)
 80038e2:	6013      	str	r3, [r2, #0]
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e8:	4613      	mov	r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	4413      	add	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4a13      	ldr	r2, [pc, #76]	; (8003940 <xTaskRemoveFromEventList+0xb8>)
 80038f2:	441a      	add	r2, r3
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	3304      	adds	r3, #4
 80038f8:	4619      	mov	r1, r3
 80038fa:	4610      	mov	r0, r2
 80038fc:	f7fe fb13 	bl	8001f26 <vListInsertEnd>
 8003900:	e005      	b.n	800390e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	3318      	adds	r3, #24
 8003906:	4619      	mov	r1, r3
 8003908:	480e      	ldr	r0, [pc, #56]	; (8003944 <xTaskRemoveFromEventList+0xbc>)
 800390a:	f7fe fb0c 	bl	8001f26 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003912:	4b0d      	ldr	r3, [pc, #52]	; (8003948 <xTaskRemoveFromEventList+0xc0>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003918:	429a      	cmp	r2, r3
 800391a:	d905      	bls.n	8003928 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800391c:	2301      	movs	r3, #1
 800391e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003920:	4b0a      	ldr	r3, [pc, #40]	; (800394c <xTaskRemoveFromEventList+0xc4>)
 8003922:	2201      	movs	r2, #1
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	e001      	b.n	800392c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003928:	2300      	movs	r3, #0
 800392a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800392c:	697b      	ldr	r3, [r7, #20]
}
 800392e:	4618      	mov	r0, r3
 8003930:	3718      	adds	r7, #24
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	20000cd0 	.word	0x20000cd0
 800393c:	20000cb0 	.word	0x20000cb0
 8003940:	200007d8 	.word	0x200007d8
 8003944:	20000c68 	.word	0x20000c68
 8003948:	200007d4 	.word	0x200007d4
 800394c:	20000cbc 	.word	0x20000cbc

08003950 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003958:	4b06      	ldr	r3, [pc, #24]	; (8003974 <vTaskInternalSetTimeOutState+0x24>)
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003960:	4b05      	ldr	r3, [pc, #20]	; (8003978 <vTaskInternalSetTimeOutState+0x28>)
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	605a      	str	r2, [r3, #4]
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	bc80      	pop	{r7}
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	20000cc0 	.word	0x20000cc0
 8003978:	20000cac 	.word	0x20000cac

0800397c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b088      	sub	sp, #32
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d10a      	bne.n	80039a2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800398c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003990:	f383 8811 	msr	BASEPRI, r3
 8003994:	f3bf 8f6f 	isb	sy
 8003998:	f3bf 8f4f 	dsb	sy
 800399c:	613b      	str	r3, [r7, #16]
}
 800399e:	bf00      	nop
 80039a0:	e7fe      	b.n	80039a0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10a      	bne.n	80039be <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80039a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ac:	f383 8811 	msr	BASEPRI, r3
 80039b0:	f3bf 8f6f 	isb	sy
 80039b4:	f3bf 8f4f 	dsb	sy
 80039b8:	60fb      	str	r3, [r7, #12]
}
 80039ba:	bf00      	nop
 80039bc:	e7fe      	b.n	80039bc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80039be:	f000 ff0d 	bl	80047dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80039c2:	4b1d      	ldr	r3, [pc, #116]	; (8003a38 <xTaskCheckForTimeOut+0xbc>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039da:	d102      	bne.n	80039e2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80039dc:	2300      	movs	r3, #0
 80039de:	61fb      	str	r3, [r7, #28]
 80039e0:	e023      	b.n	8003a2a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	4b15      	ldr	r3, [pc, #84]	; (8003a3c <xTaskCheckForTimeOut+0xc0>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d007      	beq.n	80039fe <xTaskCheckForTimeOut+0x82>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d302      	bcc.n	80039fe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80039f8:	2301      	movs	r3, #1
 80039fa:	61fb      	str	r3, [r7, #28]
 80039fc:	e015      	b.n	8003a2a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d20b      	bcs.n	8003a20 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	1ad2      	subs	r2, r2, r3
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f7ff ff9b 	bl	8003950 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	61fb      	str	r3, [r7, #28]
 8003a1e:	e004      	b.n	8003a2a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	2200      	movs	r2, #0
 8003a24:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003a26:	2301      	movs	r3, #1
 8003a28:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003a2a:	f000 ff07 	bl	800483c <vPortExitCritical>

	return xReturn;
 8003a2e:	69fb      	ldr	r3, [r7, #28]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3720      	adds	r7, #32
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	20000cac 	.word	0x20000cac
 8003a3c:	20000cc0 	.word	0x20000cc0

08003a40 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003a40:	b480      	push	{r7}
 8003a42:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003a44:	4b03      	ldr	r3, [pc, #12]	; (8003a54 <vTaskMissedYield+0x14>)
 8003a46:	2201      	movs	r2, #1
 8003a48:	601a      	str	r2, [r3, #0]
}
 8003a4a:	bf00      	nop
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bc80      	pop	{r7}
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	20000cbc 	.word	0x20000cbc

08003a58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003a60:	f000 f852 	bl	8003b08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003a64:	4b06      	ldr	r3, [pc, #24]	; (8003a80 <prvIdleTask+0x28>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d9f9      	bls.n	8003a60 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003a6c:	4b05      	ldr	r3, [pc, #20]	; (8003a84 <prvIdleTask+0x2c>)
 8003a6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a72:	601a      	str	r2, [r3, #0]
 8003a74:	f3bf 8f4f 	dsb	sy
 8003a78:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003a7c:	e7f0      	b.n	8003a60 <prvIdleTask+0x8>
 8003a7e:	bf00      	nop
 8003a80:	200007d8 	.word	0x200007d8
 8003a84:	e000ed04 	.word	0xe000ed04

08003a88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a8e:	2300      	movs	r3, #0
 8003a90:	607b      	str	r3, [r7, #4]
 8003a92:	e00c      	b.n	8003aae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	4613      	mov	r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	4413      	add	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4a12      	ldr	r2, [pc, #72]	; (8003ae8 <prvInitialiseTaskLists+0x60>)
 8003aa0:	4413      	add	r3, r2
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7fe fa14 	bl	8001ed0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	607b      	str	r3, [r7, #4]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2b37      	cmp	r3, #55	; 0x37
 8003ab2:	d9ef      	bls.n	8003a94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003ab4:	480d      	ldr	r0, [pc, #52]	; (8003aec <prvInitialiseTaskLists+0x64>)
 8003ab6:	f7fe fa0b 	bl	8001ed0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003aba:	480d      	ldr	r0, [pc, #52]	; (8003af0 <prvInitialiseTaskLists+0x68>)
 8003abc:	f7fe fa08 	bl	8001ed0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003ac0:	480c      	ldr	r0, [pc, #48]	; (8003af4 <prvInitialiseTaskLists+0x6c>)
 8003ac2:	f7fe fa05 	bl	8001ed0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003ac6:	480c      	ldr	r0, [pc, #48]	; (8003af8 <prvInitialiseTaskLists+0x70>)
 8003ac8:	f7fe fa02 	bl	8001ed0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003acc:	480b      	ldr	r0, [pc, #44]	; (8003afc <prvInitialiseTaskLists+0x74>)
 8003ace:	f7fe f9ff 	bl	8001ed0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003ad2:	4b0b      	ldr	r3, [pc, #44]	; (8003b00 <prvInitialiseTaskLists+0x78>)
 8003ad4:	4a05      	ldr	r2, [pc, #20]	; (8003aec <prvInitialiseTaskLists+0x64>)
 8003ad6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003ad8:	4b0a      	ldr	r3, [pc, #40]	; (8003b04 <prvInitialiseTaskLists+0x7c>)
 8003ada:	4a05      	ldr	r2, [pc, #20]	; (8003af0 <prvInitialiseTaskLists+0x68>)
 8003adc:	601a      	str	r2, [r3, #0]
}
 8003ade:	bf00      	nop
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	200007d8 	.word	0x200007d8
 8003aec:	20000c38 	.word	0x20000c38
 8003af0:	20000c4c 	.word	0x20000c4c
 8003af4:	20000c68 	.word	0x20000c68
 8003af8:	20000c7c 	.word	0x20000c7c
 8003afc:	20000c94 	.word	0x20000c94
 8003b00:	20000c60 	.word	0x20000c60
 8003b04:	20000c64 	.word	0x20000c64

08003b08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b0e:	e019      	b.n	8003b44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003b10:	f000 fe64 	bl	80047dc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003b14:	4b10      	ldr	r3, [pc, #64]	; (8003b58 <prvCheckTasksWaitingTermination+0x50>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	3304      	adds	r3, #4
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7fe fa5b 	bl	8001fdc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003b26:	4b0d      	ldr	r3, [pc, #52]	; (8003b5c <prvCheckTasksWaitingTermination+0x54>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	4a0b      	ldr	r2, [pc, #44]	; (8003b5c <prvCheckTasksWaitingTermination+0x54>)
 8003b2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003b30:	4b0b      	ldr	r3, [pc, #44]	; (8003b60 <prvCheckTasksWaitingTermination+0x58>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	3b01      	subs	r3, #1
 8003b36:	4a0a      	ldr	r2, [pc, #40]	; (8003b60 <prvCheckTasksWaitingTermination+0x58>)
 8003b38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003b3a:	f000 fe7f 	bl	800483c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f810 	bl	8003b64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b44:	4b06      	ldr	r3, [pc, #24]	; (8003b60 <prvCheckTasksWaitingTermination+0x58>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1e1      	bne.n	8003b10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003b4c:	bf00      	nop
 8003b4e:	bf00      	nop
 8003b50:	3708      	adds	r7, #8
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	20000c7c 	.word	0x20000c7c
 8003b5c:	20000ca8 	.word	0x20000ca8
 8003b60:	20000c90 	.word	0x20000c90

08003b64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d108      	bne.n	8003b88 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 fff2 	bl	8004b64 <vPortFree>
				vPortFree( pxTCB );
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 ffef 	bl	8004b64 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003b86:	e018      	b.n	8003bba <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d103      	bne.n	8003b9a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 ffe6 	bl	8004b64 <vPortFree>
	}
 8003b98:	e00f      	b.n	8003bba <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d00a      	beq.n	8003bba <prvDeleteTCB+0x56>
	__asm volatile
 8003ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba8:	f383 8811 	msr	BASEPRI, r3
 8003bac:	f3bf 8f6f 	isb	sy
 8003bb0:	f3bf 8f4f 	dsb	sy
 8003bb4:	60fb      	str	r3, [r7, #12]
}
 8003bb6:	bf00      	nop
 8003bb8:	e7fe      	b.n	8003bb8 <prvDeleteTCB+0x54>
	}
 8003bba:	bf00      	nop
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
	...

08003bc4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bca:	4b0e      	ldr	r3, [pc, #56]	; (8003c04 <prvResetNextTaskUnblockTime+0x40>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d101      	bne.n	8003bd8 <prvResetNextTaskUnblockTime+0x14>
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e000      	b.n	8003bda <prvResetNextTaskUnblockTime+0x16>
 8003bd8:	2300      	movs	r3, #0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d004      	beq.n	8003be8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003bde:	4b0a      	ldr	r3, [pc, #40]	; (8003c08 <prvResetNextTaskUnblockTime+0x44>)
 8003be0:	f04f 32ff 	mov.w	r2, #4294967295
 8003be4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003be6:	e008      	b.n	8003bfa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003be8:	4b06      	ldr	r3, [pc, #24]	; (8003c04 <prvResetNextTaskUnblockTime+0x40>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	4a04      	ldr	r2, [pc, #16]	; (8003c08 <prvResetNextTaskUnblockTime+0x44>)
 8003bf8:	6013      	str	r3, [r2, #0]
}
 8003bfa:	bf00      	nop
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bc80      	pop	{r7}
 8003c02:	4770      	bx	lr
 8003c04:	20000c60 	.word	0x20000c60
 8003c08:	20000cc8 	.word	0x20000cc8

08003c0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003c12:	4b0b      	ldr	r3, [pc, #44]	; (8003c40 <xTaskGetSchedulerState+0x34>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d102      	bne.n	8003c20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	607b      	str	r3, [r7, #4]
 8003c1e:	e008      	b.n	8003c32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c20:	4b08      	ldr	r3, [pc, #32]	; (8003c44 <xTaskGetSchedulerState+0x38>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d102      	bne.n	8003c2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003c28:	2302      	movs	r3, #2
 8003c2a:	607b      	str	r3, [r7, #4]
 8003c2c:	e001      	b.n	8003c32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003c32:	687b      	ldr	r3, [r7, #4]
	}
 8003c34:	4618      	mov	r0, r3
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bc80      	pop	{r7}
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	20000cb4 	.word	0x20000cb4
 8003c44:	20000cd0 	.word	0x20000cd0

08003c48 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003c54:	2300      	movs	r3, #0
 8003c56:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d056      	beq.n	8003d0c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c62:	4b2d      	ldr	r3, [pc, #180]	; (8003d18 <xTaskPriorityInherit+0xd0>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d246      	bcs.n	8003cfa <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	db06      	blt.n	8003c82 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c74:	4b28      	ldr	r3, [pc, #160]	; (8003d18 <xTaskPriorityInherit+0xd0>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	6959      	ldr	r1, [r3, #20]
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	4413      	add	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	4a22      	ldr	r2, [pc, #136]	; (8003d1c <xTaskPriorityInherit+0xd4>)
 8003c94:	4413      	add	r3, r2
 8003c96:	4299      	cmp	r1, r3
 8003c98:	d101      	bne.n	8003c9e <xTaskPriorityInherit+0x56>
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e000      	b.n	8003ca0 <xTaskPriorityInherit+0x58>
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d022      	beq.n	8003cea <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	3304      	adds	r3, #4
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7fe f997 	bl	8001fdc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003cae:	4b1a      	ldr	r3, [pc, #104]	; (8003d18 <xTaskPriorityInherit+0xd0>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cbc:	4b18      	ldr	r3, [pc, #96]	; (8003d20 <xTaskPriorityInherit+0xd8>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d903      	bls.n	8003ccc <xTaskPriorityInherit+0x84>
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc8:	4a15      	ldr	r2, [pc, #84]	; (8003d20 <xTaskPriorityInherit+0xd8>)
 8003cca:	6013      	str	r3, [r2, #0]
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	4413      	add	r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	4a10      	ldr	r2, [pc, #64]	; (8003d1c <xTaskPriorityInherit+0xd4>)
 8003cda:	441a      	add	r2, r3
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	3304      	adds	r3, #4
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	4610      	mov	r0, r2
 8003ce4:	f7fe f91f 	bl	8001f26 <vListInsertEnd>
 8003ce8:	e004      	b.n	8003cf4 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003cea:	4b0b      	ldr	r3, [pc, #44]	; (8003d18 <xTaskPriorityInherit+0xd0>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	60fb      	str	r3, [r7, #12]
 8003cf8:	e008      	b.n	8003d0c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003cfe:	4b06      	ldr	r3, [pc, #24]	; (8003d18 <xTaskPriorityInherit+0xd0>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d201      	bcs.n	8003d0c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
	}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	200007d4 	.word	0x200007d4
 8003d1c:	200007d8 	.word	0x200007d8
 8003d20:	20000cb0 	.word	0x20000cb0

08003d24 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003d30:	2300      	movs	r3, #0
 8003d32:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d056      	beq.n	8003de8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003d3a:	4b2e      	ldr	r3, [pc, #184]	; (8003df4 <xTaskPriorityDisinherit+0xd0>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d00a      	beq.n	8003d5a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d48:	f383 8811 	msr	BASEPRI, r3
 8003d4c:	f3bf 8f6f 	isb	sy
 8003d50:	f3bf 8f4f 	dsb	sy
 8003d54:	60fb      	str	r3, [r7, #12]
}
 8003d56:	bf00      	nop
 8003d58:	e7fe      	b.n	8003d58 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10a      	bne.n	8003d78 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d66:	f383 8811 	msr	BASEPRI, r3
 8003d6a:	f3bf 8f6f 	isb	sy
 8003d6e:	f3bf 8f4f 	dsb	sy
 8003d72:	60bb      	str	r3, [r7, #8]
}
 8003d74:	bf00      	nop
 8003d76:	e7fe      	b.n	8003d76 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d7c:	1e5a      	subs	r2, r3, #1
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d02c      	beq.n	8003de8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d128      	bne.n	8003de8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	3304      	adds	r3, #4
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7fe f91e 	bl	8001fdc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db8:	4b0f      	ldr	r3, [pc, #60]	; (8003df8 <xTaskPriorityDisinherit+0xd4>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d903      	bls.n	8003dc8 <xTaskPriorityDisinherit+0xa4>
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc4:	4a0c      	ldr	r2, [pc, #48]	; (8003df8 <xTaskPriorityDisinherit+0xd4>)
 8003dc6:	6013      	str	r3, [r2, #0]
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dcc:	4613      	mov	r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	4413      	add	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	4a09      	ldr	r2, [pc, #36]	; (8003dfc <xTaskPriorityDisinherit+0xd8>)
 8003dd6:	441a      	add	r2, r3
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	3304      	adds	r3, #4
 8003ddc:	4619      	mov	r1, r3
 8003dde:	4610      	mov	r0, r2
 8003de0:	f7fe f8a1 	bl	8001f26 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003de4:	2301      	movs	r3, #1
 8003de6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003de8:	697b      	ldr	r3, [r7, #20]
	}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3718      	adds	r7, #24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	200007d4 	.word	0x200007d4
 8003df8:	20000cb0 	.word	0x20000cb0
 8003dfc:	200007d8 	.word	0x200007d8

08003e00 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b088      	sub	sp, #32
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d06f      	beq.n	8003ef8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10a      	bne.n	8003e36 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8003e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e24:	f383 8811 	msr	BASEPRI, r3
 8003e28:	f3bf 8f6f 	isb	sy
 8003e2c:	f3bf 8f4f 	dsb	sy
 8003e30:	60fb      	str	r3, [r7, #12]
}
 8003e32:	bf00      	nop
 8003e34:	e7fe      	b.n	8003e34 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e3a:	683a      	ldr	r2, [r7, #0]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d902      	bls.n	8003e46 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	61fb      	str	r3, [r7, #28]
 8003e44:	e002      	b.n	8003e4c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e4a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e50:	69fa      	ldr	r2, [r7, #28]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d050      	beq.n	8003ef8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d14b      	bne.n	8003ef8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8003e60:	4b27      	ldr	r3, [pc, #156]	; (8003f00 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d10a      	bne.n	8003e80 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8003e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6e:	f383 8811 	msr	BASEPRI, r3
 8003e72:	f3bf 8f6f 	isb	sy
 8003e76:	f3bf 8f4f 	dsb	sy
 8003e7a:	60bb      	str	r3, [r7, #8]
}
 8003e7c:	bf00      	nop
 8003e7e:	e7fe      	b.n	8003e7e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e84:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	69fa      	ldr	r2, [r7, #28]
 8003e8a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	db04      	blt.n	8003e9e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	6959      	ldr	r1, [r3, #20]
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	4413      	add	r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	4a15      	ldr	r2, [pc, #84]	; (8003f04 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8003eae:	4413      	add	r3, r2
 8003eb0:	4299      	cmp	r1, r3
 8003eb2:	d101      	bne.n	8003eb8 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e000      	b.n	8003eba <vTaskPriorityDisinheritAfterTimeout+0xba>
 8003eb8:	2300      	movs	r3, #0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d01c      	beq.n	8003ef8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	3304      	adds	r3, #4
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7fe f88a 	bl	8001fdc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ecc:	4b0e      	ldr	r3, [pc, #56]	; (8003f08 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d903      	bls.n	8003edc <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed8:	4a0b      	ldr	r2, [pc, #44]	; (8003f08 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8003eda:	6013      	str	r3, [r2, #0]
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4413      	add	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	4a06      	ldr	r2, [pc, #24]	; (8003f04 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8003eea:	441a      	add	r2, r3
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	3304      	adds	r3, #4
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	4610      	mov	r0, r2
 8003ef4:	f7fe f817 	bl	8001f26 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ef8:	bf00      	nop
 8003efa:	3720      	adds	r7, #32
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	200007d4 	.word	0x200007d4
 8003f04:	200007d8 	.word	0x200007d8
 8003f08:	20000cb0 	.word	0x20000cb0

08003f0c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8003f0c:	b480      	push	{r7}
 8003f0e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003f10:	4b07      	ldr	r3, [pc, #28]	; (8003f30 <pvTaskIncrementMutexHeldCount+0x24>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d004      	beq.n	8003f22 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003f18:	4b05      	ldr	r3, [pc, #20]	; (8003f30 <pvTaskIncrementMutexHeldCount+0x24>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f1e:	3201      	adds	r2, #1
 8003f20:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8003f22:	4b03      	ldr	r3, [pc, #12]	; (8003f30 <pvTaskIncrementMutexHeldCount+0x24>)
 8003f24:	681b      	ldr	r3, [r3, #0]
	}
 8003f26:	4618      	mov	r0, r3
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bc80      	pop	{r7}
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	200007d4 	.word	0x200007d4

08003f34 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003f3e:	4b21      	ldr	r3, [pc, #132]	; (8003fc4 <prvAddCurrentTaskToDelayedList+0x90>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f44:	4b20      	ldr	r3, [pc, #128]	; (8003fc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	3304      	adds	r3, #4
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7fe f846 	bl	8001fdc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f56:	d10a      	bne.n	8003f6e <prvAddCurrentTaskToDelayedList+0x3a>
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d007      	beq.n	8003f6e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f5e:	4b1a      	ldr	r3, [pc, #104]	; (8003fc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	3304      	adds	r3, #4
 8003f64:	4619      	mov	r1, r3
 8003f66:	4819      	ldr	r0, [pc, #100]	; (8003fcc <prvAddCurrentTaskToDelayedList+0x98>)
 8003f68:	f7fd ffdd 	bl	8001f26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003f6c:	e026      	b.n	8003fbc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4413      	add	r3, r2
 8003f74:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f76:	4b14      	ldr	r3, [pc, #80]	; (8003fc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003f7e:	68ba      	ldr	r2, [r7, #8]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d209      	bcs.n	8003f9a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f86:	4b12      	ldr	r3, [pc, #72]	; (8003fd0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	4b0f      	ldr	r3, [pc, #60]	; (8003fc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	3304      	adds	r3, #4
 8003f90:	4619      	mov	r1, r3
 8003f92:	4610      	mov	r0, r2
 8003f94:	f7fd ffea 	bl	8001f6c <vListInsert>
}
 8003f98:	e010      	b.n	8003fbc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f9a:	4b0e      	ldr	r3, [pc, #56]	; (8003fd4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	4b0a      	ldr	r3, [pc, #40]	; (8003fc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	3304      	adds	r3, #4
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	4610      	mov	r0, r2
 8003fa8:	f7fd ffe0 	bl	8001f6c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003fac:	4b0a      	ldr	r3, [pc, #40]	; (8003fd8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d202      	bcs.n	8003fbc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003fb6:	4a08      	ldr	r2, [pc, #32]	; (8003fd8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	6013      	str	r3, [r2, #0]
}
 8003fbc:	bf00      	nop
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	20000cac 	.word	0x20000cac
 8003fc8:	200007d4 	.word	0x200007d4
 8003fcc:	20000c94 	.word	0x20000c94
 8003fd0:	20000c64 	.word	0x20000c64
 8003fd4:	20000c60 	.word	0x20000c60
 8003fd8:	20000cc8 	.word	0x20000cc8

08003fdc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b08a      	sub	sp, #40	; 0x28
 8003fe0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003fe6:	f000 facb 	bl	8004580 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003fea:	4b1c      	ldr	r3, [pc, #112]	; (800405c <xTimerCreateTimerTask+0x80>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d021      	beq.n	8004036 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003ffa:	1d3a      	adds	r2, r7, #4
 8003ffc:	f107 0108 	add.w	r1, r7, #8
 8004000:	f107 030c 	add.w	r3, r7, #12
 8004004:	4618      	mov	r0, r3
 8004006:	f7fd ff49 	bl	8001e9c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800400a:	6879      	ldr	r1, [r7, #4]
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	9202      	str	r2, [sp, #8]
 8004012:	9301      	str	r3, [sp, #4]
 8004014:	2302      	movs	r3, #2
 8004016:	9300      	str	r3, [sp, #0]
 8004018:	2300      	movs	r3, #0
 800401a:	460a      	mov	r2, r1
 800401c:	4910      	ldr	r1, [pc, #64]	; (8004060 <xTimerCreateTimerTask+0x84>)
 800401e:	4811      	ldr	r0, [pc, #68]	; (8004064 <xTimerCreateTimerTask+0x88>)
 8004020:	f7ff f810 	bl	8003044 <xTaskCreateStatic>
 8004024:	4603      	mov	r3, r0
 8004026:	4a10      	ldr	r2, [pc, #64]	; (8004068 <xTimerCreateTimerTask+0x8c>)
 8004028:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800402a:	4b0f      	ldr	r3, [pc, #60]	; (8004068 <xTimerCreateTimerTask+0x8c>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004032:	2301      	movs	r3, #1
 8004034:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d10a      	bne.n	8004052 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800403c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004040:	f383 8811 	msr	BASEPRI, r3
 8004044:	f3bf 8f6f 	isb	sy
 8004048:	f3bf 8f4f 	dsb	sy
 800404c:	613b      	str	r3, [r7, #16]
}
 800404e:	bf00      	nop
 8004050:	e7fe      	b.n	8004050 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004052:	697b      	ldr	r3, [r7, #20]
}
 8004054:	4618      	mov	r0, r3
 8004056:	3718      	adds	r7, #24
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	20000d04 	.word	0x20000d04
 8004060:	08004e6c 	.word	0x08004e6c
 8004064:	08004189 	.word	0x08004189
 8004068:	20000d08 	.word	0x20000d08

0800406c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b08a      	sub	sp, #40	; 0x28
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
 8004078:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800407a:	2300      	movs	r3, #0
 800407c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d10a      	bne.n	800409a <xTimerGenericCommand+0x2e>
	__asm volatile
 8004084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004088:	f383 8811 	msr	BASEPRI, r3
 800408c:	f3bf 8f6f 	isb	sy
 8004090:	f3bf 8f4f 	dsb	sy
 8004094:	623b      	str	r3, [r7, #32]
}
 8004096:	bf00      	nop
 8004098:	e7fe      	b.n	8004098 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800409a:	4b1a      	ldr	r3, [pc, #104]	; (8004104 <xTimerGenericCommand+0x98>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d02a      	beq.n	80040f8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	2b05      	cmp	r3, #5
 80040b2:	dc18      	bgt.n	80040e6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80040b4:	f7ff fdaa 	bl	8003c0c <xTaskGetSchedulerState>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d109      	bne.n	80040d2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80040be:	4b11      	ldr	r3, [pc, #68]	; (8004104 <xTimerGenericCommand+0x98>)
 80040c0:	6818      	ldr	r0, [r3, #0]
 80040c2:	f107 0110 	add.w	r1, r7, #16
 80040c6:	2300      	movs	r3, #0
 80040c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040ca:	f7fe f95b 	bl	8002384 <xQueueGenericSend>
 80040ce:	6278      	str	r0, [r7, #36]	; 0x24
 80040d0:	e012      	b.n	80040f8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80040d2:	4b0c      	ldr	r3, [pc, #48]	; (8004104 <xTimerGenericCommand+0x98>)
 80040d4:	6818      	ldr	r0, [r3, #0]
 80040d6:	f107 0110 	add.w	r1, r7, #16
 80040da:	2300      	movs	r3, #0
 80040dc:	2200      	movs	r2, #0
 80040de:	f7fe f951 	bl	8002384 <xQueueGenericSend>
 80040e2:	6278      	str	r0, [r7, #36]	; 0x24
 80040e4:	e008      	b.n	80040f8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80040e6:	4b07      	ldr	r3, [pc, #28]	; (8004104 <xTimerGenericCommand+0x98>)
 80040e8:	6818      	ldr	r0, [r3, #0]
 80040ea:	f107 0110 	add.w	r1, r7, #16
 80040ee:	2300      	movs	r3, #0
 80040f0:	683a      	ldr	r2, [r7, #0]
 80040f2:	f7fe fa45 	bl	8002580 <xQueueGenericSendFromISR>
 80040f6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80040f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3728      	adds	r7, #40	; 0x28
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	20000d04 	.word	0x20000d04

08004108 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b088      	sub	sp, #32
 800410c:	af02      	add	r7, sp, #8
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004112:	4b1c      	ldr	r3, [pc, #112]	; (8004184 <prvProcessExpiredTimer+0x7c>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	3304      	adds	r3, #4
 8004120:	4618      	mov	r0, r3
 8004122:	f7fd ff5b 	bl	8001fdc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	69db      	ldr	r3, [r3, #28]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d122      	bne.n	8004174 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	699a      	ldr	r2, [r3, #24]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	18d1      	adds	r1, r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	6978      	ldr	r0, [r7, #20]
 800413c:	f000 f8c8 	bl	80042d0 <prvInsertTimerInActiveList>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d016      	beq.n	8004174 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004146:	2300      	movs	r3, #0
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	2300      	movs	r3, #0
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	2100      	movs	r1, #0
 8004150:	6978      	ldr	r0, [r7, #20]
 8004152:	f7ff ff8b 	bl	800406c <xTimerGenericCommand>
 8004156:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10a      	bne.n	8004174 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800415e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004162:	f383 8811 	msr	BASEPRI, r3
 8004166:	f3bf 8f6f 	isb	sy
 800416a:	f3bf 8f4f 	dsb	sy
 800416e:	60fb      	str	r3, [r7, #12]
}
 8004170:	bf00      	nop
 8004172:	e7fe      	b.n	8004172 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004178:	6978      	ldr	r0, [r7, #20]
 800417a:	4798      	blx	r3
}
 800417c:	bf00      	nop
 800417e:	3718      	adds	r7, #24
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	20000cfc 	.word	0x20000cfc

08004188 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004190:	f107 0308 	add.w	r3, r7, #8
 8004194:	4618      	mov	r0, r3
 8004196:	f000 f857 	bl	8004248 <prvGetNextExpireTime>
 800419a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	4619      	mov	r1, r3
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	f000 f803 	bl	80041ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80041a6:	f000 f8d5 	bl	8004354 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80041aa:	e7f1      	b.n	8004190 <prvTimerTask+0x8>

080041ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80041b6:	f7ff f943 	bl	8003440 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80041ba:	f107 0308 	add.w	r3, r7, #8
 80041be:	4618      	mov	r0, r3
 80041c0:	f000 f866 	bl	8004290 <prvSampleTimeNow>
 80041c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d130      	bne.n	800422e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10a      	bne.n	80041e8 <prvProcessTimerOrBlockTask+0x3c>
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d806      	bhi.n	80041e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80041da:	f7ff f93f 	bl	800345c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80041de:	68f9      	ldr	r1, [r7, #12]
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f7ff ff91 	bl	8004108 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80041e6:	e024      	b.n	8004232 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d008      	beq.n	8004200 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80041ee:	4b13      	ldr	r3, [pc, #76]	; (800423c <prvProcessTimerOrBlockTask+0x90>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	bf0c      	ite	eq
 80041f8:	2301      	moveq	r3, #1
 80041fa:	2300      	movne	r3, #0
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004200:	4b0f      	ldr	r3, [pc, #60]	; (8004240 <prvProcessTimerOrBlockTask+0x94>)
 8004202:	6818      	ldr	r0, [r3, #0]
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	4619      	mov	r1, r3
 800420e:	f7fe fee5 	bl	8002fdc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004212:	f7ff f923 	bl	800345c <xTaskResumeAll>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10a      	bne.n	8004232 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800421c:	4b09      	ldr	r3, [pc, #36]	; (8004244 <prvProcessTimerOrBlockTask+0x98>)
 800421e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	f3bf 8f4f 	dsb	sy
 8004228:	f3bf 8f6f 	isb	sy
}
 800422c:	e001      	b.n	8004232 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800422e:	f7ff f915 	bl	800345c <xTaskResumeAll>
}
 8004232:	bf00      	nop
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	20000d00 	.word	0x20000d00
 8004240:	20000d04 	.word	0x20000d04
 8004244:	e000ed04 	.word	0xe000ed04

08004248 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004250:	4b0e      	ldr	r3, [pc, #56]	; (800428c <prvGetNextExpireTime+0x44>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	bf0c      	ite	eq
 800425a:	2301      	moveq	r3, #1
 800425c:	2300      	movne	r3, #0
 800425e:	b2db      	uxtb	r3, r3
 8004260:	461a      	mov	r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d105      	bne.n	800427a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800426e:	4b07      	ldr	r3, [pc, #28]	; (800428c <prvGetNextExpireTime+0x44>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	60fb      	str	r3, [r7, #12]
 8004278:	e001      	b.n	800427e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800427a:	2300      	movs	r3, #0
 800427c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800427e:	68fb      	ldr	r3, [r7, #12]
}
 8004280:	4618      	mov	r0, r3
 8004282:	3714      	adds	r7, #20
 8004284:	46bd      	mov	sp, r7
 8004286:	bc80      	pop	{r7}
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	20000cfc 	.word	0x20000cfc

08004290 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004298:	f7ff f97e 	bl	8003598 <xTaskGetTickCount>
 800429c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800429e:	4b0b      	ldr	r3, [pc, #44]	; (80042cc <prvSampleTimeNow+0x3c>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d205      	bcs.n	80042b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80042a8:	f000 f908 	bl	80044bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	601a      	str	r2, [r3, #0]
 80042b2:	e002      	b.n	80042ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80042ba:	4a04      	ldr	r2, [pc, #16]	; (80042cc <prvSampleTimeNow+0x3c>)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80042c0:	68fb      	ldr	r3, [r7, #12]
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	20000d0c 	.word	0x20000d0c

080042d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
 80042dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80042de:	2300      	movs	r3, #0
 80042e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	68ba      	ldr	r2, [r7, #8]
 80042e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	68fa      	ldr	r2, [r7, #12]
 80042ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d812      	bhi.n	800431c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	1ad2      	subs	r2, r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	429a      	cmp	r2, r3
 8004302:	d302      	bcc.n	800430a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004304:	2301      	movs	r3, #1
 8004306:	617b      	str	r3, [r7, #20]
 8004308:	e01b      	b.n	8004342 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800430a:	4b10      	ldr	r3, [pc, #64]	; (800434c <prvInsertTimerInActiveList+0x7c>)
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	3304      	adds	r3, #4
 8004312:	4619      	mov	r1, r3
 8004314:	4610      	mov	r0, r2
 8004316:	f7fd fe29 	bl	8001f6c <vListInsert>
 800431a:	e012      	b.n	8004342 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	429a      	cmp	r2, r3
 8004322:	d206      	bcs.n	8004332 <prvInsertTimerInActiveList+0x62>
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	429a      	cmp	r2, r3
 800432a:	d302      	bcc.n	8004332 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800432c:	2301      	movs	r3, #1
 800432e:	617b      	str	r3, [r7, #20]
 8004330:	e007      	b.n	8004342 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004332:	4b07      	ldr	r3, [pc, #28]	; (8004350 <prvInsertTimerInActiveList+0x80>)
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	3304      	adds	r3, #4
 800433a:	4619      	mov	r1, r3
 800433c:	4610      	mov	r0, r2
 800433e:	f7fd fe15 	bl	8001f6c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004342:	697b      	ldr	r3, [r7, #20]
}
 8004344:	4618      	mov	r0, r3
 8004346:	3718      	adds	r7, #24
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	20000d00 	.word	0x20000d00
 8004350:	20000cfc 	.word	0x20000cfc

08004354 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b08e      	sub	sp, #56	; 0x38
 8004358:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800435a:	e09d      	b.n	8004498 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	da18      	bge.n	8004394 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004362:	1d3b      	adds	r3, r7, #4
 8004364:	3304      	adds	r3, #4
 8004366:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10a      	bne.n	8004384 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800436e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004372:	f383 8811 	msr	BASEPRI, r3
 8004376:	f3bf 8f6f 	isb	sy
 800437a:	f3bf 8f4f 	dsb	sy
 800437e:	61fb      	str	r3, [r7, #28]
}
 8004380:	bf00      	nop
 8004382:	e7fe      	b.n	8004382 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800438a:	6850      	ldr	r0, [r2, #4]
 800438c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800438e:	6892      	ldr	r2, [r2, #8]
 8004390:	4611      	mov	r1, r2
 8004392:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	db7e      	blt.n	8004498 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800439e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d004      	beq.n	80043b0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80043a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a8:	3304      	adds	r3, #4
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7fd fe16 	bl	8001fdc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80043b0:	463b      	mov	r3, r7
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7ff ff6c 	bl	8004290 <prvSampleTimeNow>
 80043b8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2b09      	cmp	r3, #9
 80043be:	d86a      	bhi.n	8004496 <prvProcessReceivedCommands+0x142>
 80043c0:	a201      	add	r2, pc, #4	; (adr r2, 80043c8 <prvProcessReceivedCommands+0x74>)
 80043c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c6:	bf00      	nop
 80043c8:	080043f1 	.word	0x080043f1
 80043cc:	080043f1 	.word	0x080043f1
 80043d0:	080043f1 	.word	0x080043f1
 80043d4:	08004499 	.word	0x08004499
 80043d8:	0800444d 	.word	0x0800444d
 80043dc:	08004485 	.word	0x08004485
 80043e0:	080043f1 	.word	0x080043f1
 80043e4:	080043f1 	.word	0x080043f1
 80043e8:	08004499 	.word	0x08004499
 80043ec:	0800444d 	.word	0x0800444d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80043f0:	68ba      	ldr	r2, [r7, #8]
 80043f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f4:	699b      	ldr	r3, [r3, #24]
 80043f6:	18d1      	adds	r1, r2, r3
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043fe:	f7ff ff67 	bl	80042d0 <prvInsertTimerInActiveList>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d047      	beq.n	8004498 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800440a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800440e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004412:	69db      	ldr	r3, [r3, #28]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d13f      	bne.n	8004498 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004418:	68ba      	ldr	r2, [r7, #8]
 800441a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	441a      	add	r2, r3
 8004420:	2300      	movs	r3, #0
 8004422:	9300      	str	r3, [sp, #0]
 8004424:	2300      	movs	r3, #0
 8004426:	2100      	movs	r1, #0
 8004428:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800442a:	f7ff fe1f 	bl	800406c <xTimerGenericCommand>
 800442e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004430:	6a3b      	ldr	r3, [r7, #32]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d130      	bne.n	8004498 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8004436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443a:	f383 8811 	msr	BASEPRI, r3
 800443e:	f3bf 8f6f 	isb	sy
 8004442:	f3bf 8f4f 	dsb	sy
 8004446:	61bb      	str	r3, [r7, #24]
}
 8004448:	bf00      	nop
 800444a:	e7fe      	b.n	800444a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800444c:	68ba      	ldr	r2, [r7, #8]
 800444e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004450:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10a      	bne.n	8004470 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800445a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445e:	f383 8811 	msr	BASEPRI, r3
 8004462:	f3bf 8f6f 	isb	sy
 8004466:	f3bf 8f4f 	dsb	sy
 800446a:	617b      	str	r3, [r7, #20]
}
 800446c:	bf00      	nop
 800446e:	e7fe      	b.n	800446e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004472:	699a      	ldr	r2, [r3, #24]
 8004474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004476:	18d1      	adds	r1, r2, r3
 8004478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800447c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800447e:	f7ff ff27 	bl	80042d0 <prvInsertTimerInActiveList>
					break;
 8004482:	e009      	b.n	8004498 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004486:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800448a:	2b00      	cmp	r3, #0
 800448c:	d104      	bne.n	8004498 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800448e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004490:	f000 fb68 	bl	8004b64 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004494:	e000      	b.n	8004498 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8004496:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004498:	4b07      	ldr	r3, [pc, #28]	; (80044b8 <prvProcessReceivedCommands+0x164>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	1d39      	adds	r1, r7, #4
 800449e:	2200      	movs	r2, #0
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7fe f993 	bl	80027cc <xQueueReceive>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f47f af57 	bne.w	800435c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80044ae:	bf00      	nop
 80044b0:	bf00      	nop
 80044b2:	3730      	adds	r7, #48	; 0x30
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	20000d04 	.word	0x20000d04

080044bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b088      	sub	sp, #32
 80044c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80044c2:	e045      	b.n	8004550 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80044c4:	4b2c      	ldr	r3, [pc, #176]	; (8004578 <prvSwitchTimerLists+0xbc>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80044ce:	4b2a      	ldr	r3, [pc, #168]	; (8004578 <prvSwitchTimerLists+0xbc>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	3304      	adds	r3, #4
 80044dc:	4618      	mov	r0, r3
 80044de:	f7fd fd7d 	bl	8001fdc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e6:	68f8      	ldr	r0, [r7, #12]
 80044e8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	69db      	ldr	r3, [r3, #28]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d12e      	bne.n	8004550 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	693a      	ldr	r2, [r7, #16]
 80044f8:	4413      	add	r3, r2
 80044fa:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	429a      	cmp	r2, r3
 8004502:	d90e      	bls.n	8004522 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	68ba      	ldr	r2, [r7, #8]
 8004508:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004510:	4b19      	ldr	r3, [pc, #100]	; (8004578 <prvSwitchTimerLists+0xbc>)
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	3304      	adds	r3, #4
 8004518:	4619      	mov	r1, r3
 800451a:	4610      	mov	r0, r2
 800451c:	f7fd fd26 	bl	8001f6c <vListInsert>
 8004520:	e016      	b.n	8004550 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004522:	2300      	movs	r3, #0
 8004524:	9300      	str	r3, [sp, #0]
 8004526:	2300      	movs	r3, #0
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	2100      	movs	r1, #0
 800452c:	68f8      	ldr	r0, [r7, #12]
 800452e:	f7ff fd9d 	bl	800406c <xTimerGenericCommand>
 8004532:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10a      	bne.n	8004550 <prvSwitchTimerLists+0x94>
	__asm volatile
 800453a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800453e:	f383 8811 	msr	BASEPRI, r3
 8004542:	f3bf 8f6f 	isb	sy
 8004546:	f3bf 8f4f 	dsb	sy
 800454a:	603b      	str	r3, [r7, #0]
}
 800454c:	bf00      	nop
 800454e:	e7fe      	b.n	800454e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004550:	4b09      	ldr	r3, [pc, #36]	; (8004578 <prvSwitchTimerLists+0xbc>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1b4      	bne.n	80044c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800455a:	4b07      	ldr	r3, [pc, #28]	; (8004578 <prvSwitchTimerLists+0xbc>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004560:	4b06      	ldr	r3, [pc, #24]	; (800457c <prvSwitchTimerLists+0xc0>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a04      	ldr	r2, [pc, #16]	; (8004578 <prvSwitchTimerLists+0xbc>)
 8004566:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004568:	4a04      	ldr	r2, [pc, #16]	; (800457c <prvSwitchTimerLists+0xc0>)
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	6013      	str	r3, [r2, #0]
}
 800456e:	bf00      	nop
 8004570:	3718      	adds	r7, #24
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	20000cfc 	.word	0x20000cfc
 800457c:	20000d00 	.word	0x20000d00

08004580 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004586:	f000 f929 	bl	80047dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800458a:	4b15      	ldr	r3, [pc, #84]	; (80045e0 <prvCheckForValidListAndQueue+0x60>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d120      	bne.n	80045d4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004592:	4814      	ldr	r0, [pc, #80]	; (80045e4 <prvCheckForValidListAndQueue+0x64>)
 8004594:	f7fd fc9c 	bl	8001ed0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004598:	4813      	ldr	r0, [pc, #76]	; (80045e8 <prvCheckForValidListAndQueue+0x68>)
 800459a:	f7fd fc99 	bl	8001ed0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800459e:	4b13      	ldr	r3, [pc, #76]	; (80045ec <prvCheckForValidListAndQueue+0x6c>)
 80045a0:	4a10      	ldr	r2, [pc, #64]	; (80045e4 <prvCheckForValidListAndQueue+0x64>)
 80045a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80045a4:	4b12      	ldr	r3, [pc, #72]	; (80045f0 <prvCheckForValidListAndQueue+0x70>)
 80045a6:	4a10      	ldr	r2, [pc, #64]	; (80045e8 <prvCheckForValidListAndQueue+0x68>)
 80045a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80045aa:	2300      	movs	r3, #0
 80045ac:	9300      	str	r3, [sp, #0]
 80045ae:	4b11      	ldr	r3, [pc, #68]	; (80045f4 <prvCheckForValidListAndQueue+0x74>)
 80045b0:	4a11      	ldr	r2, [pc, #68]	; (80045f8 <prvCheckForValidListAndQueue+0x78>)
 80045b2:	2110      	movs	r1, #16
 80045b4:	200a      	movs	r0, #10
 80045b6:	f7fd fda3 	bl	8002100 <xQueueGenericCreateStatic>
 80045ba:	4603      	mov	r3, r0
 80045bc:	4a08      	ldr	r2, [pc, #32]	; (80045e0 <prvCheckForValidListAndQueue+0x60>)
 80045be:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80045c0:	4b07      	ldr	r3, [pc, #28]	; (80045e0 <prvCheckForValidListAndQueue+0x60>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d005      	beq.n	80045d4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80045c8:	4b05      	ldr	r3, [pc, #20]	; (80045e0 <prvCheckForValidListAndQueue+0x60>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	490b      	ldr	r1, [pc, #44]	; (80045fc <prvCheckForValidListAndQueue+0x7c>)
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7fe fcb2 	bl	8002f38 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80045d4:	f000 f932 	bl	800483c <vPortExitCritical>
}
 80045d8:	bf00      	nop
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	20000d04 	.word	0x20000d04
 80045e4:	20000cd4 	.word	0x20000cd4
 80045e8:	20000ce8 	.word	0x20000ce8
 80045ec:	20000cfc 	.word	0x20000cfc
 80045f0:	20000d00 	.word	0x20000d00
 80045f4:	20000db0 	.word	0x20000db0
 80045f8:	20000d10 	.word	0x20000d10
 80045fc:	08004e74 	.word	0x08004e74

08004600 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	3b04      	subs	r3, #4
 8004610:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004618:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	3b04      	subs	r3, #4
 800461e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	f023 0201 	bic.w	r2, r3, #1
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	3b04      	subs	r3, #4
 800462e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004630:	4a08      	ldr	r2, [pc, #32]	; (8004654 <pxPortInitialiseStack+0x54>)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	3b14      	subs	r3, #20
 800463a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	3b20      	subs	r3, #32
 8004646:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004648:	68fb      	ldr	r3, [r7, #12]
}
 800464a:	4618      	mov	r0, r3
 800464c:	3714      	adds	r7, #20
 800464e:	46bd      	mov	sp, r7
 8004650:	bc80      	pop	{r7}
 8004652:	4770      	bx	lr
 8004654:	08004659 	.word	0x08004659

08004658 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004658:	b480      	push	{r7}
 800465a:	b085      	sub	sp, #20
 800465c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800465e:	2300      	movs	r3, #0
 8004660:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004662:	4b12      	ldr	r3, [pc, #72]	; (80046ac <prvTaskExitError+0x54>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800466a:	d00a      	beq.n	8004682 <prvTaskExitError+0x2a>
	__asm volatile
 800466c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004670:	f383 8811 	msr	BASEPRI, r3
 8004674:	f3bf 8f6f 	isb	sy
 8004678:	f3bf 8f4f 	dsb	sy
 800467c:	60fb      	str	r3, [r7, #12]
}
 800467e:	bf00      	nop
 8004680:	e7fe      	b.n	8004680 <prvTaskExitError+0x28>
	__asm volatile
 8004682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004686:	f383 8811 	msr	BASEPRI, r3
 800468a:	f3bf 8f6f 	isb	sy
 800468e:	f3bf 8f4f 	dsb	sy
 8004692:	60bb      	str	r3, [r7, #8]
}
 8004694:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004696:	bf00      	nop
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d0fc      	beq.n	8004698 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800469e:	bf00      	nop
 80046a0:	bf00      	nop
 80046a2:	3714      	adds	r7, #20
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bc80      	pop	{r7}
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	200000a4 	.word	0x200000a4

080046b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80046b0:	4b07      	ldr	r3, [pc, #28]	; (80046d0 <pxCurrentTCBConst2>)
 80046b2:	6819      	ldr	r1, [r3, #0]
 80046b4:	6808      	ldr	r0, [r1, #0]
 80046b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80046ba:	f380 8809 	msr	PSP, r0
 80046be:	f3bf 8f6f 	isb	sy
 80046c2:	f04f 0000 	mov.w	r0, #0
 80046c6:	f380 8811 	msr	BASEPRI, r0
 80046ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80046ce:	4770      	bx	lr

080046d0 <pxCurrentTCBConst2>:
 80046d0:	200007d4 	.word	0x200007d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80046d4:	bf00      	nop
 80046d6:	bf00      	nop

080046d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80046d8:	4806      	ldr	r0, [pc, #24]	; (80046f4 <prvPortStartFirstTask+0x1c>)
 80046da:	6800      	ldr	r0, [r0, #0]
 80046dc:	6800      	ldr	r0, [r0, #0]
 80046de:	f380 8808 	msr	MSP, r0
 80046e2:	b662      	cpsie	i
 80046e4:	b661      	cpsie	f
 80046e6:	f3bf 8f4f 	dsb	sy
 80046ea:	f3bf 8f6f 	isb	sy
 80046ee:	df00      	svc	0
 80046f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80046f2:	bf00      	nop
 80046f4:	e000ed08 	.word	0xe000ed08

080046f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80046fe:	4b32      	ldr	r3, [pc, #200]	; (80047c8 <xPortStartScheduler+0xd0>)
 8004700:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	b2db      	uxtb	r3, r3
 8004708:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	22ff      	movs	r2, #255	; 0xff
 800470e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	b2db      	uxtb	r3, r3
 8004716:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004718:	78fb      	ldrb	r3, [r7, #3]
 800471a:	b2db      	uxtb	r3, r3
 800471c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004720:	b2da      	uxtb	r2, r3
 8004722:	4b2a      	ldr	r3, [pc, #168]	; (80047cc <xPortStartScheduler+0xd4>)
 8004724:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004726:	4b2a      	ldr	r3, [pc, #168]	; (80047d0 <xPortStartScheduler+0xd8>)
 8004728:	2207      	movs	r2, #7
 800472a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800472c:	e009      	b.n	8004742 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800472e:	4b28      	ldr	r3, [pc, #160]	; (80047d0 <xPortStartScheduler+0xd8>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	3b01      	subs	r3, #1
 8004734:	4a26      	ldr	r2, [pc, #152]	; (80047d0 <xPortStartScheduler+0xd8>)
 8004736:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004738:	78fb      	ldrb	r3, [r7, #3]
 800473a:	b2db      	uxtb	r3, r3
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	b2db      	uxtb	r3, r3
 8004740:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004742:	78fb      	ldrb	r3, [r7, #3]
 8004744:	b2db      	uxtb	r3, r3
 8004746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800474a:	2b80      	cmp	r3, #128	; 0x80
 800474c:	d0ef      	beq.n	800472e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800474e:	4b20      	ldr	r3, [pc, #128]	; (80047d0 <xPortStartScheduler+0xd8>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f1c3 0307 	rsb	r3, r3, #7
 8004756:	2b04      	cmp	r3, #4
 8004758:	d00a      	beq.n	8004770 <xPortStartScheduler+0x78>
	__asm volatile
 800475a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475e:	f383 8811 	msr	BASEPRI, r3
 8004762:	f3bf 8f6f 	isb	sy
 8004766:	f3bf 8f4f 	dsb	sy
 800476a:	60bb      	str	r3, [r7, #8]
}
 800476c:	bf00      	nop
 800476e:	e7fe      	b.n	800476e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004770:	4b17      	ldr	r3, [pc, #92]	; (80047d0 <xPortStartScheduler+0xd8>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	021b      	lsls	r3, r3, #8
 8004776:	4a16      	ldr	r2, [pc, #88]	; (80047d0 <xPortStartScheduler+0xd8>)
 8004778:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800477a:	4b15      	ldr	r3, [pc, #84]	; (80047d0 <xPortStartScheduler+0xd8>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004782:	4a13      	ldr	r2, [pc, #76]	; (80047d0 <xPortStartScheduler+0xd8>)
 8004784:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	b2da      	uxtb	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800478e:	4b11      	ldr	r3, [pc, #68]	; (80047d4 <xPortStartScheduler+0xdc>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a10      	ldr	r2, [pc, #64]	; (80047d4 <xPortStartScheduler+0xdc>)
 8004794:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004798:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800479a:	4b0e      	ldr	r3, [pc, #56]	; (80047d4 <xPortStartScheduler+0xdc>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a0d      	ldr	r2, [pc, #52]	; (80047d4 <xPortStartScheduler+0xdc>)
 80047a0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80047a4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80047a6:	f000 f8b9 	bl	800491c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80047aa:	4b0b      	ldr	r3, [pc, #44]	; (80047d8 <xPortStartScheduler+0xe0>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80047b0:	f7ff ff92 	bl	80046d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80047b4:	f7fe ffbc 	bl	8003730 <vTaskSwitchContext>
	prvTaskExitError();
 80047b8:	f7ff ff4e 	bl	8004658 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	e000e400 	.word	0xe000e400
 80047cc:	20000e00 	.word	0x20000e00
 80047d0:	20000e04 	.word	0x20000e04
 80047d4:	e000ed20 	.word	0xe000ed20
 80047d8:	200000a4 	.word	0x200000a4

080047dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
	__asm volatile
 80047e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e6:	f383 8811 	msr	BASEPRI, r3
 80047ea:	f3bf 8f6f 	isb	sy
 80047ee:	f3bf 8f4f 	dsb	sy
 80047f2:	607b      	str	r3, [r7, #4]
}
 80047f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80047f6:	4b0f      	ldr	r3, [pc, #60]	; (8004834 <vPortEnterCritical+0x58>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	3301      	adds	r3, #1
 80047fc:	4a0d      	ldr	r2, [pc, #52]	; (8004834 <vPortEnterCritical+0x58>)
 80047fe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004800:	4b0c      	ldr	r3, [pc, #48]	; (8004834 <vPortEnterCritical+0x58>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d10f      	bne.n	8004828 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004808:	4b0b      	ldr	r3, [pc, #44]	; (8004838 <vPortEnterCritical+0x5c>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00a      	beq.n	8004828 <vPortEnterCritical+0x4c>
	__asm volatile
 8004812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004816:	f383 8811 	msr	BASEPRI, r3
 800481a:	f3bf 8f6f 	isb	sy
 800481e:	f3bf 8f4f 	dsb	sy
 8004822:	603b      	str	r3, [r7, #0]
}
 8004824:	bf00      	nop
 8004826:	e7fe      	b.n	8004826 <vPortEnterCritical+0x4a>
	}
}
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	bc80      	pop	{r7}
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	200000a4 	.word	0x200000a4
 8004838:	e000ed04 	.word	0xe000ed04

0800483c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004842:	4b11      	ldr	r3, [pc, #68]	; (8004888 <vPortExitCritical+0x4c>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10a      	bne.n	8004860 <vPortExitCritical+0x24>
	__asm volatile
 800484a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484e:	f383 8811 	msr	BASEPRI, r3
 8004852:	f3bf 8f6f 	isb	sy
 8004856:	f3bf 8f4f 	dsb	sy
 800485a:	607b      	str	r3, [r7, #4]
}
 800485c:	bf00      	nop
 800485e:	e7fe      	b.n	800485e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004860:	4b09      	ldr	r3, [pc, #36]	; (8004888 <vPortExitCritical+0x4c>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	3b01      	subs	r3, #1
 8004866:	4a08      	ldr	r2, [pc, #32]	; (8004888 <vPortExitCritical+0x4c>)
 8004868:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800486a:	4b07      	ldr	r3, [pc, #28]	; (8004888 <vPortExitCritical+0x4c>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d105      	bne.n	800487e <vPortExitCritical+0x42>
 8004872:	2300      	movs	r3, #0
 8004874:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	f383 8811 	msr	BASEPRI, r3
}
 800487c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800487e:	bf00      	nop
 8004880:	370c      	adds	r7, #12
 8004882:	46bd      	mov	sp, r7
 8004884:	bc80      	pop	{r7}
 8004886:	4770      	bx	lr
 8004888:	200000a4 	.word	0x200000a4
 800488c:	00000000 	.word	0x00000000

08004890 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004890:	f3ef 8009 	mrs	r0, PSP
 8004894:	f3bf 8f6f 	isb	sy
 8004898:	4b0d      	ldr	r3, [pc, #52]	; (80048d0 <pxCurrentTCBConst>)
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80048a0:	6010      	str	r0, [r2, #0]
 80048a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80048a6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80048aa:	f380 8811 	msr	BASEPRI, r0
 80048ae:	f7fe ff3f 	bl	8003730 <vTaskSwitchContext>
 80048b2:	f04f 0000 	mov.w	r0, #0
 80048b6:	f380 8811 	msr	BASEPRI, r0
 80048ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80048be:	6819      	ldr	r1, [r3, #0]
 80048c0:	6808      	ldr	r0, [r1, #0]
 80048c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80048c6:	f380 8809 	msr	PSP, r0
 80048ca:	f3bf 8f6f 	isb	sy
 80048ce:	4770      	bx	lr

080048d0 <pxCurrentTCBConst>:
 80048d0:	200007d4 	.word	0x200007d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80048d4:	bf00      	nop
 80048d6:	bf00      	nop

080048d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
	__asm volatile
 80048de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e2:	f383 8811 	msr	BASEPRI, r3
 80048e6:	f3bf 8f6f 	isb	sy
 80048ea:	f3bf 8f4f 	dsb	sy
 80048ee:	607b      	str	r3, [r7, #4]
}
 80048f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80048f2:	f7fe fe5f 	bl	80035b4 <xTaskIncrementTick>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d003      	beq.n	8004904 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80048fc:	4b06      	ldr	r3, [pc, #24]	; (8004918 <xPortSysTickHandler+0x40>)
 80048fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	2300      	movs	r3, #0
 8004906:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	f383 8811 	msr	BASEPRI, r3
}
 800490e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004910:	bf00      	nop
 8004912:	3708      	adds	r7, #8
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	e000ed04 	.word	0xe000ed04

0800491c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800491c:	b480      	push	{r7}
 800491e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004920:	4b0a      	ldr	r3, [pc, #40]	; (800494c <vPortSetupTimerInterrupt+0x30>)
 8004922:	2200      	movs	r2, #0
 8004924:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004926:	4b0a      	ldr	r3, [pc, #40]	; (8004950 <vPortSetupTimerInterrupt+0x34>)
 8004928:	2200      	movs	r2, #0
 800492a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800492c:	4b09      	ldr	r3, [pc, #36]	; (8004954 <vPortSetupTimerInterrupt+0x38>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a09      	ldr	r2, [pc, #36]	; (8004958 <vPortSetupTimerInterrupt+0x3c>)
 8004932:	fba2 2303 	umull	r2, r3, r2, r3
 8004936:	099b      	lsrs	r3, r3, #6
 8004938:	4a08      	ldr	r2, [pc, #32]	; (800495c <vPortSetupTimerInterrupt+0x40>)
 800493a:	3b01      	subs	r3, #1
 800493c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800493e:	4b03      	ldr	r3, [pc, #12]	; (800494c <vPortSetupTimerInterrupt+0x30>)
 8004940:	2207      	movs	r2, #7
 8004942:	601a      	str	r2, [r3, #0]
}
 8004944:	bf00      	nop
 8004946:	46bd      	mov	sp, r7
 8004948:	bc80      	pop	{r7}
 800494a:	4770      	bx	lr
 800494c:	e000e010 	.word	0xe000e010
 8004950:	e000e018 	.word	0xe000e018
 8004954:	20000098 	.word	0x20000098
 8004958:	10624dd3 	.word	0x10624dd3
 800495c:	e000e014 	.word	0xe000e014

08004960 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004966:	f3ef 8305 	mrs	r3, IPSR
 800496a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2b0f      	cmp	r3, #15
 8004970:	d914      	bls.n	800499c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004972:	4a16      	ldr	r2, [pc, #88]	; (80049cc <vPortValidateInterruptPriority+0x6c>)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	4413      	add	r3, r2
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800497c:	4b14      	ldr	r3, [pc, #80]	; (80049d0 <vPortValidateInterruptPriority+0x70>)
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	7afa      	ldrb	r2, [r7, #11]
 8004982:	429a      	cmp	r2, r3
 8004984:	d20a      	bcs.n	800499c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498a:	f383 8811 	msr	BASEPRI, r3
 800498e:	f3bf 8f6f 	isb	sy
 8004992:	f3bf 8f4f 	dsb	sy
 8004996:	607b      	str	r3, [r7, #4]
}
 8004998:	bf00      	nop
 800499a:	e7fe      	b.n	800499a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800499c:	4b0d      	ldr	r3, [pc, #52]	; (80049d4 <vPortValidateInterruptPriority+0x74>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80049a4:	4b0c      	ldr	r3, [pc, #48]	; (80049d8 <vPortValidateInterruptPriority+0x78>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d90a      	bls.n	80049c2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80049ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b0:	f383 8811 	msr	BASEPRI, r3
 80049b4:	f3bf 8f6f 	isb	sy
 80049b8:	f3bf 8f4f 	dsb	sy
 80049bc:	603b      	str	r3, [r7, #0]
}
 80049be:	bf00      	nop
 80049c0:	e7fe      	b.n	80049c0 <vPortValidateInterruptPriority+0x60>
	}
 80049c2:	bf00      	nop
 80049c4:	3714      	adds	r7, #20
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bc80      	pop	{r7}
 80049ca:	4770      	bx	lr
 80049cc:	e000e3f0 	.word	0xe000e3f0
 80049d0:	20000e00 	.word	0x20000e00
 80049d4:	e000ed0c 	.word	0xe000ed0c
 80049d8:	20000e04 	.word	0x20000e04

080049dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b08a      	sub	sp, #40	; 0x28
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80049e4:	2300      	movs	r3, #0
 80049e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80049e8:	f7fe fd2a 	bl	8003440 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80049ec:	4b58      	ldr	r3, [pc, #352]	; (8004b50 <pvPortMalloc+0x174>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d101      	bne.n	80049f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80049f4:	f000 f910 	bl	8004c18 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80049f8:	4b56      	ldr	r3, [pc, #344]	; (8004b54 <pvPortMalloc+0x178>)
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4013      	ands	r3, r2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	f040 808e 	bne.w	8004b22 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d01d      	beq.n	8004a48 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004a0c:	2208      	movs	r2, #8
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4413      	add	r3, r2
 8004a12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f003 0307 	and.w	r3, r3, #7
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d014      	beq.n	8004a48 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f023 0307 	bic.w	r3, r3, #7
 8004a24:	3308      	adds	r3, #8
 8004a26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f003 0307 	and.w	r3, r3, #7
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00a      	beq.n	8004a48 <pvPortMalloc+0x6c>
	__asm volatile
 8004a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a36:	f383 8811 	msr	BASEPRI, r3
 8004a3a:	f3bf 8f6f 	isb	sy
 8004a3e:	f3bf 8f4f 	dsb	sy
 8004a42:	617b      	str	r3, [r7, #20]
}
 8004a44:	bf00      	nop
 8004a46:	e7fe      	b.n	8004a46 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d069      	beq.n	8004b22 <pvPortMalloc+0x146>
 8004a4e:	4b42      	ldr	r3, [pc, #264]	; (8004b58 <pvPortMalloc+0x17c>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d864      	bhi.n	8004b22 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004a58:	4b40      	ldr	r3, [pc, #256]	; (8004b5c <pvPortMalloc+0x180>)
 8004a5a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004a5c:	4b3f      	ldr	r3, [pc, #252]	; (8004b5c <pvPortMalloc+0x180>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a62:	e004      	b.n	8004a6e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a66:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d903      	bls.n	8004a80 <pvPortMalloc+0xa4>
 8004a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1f1      	bne.n	8004a64 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004a80:	4b33      	ldr	r3, [pc, #204]	; (8004b50 <pvPortMalloc+0x174>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d04b      	beq.n	8004b22 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004a8a:	6a3b      	ldr	r3, [r7, #32]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2208      	movs	r2, #8
 8004a90:	4413      	add	r3, r2
 8004a92:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	6a3b      	ldr	r3, [r7, #32]
 8004a9a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9e:	685a      	ldr	r2, [r3, #4]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	1ad2      	subs	r2, r2, r3
 8004aa4:	2308      	movs	r3, #8
 8004aa6:	005b      	lsls	r3, r3, #1
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d91f      	bls.n	8004aec <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	f003 0307 	and.w	r3, r3, #7
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00a      	beq.n	8004ad4 <pvPortMalloc+0xf8>
	__asm volatile
 8004abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac2:	f383 8811 	msr	BASEPRI, r3
 8004ac6:	f3bf 8f6f 	isb	sy
 8004aca:	f3bf 8f4f 	dsb	sy
 8004ace:	613b      	str	r3, [r7, #16]
}
 8004ad0:	bf00      	nop
 8004ad2:	e7fe      	b.n	8004ad2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad6:	685a      	ldr	r2, [r3, #4]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	1ad2      	subs	r2, r2, r3
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004ae6:	69b8      	ldr	r0, [r7, #24]
 8004ae8:	f000 f8f8 	bl	8004cdc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004aec:	4b1a      	ldr	r3, [pc, #104]	; (8004b58 <pvPortMalloc+0x17c>)
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	4a18      	ldr	r2, [pc, #96]	; (8004b58 <pvPortMalloc+0x17c>)
 8004af8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004afa:	4b17      	ldr	r3, [pc, #92]	; (8004b58 <pvPortMalloc+0x17c>)
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	4b18      	ldr	r3, [pc, #96]	; (8004b60 <pvPortMalloc+0x184>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d203      	bcs.n	8004b0e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b06:	4b14      	ldr	r3, [pc, #80]	; (8004b58 <pvPortMalloc+0x17c>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a15      	ldr	r2, [pc, #84]	; (8004b60 <pvPortMalloc+0x184>)
 8004b0c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b10:	685a      	ldr	r2, [r3, #4]
 8004b12:	4b10      	ldr	r3, [pc, #64]	; (8004b54 <pvPortMalloc+0x178>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	431a      	orrs	r2, r3
 8004b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1e:	2200      	movs	r2, #0
 8004b20:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004b22:	f7fe fc9b 	bl	800345c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	f003 0307 	and.w	r3, r3, #7
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00a      	beq.n	8004b46 <pvPortMalloc+0x16a>
	__asm volatile
 8004b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b34:	f383 8811 	msr	BASEPRI, r3
 8004b38:	f3bf 8f6f 	isb	sy
 8004b3c:	f3bf 8f4f 	dsb	sy
 8004b40:	60fb      	str	r3, [r7, #12]
}
 8004b42:	bf00      	nop
 8004b44:	e7fe      	b.n	8004b44 <pvPortMalloc+0x168>
	return pvReturn;
 8004b46:	69fb      	ldr	r3, [r7, #28]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3728      	adds	r7, #40	; 0x28
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	20001a10 	.word	0x20001a10
 8004b54:	20001a1c 	.word	0x20001a1c
 8004b58:	20001a14 	.word	0x20001a14
 8004b5c:	20001a08 	.word	0x20001a08
 8004b60:	20001a18 	.word	0x20001a18

08004b64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d048      	beq.n	8004c08 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004b76:	2308      	movs	r3, #8
 8004b78:	425b      	negs	r3, r3
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	685a      	ldr	r2, [r3, #4]
 8004b88:	4b21      	ldr	r3, [pc, #132]	; (8004c10 <vPortFree+0xac>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10a      	bne.n	8004ba8 <vPortFree+0x44>
	__asm volatile
 8004b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b96:	f383 8811 	msr	BASEPRI, r3
 8004b9a:	f3bf 8f6f 	isb	sy
 8004b9e:	f3bf 8f4f 	dsb	sy
 8004ba2:	60fb      	str	r3, [r7, #12]
}
 8004ba4:	bf00      	nop
 8004ba6:	e7fe      	b.n	8004ba6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00a      	beq.n	8004bc6 <vPortFree+0x62>
	__asm volatile
 8004bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb4:	f383 8811 	msr	BASEPRI, r3
 8004bb8:	f3bf 8f6f 	isb	sy
 8004bbc:	f3bf 8f4f 	dsb	sy
 8004bc0:	60bb      	str	r3, [r7, #8]
}
 8004bc2:	bf00      	nop
 8004bc4:	e7fe      	b.n	8004bc4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	685a      	ldr	r2, [r3, #4]
 8004bca:	4b11      	ldr	r3, [pc, #68]	; (8004c10 <vPortFree+0xac>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4013      	ands	r3, r2
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d019      	beq.n	8004c08 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d115      	bne.n	8004c08 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	685a      	ldr	r2, [r3, #4]
 8004be0:	4b0b      	ldr	r3, [pc, #44]	; (8004c10 <vPortFree+0xac>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	43db      	mvns	r3, r3
 8004be6:	401a      	ands	r2, r3
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004bec:	f7fe fc28 	bl	8003440 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	685a      	ldr	r2, [r3, #4]
 8004bf4:	4b07      	ldr	r3, [pc, #28]	; (8004c14 <vPortFree+0xb0>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	4a06      	ldr	r2, [pc, #24]	; (8004c14 <vPortFree+0xb0>)
 8004bfc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004bfe:	6938      	ldr	r0, [r7, #16]
 8004c00:	f000 f86c 	bl	8004cdc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004c04:	f7fe fc2a 	bl	800345c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004c08:	bf00      	nop
 8004c0a:	3718      	adds	r7, #24
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	20001a1c 	.word	0x20001a1c
 8004c14:	20001a14 	.word	0x20001a14

08004c18 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c1e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004c22:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004c24:	4b27      	ldr	r3, [pc, #156]	; (8004cc4 <prvHeapInit+0xac>)
 8004c26:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f003 0307 	and.w	r3, r3, #7
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00c      	beq.n	8004c4c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	3307      	adds	r3, #7
 8004c36:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f023 0307 	bic.w	r3, r3, #7
 8004c3e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004c40:	68ba      	ldr	r2, [r7, #8]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	4a1f      	ldr	r2, [pc, #124]	; (8004cc4 <prvHeapInit+0xac>)
 8004c48:	4413      	add	r3, r2
 8004c4a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004c50:	4a1d      	ldr	r2, [pc, #116]	; (8004cc8 <prvHeapInit+0xb0>)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004c56:	4b1c      	ldr	r3, [pc, #112]	; (8004cc8 <prvHeapInit+0xb0>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	68ba      	ldr	r2, [r7, #8]
 8004c60:	4413      	add	r3, r2
 8004c62:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004c64:	2208      	movs	r2, #8
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	1a9b      	subs	r3, r3, r2
 8004c6a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f023 0307 	bic.w	r3, r3, #7
 8004c72:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	4a15      	ldr	r2, [pc, #84]	; (8004ccc <prvHeapInit+0xb4>)
 8004c78:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004c7a:	4b14      	ldr	r3, [pc, #80]	; (8004ccc <prvHeapInit+0xb4>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004c82:	4b12      	ldr	r3, [pc, #72]	; (8004ccc <prvHeapInit+0xb4>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2200      	movs	r2, #0
 8004c88:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	1ad2      	subs	r2, r2, r3
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004c98:	4b0c      	ldr	r3, [pc, #48]	; (8004ccc <prvHeapInit+0xb4>)
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	4a0a      	ldr	r2, [pc, #40]	; (8004cd0 <prvHeapInit+0xb8>)
 8004ca6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	4a09      	ldr	r2, [pc, #36]	; (8004cd4 <prvHeapInit+0xbc>)
 8004cae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004cb0:	4b09      	ldr	r3, [pc, #36]	; (8004cd8 <prvHeapInit+0xc0>)
 8004cb2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004cb6:	601a      	str	r2, [r3, #0]
}
 8004cb8:	bf00      	nop
 8004cba:	3714      	adds	r7, #20
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bc80      	pop	{r7}
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	20000e08 	.word	0x20000e08
 8004cc8:	20001a08 	.word	0x20001a08
 8004ccc:	20001a10 	.word	0x20001a10
 8004cd0:	20001a18 	.word	0x20001a18
 8004cd4:	20001a14 	.word	0x20001a14
 8004cd8:	20001a1c 	.word	0x20001a1c

08004cdc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004ce4:	4b27      	ldr	r3, [pc, #156]	; (8004d84 <prvInsertBlockIntoFreeList+0xa8>)
 8004ce6:	60fb      	str	r3, [r7, #12]
 8004ce8:	e002      	b.n	8004cf0 <prvInsertBlockIntoFreeList+0x14>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	60fb      	str	r3, [r7, #12]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d8f7      	bhi.n	8004cea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	4413      	add	r3, r2
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d108      	bne.n	8004d1e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	685a      	ldr	r2, [r3, #4]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	441a      	add	r2, r3
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	68ba      	ldr	r2, [r7, #8]
 8004d28:	441a      	add	r2, r3
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d118      	bne.n	8004d64 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	4b14      	ldr	r3, [pc, #80]	; (8004d88 <prvInsertBlockIntoFreeList+0xac>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d00d      	beq.n	8004d5a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	441a      	add	r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	601a      	str	r2, [r3, #0]
 8004d58:	e008      	b.n	8004d6c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004d5a:	4b0b      	ldr	r3, [pc, #44]	; (8004d88 <prvInsertBlockIntoFreeList+0xac>)
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	601a      	str	r2, [r3, #0]
 8004d62:	e003      	b.n	8004d6c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d002      	beq.n	8004d7a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d7a:	bf00      	nop
 8004d7c:	3714      	adds	r7, #20
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bc80      	pop	{r7}
 8004d82:	4770      	bx	lr
 8004d84:	20001a08 	.word	0x20001a08
 8004d88:	20001a10 	.word	0x20001a10

08004d8c <memset>:
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	4402      	add	r2, r0
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d100      	bne.n	8004d96 <memset+0xa>
 8004d94:	4770      	bx	lr
 8004d96:	f803 1b01 	strb.w	r1, [r3], #1
 8004d9a:	e7f9      	b.n	8004d90 <memset+0x4>

08004d9c <__libc_init_array>:
 8004d9c:	b570      	push	{r4, r5, r6, lr}
 8004d9e:	2600      	movs	r6, #0
 8004da0:	4d0c      	ldr	r5, [pc, #48]	; (8004dd4 <__libc_init_array+0x38>)
 8004da2:	4c0d      	ldr	r4, [pc, #52]	; (8004dd8 <__libc_init_array+0x3c>)
 8004da4:	1b64      	subs	r4, r4, r5
 8004da6:	10a4      	asrs	r4, r4, #2
 8004da8:	42a6      	cmp	r6, r4
 8004daa:	d109      	bne.n	8004dc0 <__libc_init_array+0x24>
 8004dac:	f000 f828 	bl	8004e00 <_init>
 8004db0:	2600      	movs	r6, #0
 8004db2:	4d0a      	ldr	r5, [pc, #40]	; (8004ddc <__libc_init_array+0x40>)
 8004db4:	4c0a      	ldr	r4, [pc, #40]	; (8004de0 <__libc_init_array+0x44>)
 8004db6:	1b64      	subs	r4, r4, r5
 8004db8:	10a4      	asrs	r4, r4, #2
 8004dba:	42a6      	cmp	r6, r4
 8004dbc:	d105      	bne.n	8004dca <__libc_init_array+0x2e>
 8004dbe:	bd70      	pop	{r4, r5, r6, pc}
 8004dc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dc4:	4798      	blx	r3
 8004dc6:	3601      	adds	r6, #1
 8004dc8:	e7ee      	b.n	8004da8 <__libc_init_array+0xc>
 8004dca:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dce:	4798      	blx	r3
 8004dd0:	3601      	adds	r6, #1
 8004dd2:	e7f2      	b.n	8004dba <__libc_init_array+0x1e>
 8004dd4:	08004f20 	.word	0x08004f20
 8004dd8:	08004f20 	.word	0x08004f20
 8004ddc:	08004f20 	.word	0x08004f20
 8004de0:	08004f24 	.word	0x08004f24

08004de4 <memcpy>:
 8004de4:	440a      	add	r2, r1
 8004de6:	4291      	cmp	r1, r2
 8004de8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004dec:	d100      	bne.n	8004df0 <memcpy+0xc>
 8004dee:	4770      	bx	lr
 8004df0:	b510      	push	{r4, lr}
 8004df2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004df6:	4291      	cmp	r1, r2
 8004df8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004dfc:	d1f9      	bne.n	8004df2 <memcpy+0xe>
 8004dfe:	bd10      	pop	{r4, pc}

08004e00 <_init>:
 8004e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e02:	bf00      	nop
 8004e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e06:	bc08      	pop	{r3}
 8004e08:	469e      	mov	lr, r3
 8004e0a:	4770      	bx	lr

08004e0c <_fini>:
 8004e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e0e:	bf00      	nop
 8004e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e12:	bc08      	pop	{r3}
 8004e14:	469e      	mov	lr, r3
 8004e16:	4770      	bx	lr
