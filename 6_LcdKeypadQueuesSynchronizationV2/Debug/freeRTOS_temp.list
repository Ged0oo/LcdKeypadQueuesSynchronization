
freeRTOS_temp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d68  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08004e78  08004e78  00014e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fb0  08004fb0  000200a8  2**0
                  CONTENTS
  4 .ARM          00000000  08004fb0  08004fb0  000200a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004fb0  08004fb0  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fb0  08004fb0  00014fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fb4  08004fb4  00014fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08004fb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001980  200000a8  08005060  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a28  08005060  00021a28  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d24e  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002853  00000000  00000000  0002d362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c40  00000000  00000000  0002fbb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000092d  00000000  00000000  000307f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018093  00000000  00000000  00031125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dde8  00000000  00000000  000491b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a29a  00000000  00000000  00056fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002f90  00000000  00000000  000e123c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000e41cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000a8 	.word	0x200000a8
 800012c:	00000000 	.word	0x00000000
 8000130:	08004e60 	.word	0x08004e60

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000ac 	.word	0x200000ac
 800014c:	08004e60 	.word	0x08004e60

08000150 <MGPIO_voidInitPortPin>:

static void MGPIO_voidConfgPin_Mode(GPIO_t *GPIOx , uint8_t Copy_u8Pin , uint8_t Copy_u8Mode);


void MGPIO_voidInitPortPin(GPIO_ConfigType *_gpio)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b084      	sub	sp, #16
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
	uint8_t Copy_u8Pin  = _gpio->GPIO_PinNumber;
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	791b      	ldrb	r3, [r3, #4]
 800015c:	73fb      	strb	r3, [r7, #15]
	uint8_t Copy_u8Mode = _gpio->GPIO_PinMode;
 800015e:	687b      	ldr	r3, [r7, #4]
 8000160:	795b      	ldrb	r3, [r3, #5]
 8000162:	73bb      	strb	r3, [r7, #14]
	if(Copy_u8Pin > 15)
 8000164:	7bfb      	ldrb	r3, [r7, #15]
 8000166:	2b0f      	cmp	r3, #15
 8000168:	d80d      	bhi.n	8000186 <MGPIO_voidInitPortPin+0x36>
	{
		return;
	}
	MGPIO_voidConfgPin_Mode(_gpio->GPIOx , Copy_u8Pin , Copy_u8Mode);
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	681b      	ldr	r3, [r3, #0]
 800016e:	7bba      	ldrb	r2, [r7, #14]
 8000170:	7bf9      	ldrb	r1, [r7, #15]
 8000172:	4618      	mov	r0, r3
 8000174:	f000 f80b 	bl	800018e <MGPIO_voidConfgPin_Mode>
	MGPIO_voidWritePortPin(_gpio , _gpio->GPIO_Logic);
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	799b      	ldrb	r3, [r3, #6]
 800017c:	4619      	mov	r1, r3
 800017e:	6878      	ldr	r0, [r7, #4]
 8000180:	f000 f84a 	bl	8000218 <MGPIO_voidWritePortPin>
 8000184:	e000      	b.n	8000188 <MGPIO_voidInitPortPin+0x38>
		return;
 8000186:	bf00      	nop
}
 8000188:	3710      	adds	r7, #16
 800018a:	46bd      	mov	sp, r7
 800018c:	bd80      	pop	{r7, pc}

0800018e <MGPIO_voidConfgPin_Mode>:


static void MGPIO_voidConfgPin_Mode(GPIO_t *GPIOx , uint8_t Copy_u8Pin , uint8_t Copy_u8Mode)
{
 800018e:	b480      	push	{r7}
 8000190:	b083      	sub	sp, #12
 8000192:	af00      	add	r7, sp, #0
 8000194:	6078      	str	r0, [r7, #4]
 8000196:	460b      	mov	r3, r1
 8000198:	70fb      	strb	r3, [r7, #3]
 800019a:	4613      	mov	r3, r2
 800019c:	70bb      	strb	r3, [r7, #2]
	if(Copy_u8Pin > 15)
 800019e:	78fb      	ldrb	r3, [r7, #3]
 80001a0:	2b0f      	cmp	r3, #15
 80001a2:	d834      	bhi.n	800020e <MGPIO_voidConfgPin_Mode+0x80>
	{
		return;
	}

	if (Copy_u8Pin <= 7)
 80001a4:	78fb      	ldrb	r3, [r7, #3]
 80001a6:	2b07      	cmp	r3, #7
 80001a8:	d815      	bhi.n	80001d6 <MGPIO_voidConfgPin_Mode+0x48>
	{
		/* clear bits */
		GPIOx->CRL &= ~(0xF << Copy_u8Pin*4); /* multiplied *4 because every pin uses 4 bits*/
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	78fa      	ldrb	r2, [r7, #3]
 80001b0:	0092      	lsls	r2, r2, #2
 80001b2:	210f      	movs	r1, #15
 80001b4:	fa01 f202 	lsl.w	r2, r1, r2
 80001b8:	43d2      	mvns	r2, r2
 80001ba:	401a      	ands	r2, r3
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	601a      	str	r2, [r3, #0]
		
		/*Assign needed mode*/
		GPIOx->CRL |= (Copy_u8Mode << Copy_u8Pin*4);
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	78b9      	ldrb	r1, [r7, #2]
 80001c6:	78fa      	ldrb	r2, [r7, #3]
 80001c8:	0092      	lsls	r2, r2, #2
 80001ca:	fa01 f202 	lsl.w	r2, r1, r2
 80001ce:	431a      	orrs	r2, r3
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	601a      	str	r2, [r3, #0]
 80001d4:	e01c      	b.n	8000210 <MGPIO_voidConfgPin_Mode+0x82>
	}
	else if(Copy_u8Pin <= 15)
 80001d6:	78fb      	ldrb	r3, [r7, #3]
 80001d8:	2b0f      	cmp	r3, #15
 80001da:	d819      	bhi.n	8000210 <MGPIO_voidConfgPin_Mode+0x82>
	{
		//return pin index to be from p0 to p7
		Copy_u8Pin = Copy_u8Pin - 8;
 80001dc:	78fb      	ldrb	r3, [r7, #3]
 80001de:	3b08      	subs	r3, #8
 80001e0:	70fb      	strb	r3, [r7, #3]
		
		/*clear bits*/
		GPIOx->CRH &= ~(0xF << Copy_u8Pin*4);
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	685b      	ldr	r3, [r3, #4]
 80001e6:	78fa      	ldrb	r2, [r7, #3]
 80001e8:	0092      	lsls	r2, r2, #2
 80001ea:	210f      	movs	r1, #15
 80001ec:	fa01 f202 	lsl.w	r2, r1, r2
 80001f0:	43d2      	mvns	r2, r2
 80001f2:	401a      	ands	r2, r3
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	605a      	str	r2, [r3, #4]
		
		/*Assign needed mode*/
		GPIOx->CRH |= (Copy_u8Mode << Copy_u8Pin*4);
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	685b      	ldr	r3, [r3, #4]
 80001fc:	78b9      	ldrb	r1, [r7, #2]
 80001fe:	78fa      	ldrb	r2, [r7, #3]
 8000200:	0092      	lsls	r2, r2, #2
 8000202:	fa01 f202 	lsl.w	r2, r1, r2
 8000206:	431a      	orrs	r2, r3
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	605a      	str	r2, [r3, #4]
 800020c:	e000      	b.n	8000210 <MGPIO_voidConfgPin_Mode+0x82>
		return;
 800020e:	bf00      	nop
	}
}
 8000210:	370c      	adds	r7, #12
 8000212:	46bd      	mov	sp, r7
 8000214:	bc80      	pop	{r7}
 8000216:	4770      	bx	lr

08000218 <MGPIO_voidWritePortPin>:



void MGPIO_voidWritePortPin(GPIO_ConfigType *_gpio , uint8_t Copy_u8Val)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	460b      	mov	r3, r1
 8000222:	70fb      	strb	r3, [r7, #3]
	if(_gpio->GPIO_PinNumber > 15)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	791b      	ldrb	r3, [r3, #4]
 8000228:	2b0f      	cmp	r3, #15
 800022a:	d816      	bhi.n	800025a <MGPIO_voidWritePortPin+0x42>
	{
		return;
	}

	if(Copy_u8Val == GPIO_HIGH)
 800022c:	78fb      	ldrb	r3, [r7, #3]
 800022e:	2b01      	cmp	r3, #1
 8000230:	d109      	bne.n	8000246 <MGPIO_voidWritePortPin+0x2e>
	{
		_gpio->GPIOx->BSRR = 1 << (_gpio->GPIO_PinNumber);
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	791b      	ldrb	r3, [r3, #4]
 8000236:	461a      	mov	r2, r3
 8000238:	2301      	movs	r3, #1
 800023a:	fa03 f202 	lsl.w	r2, r3, r2
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	611a      	str	r2, [r3, #16]
 8000244:	e00a      	b.n	800025c <MGPIO_voidWritePortPin+0x44>
	}
	else
	{
		_gpio->GPIOx->BRR  = 1 << (_gpio->GPIO_PinNumber);
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	791b      	ldrb	r3, [r3, #4]
 800024a:	461a      	mov	r2, r3
 800024c:	2301      	movs	r3, #1
 800024e:	fa03 f202 	lsl.w	r2, r3, r2
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	615a      	str	r2, [r3, #20]
 8000258:	e000      	b.n	800025c <MGPIO_voidWritePortPin+0x44>
		return;
 800025a:	bf00      	nop
	}
}
 800025c:	370c      	adds	r7, #12
 800025e:	46bd      	mov	sp, r7
 8000260:	bc80      	pop	{r7}
 8000262:	4770      	bx	lr

08000264 <MGPIO_u8ReadPortPin>:


uint8_t MGPIO_u8ReadPortPin(GPIO_ConfigType *_gpio)
{
 8000264:	b480      	push	{r7}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
	if(_gpio->GPIO_PinNumber > 15)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	791b      	ldrb	r3, [r3, #4]
 8000270:	2b0f      	cmp	r3, #15
 8000272:	d901      	bls.n	8000278 <MGPIO_u8ReadPortPin+0x14>
	{
		return 0;
 8000274:	2300      	movs	r3, #0
 8000276:	e009      	b.n	800028c <MGPIO_u8ReadPortPin+0x28>
	}

	return GET_BIT(_gpio->GPIOx->IDR , _gpio->GPIO_PinNumber);
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	689b      	ldr	r3, [r3, #8]
 800027e:	687a      	ldr	r2, [r7, #4]
 8000280:	7912      	ldrb	r2, [r2, #4]
 8000282:	40d3      	lsrs	r3, r2
 8000284:	b2db      	uxtb	r3, r3
 8000286:	f003 0301 	and.w	r3, r3, #1
 800028a:	b2db      	uxtb	r3, r3
}
 800028c:	4618      	mov	r0, r3
 800028e:	370c      	adds	r7, #12
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr

08000296 <keypad_initialize>:
};



void keypad_initialize(ST_Keypad_t *_keypad_obj)
{
 8000296:	b580      	push	{r7, lr}
 8000298:	b084      	sub	sp, #16
 800029a:	af00      	add	r7, sp, #0
 800029c:	6078      	str	r0, [r7, #4]
    uint8_t rows_counter = 0;
 800029e:	2300      	movs	r3, #0
 80002a0:	73fb      	strb	r3, [r7, #15]
    uint8_t columns_counter = 0;
 80002a2:	2300      	movs	r3, #0
 80002a4:	73bb      	strb	r3, [r7, #14]

	if(NULL == _keypad_obj) return;
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d034      	beq.n	8000316 <keypad_initialize+0x80>
	else
	{
		for(rows_counter=0 ; rows_counter<KEYPAD_ROWS ; rows_counter++)
 80002ac:	2300      	movs	r3, #0
 80002ae:	73fb      	strb	r3, [r7, #15]
 80002b0:	e015      	b.n	80002de <keypad_initialize+0x48>
		{
			_keypad_obj->row_pin[rows_counter].GPIO_PinMode = GPIO_OUT;
 80002b2:	7bfb      	ldrb	r3, [r7, #15]
 80002b4:	687a      	ldr	r2, [r7, #4]
 80002b6:	00db      	lsls	r3, r3, #3
 80002b8:	4413      	add	r3, r2
 80002ba:	2201      	movs	r2, #1
 80002bc:	715a      	strb	r2, [r3, #5]
			_keypad_obj->row_pin[rows_counter].GPIO_Logic = GPIO_LOW;
 80002be:	7bfb      	ldrb	r3, [r7, #15]
 80002c0:	687a      	ldr	r2, [r7, #4]
 80002c2:	00db      	lsls	r3, r3, #3
 80002c4:	4413      	add	r3, r2
 80002c6:	2200      	movs	r2, #0
 80002c8:	719a      	strb	r2, [r3, #6]
			MGPIO_voidInitPortPin(&(_keypad_obj->row_pin[rows_counter]));
 80002ca:	7bfb      	ldrb	r3, [r7, #15]
 80002cc:	00db      	lsls	r3, r3, #3
 80002ce:	687a      	ldr	r2, [r7, #4]
 80002d0:	4413      	add	r3, r2
 80002d2:	4618      	mov	r0, r3
 80002d4:	f7ff ff3c 	bl	8000150 <MGPIO_voidInitPortPin>
		for(rows_counter=0 ; rows_counter<KEYPAD_ROWS ; rows_counter++)
 80002d8:	7bfb      	ldrb	r3, [r7, #15]
 80002da:	3301      	adds	r3, #1
 80002dc:	73fb      	strb	r3, [r7, #15]
 80002de:	7bfb      	ldrb	r3, [r7, #15]
 80002e0:	2b03      	cmp	r3, #3
 80002e2:	d9e6      	bls.n	80002b2 <keypad_initialize+0x1c>
		}
		for(columns_counter=0 ; columns_counter<KEYPAD_COLUMNS ; columns_counter++)
 80002e4:	2300      	movs	r3, #0
 80002e6:	73bb      	strb	r3, [r7, #14]
 80002e8:	e011      	b.n	800030e <keypad_initialize+0x78>
		{
			_keypad_obj->column_pin[columns_counter].GPIO_PinMode = GPIO_IN;
 80002ea:	7bbb      	ldrb	r3, [r7, #14]
 80002ec:	687a      	ldr	r2, [r7, #4]
 80002ee:	3304      	adds	r3, #4
 80002f0:	00db      	lsls	r3, r3, #3
 80002f2:	4413      	add	r3, r2
 80002f4:	2208      	movs	r2, #8
 80002f6:	715a      	strb	r2, [r3, #5]
			MGPIO_voidInitPortPin(&(_keypad_obj->column_pin[columns_counter]));
 80002f8:	7bbb      	ldrb	r3, [r7, #14]
 80002fa:	3304      	adds	r3, #4
 80002fc:	00db      	lsls	r3, r3, #3
 80002fe:	687a      	ldr	r2, [r7, #4]
 8000300:	4413      	add	r3, r2
 8000302:	4618      	mov	r0, r3
 8000304:	f7ff ff24 	bl	8000150 <MGPIO_voidInitPortPin>
		for(columns_counter=0 ; columns_counter<KEYPAD_COLUMNS ; columns_counter++)
 8000308:	7bbb      	ldrb	r3, [r7, #14]
 800030a:	3301      	adds	r3, #1
 800030c:	73bb      	strb	r3, [r7, #14]
 800030e:	7bbb      	ldrb	r3, [r7, #14]
 8000310:	2b03      	cmp	r3, #3
 8000312:	d9ea      	bls.n	80002ea <keypad_initialize+0x54>
 8000314:	e000      	b.n	8000318 <keypad_initialize+0x82>
	if(NULL == _keypad_obj) return;
 8000316:	bf00      	nop
		}
	}
}
 8000318:	3710      	adds	r7, #16
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
	...

08000320 <read_keypad>:


char read_keypad (ST_Keypad_t *_keypad_obj)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b084      	sub	sp, #16
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
	uint8_t value = NOTPRESSED;
 8000328:	23ff      	movs	r3, #255	; 0xff
 800032a:	73fb      	strb	r3, [r7, #15]
	for(uint8_t rows_counter=0 ; rows_counter<KEYPAD_ROWS ; rows_counter++)
 800032c:	2300      	movs	r3, #0
 800032e:	73bb      	strb	r3, [r7, #14]
 8000330:	e043      	b.n	80003ba <read_keypad+0x9a>
	{
		for(uint8_t counter=0 ; counter<KEYPAD_ROWS ; counter++)
 8000332:	2300      	movs	r3, #0
 8000334:	737b      	strb	r3, [r7, #13]
 8000336:	e00a      	b.n	800034e <read_keypad+0x2e>
		{
			MGPIO_voidWritePortPin(&(_keypad_obj->row_pin[counter]), GPIO_HIGH);
 8000338:	7b7b      	ldrb	r3, [r7, #13]
 800033a:	00db      	lsls	r3, r3, #3
 800033c:	687a      	ldr	r2, [r7, #4]
 800033e:	4413      	add	r3, r2
 8000340:	2101      	movs	r1, #1
 8000342:	4618      	mov	r0, r3
 8000344:	f7ff ff68 	bl	8000218 <MGPIO_voidWritePortPin>
		for(uint8_t counter=0 ; counter<KEYPAD_ROWS ; counter++)
 8000348:	7b7b      	ldrb	r3, [r7, #13]
 800034a:	3301      	adds	r3, #1
 800034c:	737b      	strb	r3, [r7, #13]
 800034e:	7b7b      	ldrb	r3, [r7, #13]
 8000350:	2b03      	cmp	r3, #3
 8000352:	d9f1      	bls.n	8000338 <read_keypad+0x18>
		}

		MGPIO_voidWritePortPin(&(_keypad_obj->row_pin[rows_counter]), GPIO_LOW);
 8000354:	7bbb      	ldrb	r3, [r7, #14]
 8000356:	00db      	lsls	r3, r3, #3
 8000358:	687a      	ldr	r2, [r7, #4]
 800035a:	4413      	add	r3, r2
 800035c:	2100      	movs	r1, #0
 800035e:	4618      	mov	r0, r3
 8000360:	f7ff ff5a 	bl	8000218 <MGPIO_voidWritePortPin>

		for(uint8_t columns_counter=0 ; columns_counter<KEYPAD_COLUMNS ; columns_counter++)
 8000364:	2300      	movs	r3, #0
 8000366:	733b      	strb	r3, [r7, #12]
 8000368:	e021      	b.n	80003ae <read_keypad+0x8e>
		{
			if( GPIO_LOW == MGPIO_u8ReadPortPin(&(_keypad_obj->column_pin[columns_counter])))
 800036a:	7b3b      	ldrb	r3, [r7, #12]
 800036c:	3304      	adds	r3, #4
 800036e:	00db      	lsls	r3, r3, #3
 8000370:	687a      	ldr	r2, [r7, #4]
 8000372:	4413      	add	r3, r2
 8000374:	4618      	mov	r0, r3
 8000376:	f7ff ff75 	bl	8000264 <MGPIO_u8ReadPortPin>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d113      	bne.n	80003a8 <read_keypad+0x88>
			{
				while (GPIO_LOW == MGPIO_u8ReadPortPin(&(_keypad_obj->column_pin[columns_counter])));
 8000380:	bf00      	nop
 8000382:	7b3b      	ldrb	r3, [r7, #12]
 8000384:	3304      	adds	r3, #4
 8000386:	00db      	lsls	r3, r3, #3
 8000388:	687a      	ldr	r2, [r7, #4]
 800038a:	4413      	add	r3, r2
 800038c:	4618      	mov	r0, r3
 800038e:	f7ff ff69 	bl	8000264 <MGPIO_u8ReadPortPin>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d0f4      	beq.n	8000382 <read_keypad+0x62>
				value = btn_values[rows_counter][columns_counter];
 8000398:	7bba      	ldrb	r2, [r7, #14]
 800039a:	7b3b      	ldrb	r3, [r7, #12]
 800039c:	490b      	ldr	r1, [pc, #44]	; (80003cc <read_keypad+0xac>)
 800039e:	0092      	lsls	r2, r2, #2
 80003a0:	440a      	add	r2, r1
 80003a2:	4413      	add	r3, r2
 80003a4:	781b      	ldrb	r3, [r3, #0]
 80003a6:	73fb      	strb	r3, [r7, #15]
		for(uint8_t columns_counter=0 ; columns_counter<KEYPAD_COLUMNS ; columns_counter++)
 80003a8:	7b3b      	ldrb	r3, [r7, #12]
 80003aa:	3301      	adds	r3, #1
 80003ac:	733b      	strb	r3, [r7, #12]
 80003ae:	7b3b      	ldrb	r3, [r7, #12]
 80003b0:	2b03      	cmp	r3, #3
 80003b2:	d9da      	bls.n	800036a <read_keypad+0x4a>
	for(uint8_t rows_counter=0 ; rows_counter<KEYPAD_ROWS ; rows_counter++)
 80003b4:	7bbb      	ldrb	r3, [r7, #14]
 80003b6:	3301      	adds	r3, #1
 80003b8:	73bb      	strb	r3, [r7, #14]
 80003ba:	7bbb      	ldrb	r3, [r7, #14]
 80003bc:	2b03      	cmp	r3, #3
 80003be:	d9b8      	bls.n	8000332 <read_keypad+0x12>
			}
		}
	}
	return value;
 80003c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80003c2:	4618      	mov	r0, r3
 80003c4:	3710      	adds	r7, #16
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	08004ef4 	.word	0x08004ef4

080003d0 <lcd_4bit_intialize>:
};



void lcd_4bit_intialize(chr_lcd_4bit_t *lcd)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b084      	sub	sp, #16
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
	uint8_t l_data_pins_counter = 0;
 80003d8:	2300      	movs	r3, #0
 80003da:	73fb      	strb	r3, [r7, #15]
	if(NULL == lcd)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d05e      	beq.n	80004a0 <lcd_4bit_intialize+0xd0>
	{
		return;
	}
	else
	{
		lcd->lcd_rs.GPIO_PinMode = GPIO_PIN_GENERAL_PURPOSE_OUTPUT_PUSHPULL_MODE_2MHZ;
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	2202      	movs	r2, #2
 80003e6:	715a      	strb	r2, [r3, #5]
		lcd->lcd_rw.GPIO_PinMode = GPIO_PIN_GENERAL_PURPOSE_OUTPUT_PUSHPULL_MODE_2MHZ;
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	2202      	movs	r2, #2
 80003ec:	735a      	strb	r2, [r3, #13]
		lcd->lcd_en.GPIO_PinMode = GPIO_PIN_GENERAL_PURPOSE_OUTPUT_PUSHPULL_MODE_2MHZ;
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	2202      	movs	r2, #2
 80003f2:	755a      	strb	r2, [r3, #21]

		lcd->lcd_rs.GPIO_Logic = GPIO_LOW;
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	2200      	movs	r2, #0
 80003f8:	719a      	strb	r2, [r3, #6]
		lcd->lcd_rw.GPIO_Logic = GPIO_LOW;
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	2200      	movs	r2, #0
 80003fe:	739a      	strb	r2, [r3, #14]
		lcd->lcd_en.GPIO_Logic = GPIO_LOW;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	2200      	movs	r2, #0
 8000404:	759a      	strb	r2, [r3, #22]

		MGPIO_voidInitPortPin(&(lcd->lcd_rs));
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	4618      	mov	r0, r3
 800040a:	f7ff fea1 	bl	8000150 <MGPIO_voidInitPortPin>
		MGPIO_voidInitPortPin(&(lcd->lcd_rw));
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	3308      	adds	r3, #8
 8000412:	4618      	mov	r0, r3
 8000414:	f7ff fe9c 	bl	8000150 <MGPIO_voidInitPortPin>
		MGPIO_voidInitPortPin(&(lcd->lcd_en));
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	3310      	adds	r3, #16
 800041c:	4618      	mov	r0, r3
 800041e:	f7ff fe97 	bl	8000150 <MGPIO_voidInitPortPin>

		for(l_data_pins_counter=0 ; l_data_pins_counter<4 ; l_data_pins_counter++)
 8000422:	2300      	movs	r3, #0
 8000424:	73fb      	strb	r3, [r7, #15]
 8000426:	e018      	b.n	800045a <lcd_4bit_intialize+0x8a>
		{
			lcd->lcd_data[l_data_pins_counter].GPIO_PinMode = GPIO_PIN_GENERAL_PURPOSE_OUTPUT_PUSHPULL_MODE_2MHZ;
 8000428:	7bfb      	ldrb	r3, [r7, #15]
 800042a:	687a      	ldr	r2, [r7, #4]
 800042c:	3303      	adds	r3, #3
 800042e:	00db      	lsls	r3, r3, #3
 8000430:	4413      	add	r3, r2
 8000432:	2202      	movs	r2, #2
 8000434:	715a      	strb	r2, [r3, #5]
			lcd->lcd_data[l_data_pins_counter].GPIO_Logic = GPIO_LOW;
 8000436:	7bfb      	ldrb	r3, [r7, #15]
 8000438:	687a      	ldr	r2, [r7, #4]
 800043a:	3303      	adds	r3, #3
 800043c:	00db      	lsls	r3, r3, #3
 800043e:	4413      	add	r3, r2
 8000440:	2200      	movs	r2, #0
 8000442:	719a      	strb	r2, [r3, #6]
			MGPIO_voidInitPortPin(&(lcd->lcd_data[l_data_pins_counter]));
 8000444:	7bfb      	ldrb	r3, [r7, #15]
 8000446:	3303      	adds	r3, #3
 8000448:	00db      	lsls	r3, r3, #3
 800044a:	687a      	ldr	r2, [r7, #4]
 800044c:	4413      	add	r3, r2
 800044e:	4618      	mov	r0, r3
 8000450:	f7ff fe7e 	bl	8000150 <MGPIO_voidInitPortPin>
		for(l_data_pins_counter=0 ; l_data_pins_counter<4 ; l_data_pins_counter++)
 8000454:	7bfb      	ldrb	r3, [r7, #15]
 8000456:	3301      	adds	r3, #1
 8000458:	73fb      	strb	r3, [r7, #15]
 800045a:	7bfb      	ldrb	r3, [r7, #15]
 800045c:	2b03      	cmp	r3, #3
 800045e:	d9e3      	bls.n	8000428 <lcd_4bit_intialize+0x58>
		}

		HAL_Delay(20);
 8000460:	2014      	movs	r0, #20
 8000462:	f000 fd57 	bl	8000f14 <HAL_Delay>
		lcd_4bit_send_command(lcd, 0x33);
 8000466:	2133      	movs	r1, #51	; 0x33
 8000468:	6878      	ldr	r0, [r7, #4]
 800046a:	f000 f81d 	bl	80004a8 <lcd_4bit_send_command>
		lcd_4bit_send_command(lcd, 0x32);
 800046e:	2132      	movs	r1, #50	; 0x32
 8000470:	6878      	ldr	r0, [r7, #4]
 8000472:	f000 f819 	bl	80004a8 <lcd_4bit_send_command>
		lcd_4bit_send_command(lcd, _LCD_4BIT_MODE_2_LINE);
 8000476:	2128      	movs	r1, #40	; 0x28
 8000478:	6878      	ldr	r0, [r7, #4]
 800047a:	f000 f815 	bl	80004a8 <lcd_4bit_send_command>
		lcd_4bit_send_command(lcd, _LCD_DISPLAY_ON_UNDERLINE_OFF_CURSOR_OFF);
 800047e:	210c      	movs	r1, #12
 8000480:	6878      	ldr	r0, [r7, #4]
 8000482:	f000 f811 	bl	80004a8 <lcd_4bit_send_command>
		lcd_4bit_send_command(lcd, _LCD_ENTRY_MODE_INC_SHIFT_OFF);
 8000486:	2106      	movs	r1, #6
 8000488:	6878      	ldr	r0, [r7, #4]
 800048a:	f000 f80d 	bl	80004a8 <lcd_4bit_send_command>
		lcd_4bit_send_command(lcd, _LCD_DDRAM_START);
 800048e:	2180      	movs	r1, #128	; 0x80
 8000490:	6878      	ldr	r0, [r7, #4]
 8000492:	f000 f809 	bl	80004a8 <lcd_4bit_send_command>
		lcd_4bit_send_command(lcd, _LCD_CLEAR);
 8000496:	2101      	movs	r1, #1
 8000498:	6878      	ldr	r0, [r7, #4]
 800049a:	f000 f805 	bl	80004a8 <lcd_4bit_send_command>
 800049e:	e000      	b.n	80004a2 <lcd_4bit_intialize+0xd2>
		return;
 80004a0:	bf00      	nop
	}
}
 80004a2:	3710      	adds	r7, #16
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}

080004a8 <lcd_4bit_send_command>:

void lcd_4bit_send_command(chr_lcd_4bit_t *lcd, uint8_t command)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
 80004b0:	460b      	mov	r3, r1
 80004b2:	70fb      	strb	r3, [r7, #3]
	if(NULL == lcd)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d01d      	beq.n	80004f6 <lcd_4bit_send_command+0x4e>
	{
		return;
	}
	else
	{
		MGPIO_voidWritePortPin(&(lcd->lcd_rs), GPIO_LOW);
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	2100      	movs	r1, #0
 80004be:	4618      	mov	r0, r3
 80004c0:	f7ff feaa 	bl	8000218 <MGPIO_voidWritePortPin>
		MGPIO_voidWritePortPin(&(lcd->lcd_rw), GPIO_LOW);
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	3308      	adds	r3, #8
 80004c8:	2100      	movs	r1, #0
 80004ca:	4618      	mov	r0, r3
 80004cc:	f7ff fea4 	bl	8000218 <MGPIO_voidWritePortPin>
		lcd_send_4bits(lcd, command >> 4);
 80004d0:	78fb      	ldrb	r3, [r7, #3]
 80004d2:	091b      	lsrs	r3, r3, #4
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	4619      	mov	r1, r3
 80004d8:	6878      	ldr	r0, [r7, #4]
 80004da:	f000 f87f 	bl	80005dc <lcd_send_4bits>
		lcd_4bit_send_enable_signal(lcd);
 80004de:	6878      	ldr	r0, [r7, #4]
 80004e0:	f000 f8b8 	bl	8000654 <lcd_4bit_send_enable_signal>
		lcd_send_4bits(lcd, command);
 80004e4:	78fb      	ldrb	r3, [r7, #3]
 80004e6:	4619      	mov	r1, r3
 80004e8:	6878      	ldr	r0, [r7, #4]
 80004ea:	f000 f877 	bl	80005dc <lcd_send_4bits>
		lcd_4bit_send_enable_signal(lcd);
 80004ee:	6878      	ldr	r0, [r7, #4]
 80004f0:	f000 f8b0 	bl	8000654 <lcd_4bit_send_enable_signal>
 80004f4:	e000      	b.n	80004f8 <lcd_4bit_send_command+0x50>
		return;
 80004f6:	bf00      	nop
	}
}
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}

080004fe <lcd_4bit_send_char_data>:
		lcd_4bit_send_char_data_pos(lcd, row, column, mem_pos);
	}
}

void lcd_4bit_send_char_data(chr_lcd_4bit_t *lcd, uint8_t data)
{
 80004fe:	b580      	push	{r7, lr}
 8000500:	b082      	sub	sp, #8
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
 8000506:	460b      	mov	r3, r1
 8000508:	70fb      	strb	r3, [r7, #3]
	if(NULL == lcd)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d01d      	beq.n	800054c <lcd_4bit_send_char_data+0x4e>
	{
		return;
	}
	else
	{
		MGPIO_voidWritePortPin(&(lcd->lcd_rs), GPIO_HIGH);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	2101      	movs	r1, #1
 8000514:	4618      	mov	r0, r3
 8000516:	f7ff fe7f 	bl	8000218 <MGPIO_voidWritePortPin>
		MGPIO_voidWritePortPin(&(lcd->lcd_rw), GPIO_LOW);
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	3308      	adds	r3, #8
 800051e:	2100      	movs	r1, #0
 8000520:	4618      	mov	r0, r3
 8000522:	f7ff fe79 	bl	8000218 <MGPIO_voidWritePortPin>
		lcd_send_4bits(lcd, data >> 4);
 8000526:	78fb      	ldrb	r3, [r7, #3]
 8000528:	091b      	lsrs	r3, r3, #4
 800052a:	b2db      	uxtb	r3, r3
 800052c:	4619      	mov	r1, r3
 800052e:	6878      	ldr	r0, [r7, #4]
 8000530:	f000 f854 	bl	80005dc <lcd_send_4bits>
		lcd_4bit_send_enable_signal(lcd);
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	f000 f88d 	bl	8000654 <lcd_4bit_send_enable_signal>
		lcd_send_4bits(lcd, data);
 800053a:	78fb      	ldrb	r3, [r7, #3]
 800053c:	4619      	mov	r1, r3
 800053e:	6878      	ldr	r0, [r7, #4]
 8000540:	f000 f84c 	bl	80005dc <lcd_send_4bits>
		lcd_4bit_send_enable_signal(lcd);
 8000544:	6878      	ldr	r0, [r7, #4]
 8000546:	f000 f885 	bl	8000654 <lcd_4bit_send_enable_signal>
 800054a:	e000      	b.n	800054e <lcd_4bit_send_char_data+0x50>
		return;
 800054c:	bf00      	nop
	}
}
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}

08000554 <lcd_4bit_send_char_data_pos>:


void lcd_4bit_send_char_data_pos(chr_lcd_4bit_t *lcd,uint8_t row, uint8_t column, uint8_t data)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	4608      	mov	r0, r1
 800055e:	4611      	mov	r1, r2
 8000560:	461a      	mov	r2, r3
 8000562:	4603      	mov	r3, r0
 8000564:	70fb      	strb	r3, [r7, #3]
 8000566:	460b      	mov	r3, r1
 8000568:	70bb      	strb	r3, [r7, #2]
 800056a:	4613      	mov	r3, r2
 800056c:	707b      	strb	r3, [r7, #1]
	if(NULL == lcd)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d00b      	beq.n	800058c <lcd_4bit_send_char_data_pos+0x38>
	{
		return;
	}
	else
	{
		lcd_4bit_set_cursor(lcd, row, column);
 8000574:	78ba      	ldrb	r2, [r7, #2]
 8000576:	78fb      	ldrb	r3, [r7, #3]
 8000578:	4619      	mov	r1, r3
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f000 f892 	bl	80006a4 <lcd_4bit_set_cursor>
		lcd_4bit_send_char_data(lcd, data);
 8000580:	787b      	ldrb	r3, [r7, #1]
 8000582:	4619      	mov	r1, r3
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	f7ff ffba 	bl	80004fe <lcd_4bit_send_char_data>
 800058a:	e000      	b.n	800058e <lcd_4bit_send_char_data_pos+0x3a>
		return;
 800058c:	bf00      	nop
	}
}
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <lcd_4bit_send_string_pos>:
	}
}


void lcd_4bit_send_string_pos(chr_lcd_4bit_t *lcd, uint8_t row, uint8_t column, uint8_t *str)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	460b      	mov	r3, r1
 80005a0:	72fb      	strb	r3, [r7, #11]
 80005a2:	4613      	mov	r3, r2
 80005a4:	72bb      	strb	r3, [r7, #10]
	if(NULL == lcd)
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d013      	beq.n	80005d4 <lcd_4bit_send_string_pos+0x40>
	{
		return;
	}
	else
	{
		lcd_4bit_set_cursor(lcd, row, column);
 80005ac:	7aba      	ldrb	r2, [r7, #10]
 80005ae:	7afb      	ldrb	r3, [r7, #11]
 80005b0:	4619      	mov	r1, r3
 80005b2:	68f8      	ldr	r0, [r7, #12]
 80005b4:	f000 f876 	bl	80006a4 <lcd_4bit_set_cursor>
		while(*str)
 80005b8:	e007      	b.n	80005ca <lcd_4bit_send_string_pos+0x36>
		{
			lcd_4bit_send_char_data(lcd, *str++);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	1c5a      	adds	r2, r3, #1
 80005be:	607a      	str	r2, [r7, #4]
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	4619      	mov	r1, r3
 80005c4:	68f8      	ldr	r0, [r7, #12]
 80005c6:	f7ff ff9a 	bl	80004fe <lcd_4bit_send_char_data>
		while(*str)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d1f3      	bne.n	80005ba <lcd_4bit_send_string_pos+0x26>
 80005d2:	e000      	b.n	80005d6 <lcd_4bit_send_string_pos+0x42>
		return;
 80005d4:	bf00      	nop
		}
	}
}
 80005d6:	3710      	adds	r7, #16
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <lcd_send_4bits>:




static void lcd_send_4bits(chr_lcd_4bit_t *lcd, uint8_t _data_command)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	460b      	mov	r3, r1
 80005e6:	70fb      	strb	r3, [r7, #3]
	MGPIO_voidWritePortPin(&(lcd->lcd_data[0]), (_data_command >> 0) & (uint8_t)0x01);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	f103 0218 	add.w	r2, r3, #24
 80005ee:	78fb      	ldrb	r3, [r7, #3]
 80005f0:	f003 0301 	and.w	r3, r3, #1
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	4619      	mov	r1, r3
 80005f8:	4610      	mov	r0, r2
 80005fa:	f7ff fe0d 	bl	8000218 <MGPIO_voidWritePortPin>
	MGPIO_voidWritePortPin(&(lcd->lcd_data[1]), (_data_command >> 1) & (uint8_t)0x01);
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	f103 0220 	add.w	r2, r3, #32
 8000604:	78fb      	ldrb	r3, [r7, #3]
 8000606:	085b      	lsrs	r3, r3, #1
 8000608:	b2db      	uxtb	r3, r3
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	b2db      	uxtb	r3, r3
 8000610:	4619      	mov	r1, r3
 8000612:	4610      	mov	r0, r2
 8000614:	f7ff fe00 	bl	8000218 <MGPIO_voidWritePortPin>
	MGPIO_voidWritePortPin(&(lcd->lcd_data[2]), (_data_command >> 2) & (uint8_t)0x01);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800061e:	78fb      	ldrb	r3, [r7, #3]
 8000620:	089b      	lsrs	r3, r3, #2
 8000622:	b2db      	uxtb	r3, r3
 8000624:	f003 0301 	and.w	r3, r3, #1
 8000628:	b2db      	uxtb	r3, r3
 800062a:	4619      	mov	r1, r3
 800062c:	4610      	mov	r0, r2
 800062e:	f7ff fdf3 	bl	8000218 <MGPIO_voidWritePortPin>
	MGPIO_voidWritePortPin(&(lcd->lcd_data[3]), (_data_command >> 3) & (uint8_t)0x01);
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8000638:	78fb      	ldrb	r3, [r7, #3]
 800063a:	08db      	lsrs	r3, r3, #3
 800063c:	b2db      	uxtb	r3, r3
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	b2db      	uxtb	r3, r3
 8000644:	4619      	mov	r1, r3
 8000646:	4610      	mov	r0, r2
 8000648:	f7ff fde6 	bl	8000218 <MGPIO_voidWritePortPin>
}
 800064c:	bf00      	nop
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <lcd_4bit_send_enable_signal>:


static void lcd_4bit_send_enable_signal(chr_lcd_4bit_t *lcd)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	MGPIO_voidWritePortPin(&(lcd->lcd_en), GPIO_HIGH);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	3310      	adds	r3, #16
 8000660:	2101      	movs	r1, #1
 8000662:	4618      	mov	r0, r3
 8000664:	f7ff fdd8 	bl	8000218 <MGPIO_voidWritePortPin>
	//__delay_us(5);
	for(uint8_t i=0 ; i<10 ; i++);
 8000668:	2300      	movs	r3, #0
 800066a:	73fb      	strb	r3, [r7, #15]
 800066c:	e002      	b.n	8000674 <lcd_4bit_send_enable_signal+0x20>
 800066e:	7bfb      	ldrb	r3, [r7, #15]
 8000670:	3301      	adds	r3, #1
 8000672:	73fb      	strb	r3, [r7, #15]
 8000674:	7bfb      	ldrb	r3, [r7, #15]
 8000676:	2b09      	cmp	r3, #9
 8000678:	d9f9      	bls.n	800066e <lcd_4bit_send_enable_signal+0x1a>
	MGPIO_voidWritePortPin(&(lcd->lcd_en), GPIO_LOW);
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	3310      	adds	r3, #16
 800067e:	2100      	movs	r1, #0
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff fdc9 	bl	8000218 <MGPIO_voidWritePortPin>
	for(uint16_t i=0 ; i<2000 ; i++);
 8000686:	2300      	movs	r3, #0
 8000688:	81bb      	strh	r3, [r7, #12]
 800068a:	e002      	b.n	8000692 <lcd_4bit_send_enable_signal+0x3e>
 800068c:	89bb      	ldrh	r3, [r7, #12]
 800068e:	3301      	adds	r3, #1
 8000690:	81bb      	strh	r3, [r7, #12]
 8000692:	89bb      	ldrh	r3, [r7, #12]
 8000694:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000698:	d3f8      	bcc.n	800068c <lcd_4bit_send_enable_signal+0x38>
}
 800069a:	bf00      	nop
 800069c:	bf00      	nop
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <lcd_4bit_set_cursor>:


static void lcd_4bit_set_cursor(chr_lcd_4bit_t *lcd, uint8_t row, uint8_t coulmn)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	460b      	mov	r3, r1
 80006ae:	70fb      	strb	r3, [r7, #3]
 80006b0:	4613      	mov	r3, r2
 80006b2:	70bb      	strb	r3, [r7, #2]
    coulmn--;
 80006b4:	78bb      	ldrb	r3, [r7, #2]
 80006b6:	3b01      	subs	r3, #1
 80006b8:	70bb      	strb	r3, [r7, #2]
    switch(row)
 80006ba:	78fb      	ldrb	r3, [r7, #3]
 80006bc:	3b01      	subs	r3, #1
 80006be:	2b03      	cmp	r3, #3
 80006c0:	d82a      	bhi.n	8000718 <lcd_4bit_set_cursor+0x74>
 80006c2:	a201      	add	r2, pc, #4	; (adr r2, 80006c8 <lcd_4bit_set_cursor+0x24>)
 80006c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006c8:	080006d9 	.word	0x080006d9
 80006cc:	080006e9 	.word	0x080006e9
 80006d0:	080006f9 	.word	0x080006f9
 80006d4:	08000709 	.word	0x08000709
    {
        case ROW1 :
        	lcd_4bit_send_command(lcd, (0x80 + coulmn));
 80006d8:	78bb      	ldrb	r3, [r7, #2]
 80006da:	3b80      	subs	r3, #128	; 0x80
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	4619      	mov	r1, r3
 80006e0:	6878      	ldr	r0, [r7, #4]
 80006e2:	f7ff fee1 	bl	80004a8 <lcd_4bit_send_command>
        	break;
 80006e6:	e017      	b.n	8000718 <lcd_4bit_set_cursor+0x74>

        case ROW2 :
        	lcd_4bit_send_command(lcd, (0xc0 + coulmn));
 80006e8:	78bb      	ldrb	r3, [r7, #2]
 80006ea:	3b40      	subs	r3, #64	; 0x40
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	4619      	mov	r1, r3
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f7ff fed9 	bl	80004a8 <lcd_4bit_send_command>
        	break;
 80006f6:	e00f      	b.n	8000718 <lcd_4bit_set_cursor+0x74>

        case ROW3 :
        	lcd_4bit_send_command(lcd, (0x94 + coulmn));
 80006f8:	78bb      	ldrb	r3, [r7, #2]
 80006fa:	3b6c      	subs	r3, #108	; 0x6c
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	4619      	mov	r1, r3
 8000700:	6878      	ldr	r0, [r7, #4]
 8000702:	f7ff fed1 	bl	80004a8 <lcd_4bit_send_command>
        	break;
 8000706:	e007      	b.n	8000718 <lcd_4bit_set_cursor+0x74>

        case ROW4 :
        	lcd_4bit_send_command(lcd, (0xd4 + coulmn));
 8000708:	78bb      	ldrb	r3, [r7, #2]
 800070a:	3b2c      	subs	r3, #44	; 0x2c
 800070c:	b2db      	uxtb	r3, r3
 800070e:	4619      	mov	r1, r3
 8000710:	6878      	ldr	r0, [r7, #4]
 8000712:	f7ff fec9 	bl	80004a8 <lcd_4bit_send_command>
        	break;
 8000716:	bf00      	nop

        default : ;
    }
}
 8000718:	bf00      	nop
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}

08000720 <MRCC_voidClockInit>:
static void MRCC_voidClockSource(uint8_t Copy_u8xClock);
static void MRCC_voidPLL_Clock_Source(uint8_t Copy_u8xPLL_Source);


void MRCC_voidClockInit(RCC_Config_t *RCC_Config)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	if(NULL == RCC_Config)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d016      	beq.n	800075c <MRCC_voidClockInit+0x3c>
	{
		return;
	}
	else
	{
		MRCC_voidClockSource(RCC_Config->ClockSource);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	4618      	mov	r0, r3
 8000734:	f000 f852 	bl	80007dc <MRCC_voidClockSource>
		if(RCC_Config->ClockSource == RCC_PLL)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b02      	cmp	r3, #2
 800073e:	d109      	bne.n	8000754 <MRCC_voidClockInit+0x34>
		{
			MRCC_voidPLL_Clock_Source(RCC_Config->PLL_Config.PLL_Source);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	785b      	ldrb	r3, [r3, #1]
 8000744:	4618      	mov	r0, r3
 8000746:	f000 f8d9 	bl	80008fc <MRCC_voidPLL_Clock_Source>
			MRCC_voidPLL_Mul(RCC_Config->PLL_Config.PLL_Mul_Factor);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	789b      	ldrb	r3, [r3, #2]
 800074e:	4618      	mov	r0, r3
 8000750:	f000 f95a 	bl	8000a08 <MRCC_voidPLL_Mul>
		else if(RCC_Config->ClockSource == RCC_HSI)
		{
			/* HSI Trim function*/
		}
		/* Adjust Prescaler */
		MRCC_voidBus_Prescaler(RCC_Config);
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	f000 f96b 	bl	8000a30 <MRCC_voidBus_Prescaler>
 800075a:	e000      	b.n	800075e <MRCC_voidClockInit+0x3e>
		return;
 800075c:	bf00      	nop
	}
}
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <MRCC_voidPeripheralClockEnable>:


void MRCC_voidPeripheralClockEnable(uint8_t Copy_u8BusName, RCC_Peripheral_t Copy_u8PeripheralName)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	460a      	mov	r2, r1
 800076e:	71fb      	strb	r3, [r7, #7]
 8000770:	4613      	mov	r3, r2
 8000772:	71bb      	strb	r3, [r7, #6]
	switch(Copy_u8BusName)
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	2b02      	cmp	r3, #2
 8000778:	d01c      	beq.n	80007b4 <MRCC_voidPeripheralClockEnable+0x50>
 800077a:	2b02      	cmp	r3, #2
 800077c:	dc25      	bgt.n	80007ca <MRCC_voidPeripheralClockEnable+0x66>
 800077e:	2b00      	cmp	r3, #0
 8000780:	d002      	beq.n	8000788 <MRCC_voidPeripheralClockEnable+0x24>
 8000782:	2b01      	cmp	r3, #1
 8000784:	d00b      	beq.n	800079e <MRCC_voidPeripheralClockEnable+0x3a>
		SET_BIT(RCC->APB2ENR,Copy_u8PeripheralName);
		break;

	default:
		/* return error */
		break;
 8000786:	e020      	b.n	80007ca <MRCC_voidPeripheralClockEnable+0x66>
		SET_BIT(RCC->AHBENR,Copy_u8PeripheralName);
 8000788:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <MRCC_voidPeripheralClockEnable+0x74>)
 800078a:	695b      	ldr	r3, [r3, #20]
 800078c:	79ba      	ldrb	r2, [r7, #6]
 800078e:	2101      	movs	r1, #1
 8000790:	fa01 f202 	lsl.w	r2, r1, r2
 8000794:	4611      	mov	r1, r2
 8000796:	4a10      	ldr	r2, [pc, #64]	; (80007d8 <MRCC_voidPeripheralClockEnable+0x74>)
 8000798:	430b      	orrs	r3, r1
 800079a:	6153      	str	r3, [r2, #20]
		break;
 800079c:	e016      	b.n	80007cc <MRCC_voidPeripheralClockEnable+0x68>
		SET_BIT(RCC->APB1ENR,Copy_u8PeripheralName);
 800079e:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <MRCC_voidPeripheralClockEnable+0x74>)
 80007a0:	69db      	ldr	r3, [r3, #28]
 80007a2:	79ba      	ldrb	r2, [r7, #6]
 80007a4:	2101      	movs	r1, #1
 80007a6:	fa01 f202 	lsl.w	r2, r1, r2
 80007aa:	4611      	mov	r1, r2
 80007ac:	4a0a      	ldr	r2, [pc, #40]	; (80007d8 <MRCC_voidPeripheralClockEnable+0x74>)
 80007ae:	430b      	orrs	r3, r1
 80007b0:	61d3      	str	r3, [r2, #28]
		break;
 80007b2:	e00b      	b.n	80007cc <MRCC_voidPeripheralClockEnable+0x68>
		SET_BIT(RCC->APB2ENR,Copy_u8PeripheralName);
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <MRCC_voidPeripheralClockEnable+0x74>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	79ba      	ldrb	r2, [r7, #6]
 80007ba:	2101      	movs	r1, #1
 80007bc:	fa01 f202 	lsl.w	r2, r1, r2
 80007c0:	4611      	mov	r1, r2
 80007c2:	4a05      	ldr	r2, [pc, #20]	; (80007d8 <MRCC_voidPeripheralClockEnable+0x74>)
 80007c4:	430b      	orrs	r3, r1
 80007c6:	6193      	str	r3, [r2, #24]
		break;
 80007c8:	e000      	b.n	80007cc <MRCC_voidPeripheralClockEnable+0x68>
		break;
 80007ca:	bf00      	nop
	}
}
 80007cc:	bf00      	nop
 80007ce:	370c      	adds	r7, #12
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bc80      	pop	{r7}
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	40021000 	.word	0x40021000

080007dc <MRCC_voidClockSource>:

}


static void MRCC_voidClockSource(uint8_t Copy_u8xClock)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	71fb      	strb	r3, [r7, #7]
	/*First clear configuration bits*/
	CLEAR_BIT(RCC->CFGR , 0);
 80007e6:	4b44      	ldr	r3, [pc, #272]	; (80008f8 <MRCC_voidClockSource+0x11c>)
 80007e8:	685b      	ldr	r3, [r3, #4]
 80007ea:	4a43      	ldr	r2, [pc, #268]	; (80008f8 <MRCC_voidClockSource+0x11c>)
 80007ec:	f023 0301 	bic.w	r3, r3, #1
 80007f0:	6053      	str	r3, [r2, #4]
	CLEAR_BIT(RCC->CFGR , 1);
 80007f2:	4b41      	ldr	r3, [pc, #260]	; (80008f8 <MRCC_voidClockSource+0x11c>)
 80007f4:	685b      	ldr	r3, [r3, #4]
 80007f6:	4a40      	ldr	r2, [pc, #256]	; (80008f8 <MRCC_voidClockSource+0x11c>)
 80007f8:	f023 0302 	bic.w	r3, r3, #2
 80007fc:	6053      	str	r3, [r2, #4]

	/*Choose clock source*/
	switch(Copy_u8xClock)
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	2b02      	cmp	r3, #2
 8000802:	d040      	beq.n	8000886 <MRCC_voidClockSource+0xaa>
 8000804:	2b02      	cmp	r3, #2
 8000806:	dc58      	bgt.n	80008ba <MRCC_voidClockSource+0xde>
 8000808:	2b00      	cmp	r3, #0
 800080a:	d002      	beq.n	8000812 <MRCC_voidClockSource+0x36>
 800080c:	2b01      	cmp	r3, #1
 800080e:	d01a      	beq.n	8000846 <MRCC_voidClockSource+0x6a>
 8000810:	e053      	b.n	80008ba <MRCC_voidClockSource+0xde>
	{
	/* Internal clock*/
	case RCC_HSI:
		/*Set HSION BIT*/
		SET_BIT(RCC->CR , 0);
 8000812:	4b39      	ldr	r3, [pc, #228]	; (80008f8 <MRCC_voidClockSource+0x11c>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a38      	ldr	r2, [pc, #224]	; (80008f8 <MRCC_voidClockSource+0x11c>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6013      	str	r3, [r2, #0]
		/*Wait until the clock is stable*/
		while(BIT_IS_CLEAR(RCC->CR , 1));
 800081e:	bf00      	nop
 8000820:	4b35      	ldr	r3, [pc, #212]	; (80008f8 <MRCC_voidClockSource+0x11c>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f003 0302 	and.w	r3, r3, #2
 8000828:	2b00      	cmp	r3, #0
 800082a:	d0f9      	beq.n	8000820 <MRCC_voidClockSource+0x44>
		
		/* Select HSI as clock source */
		CLEAR_BIT(RCC->CFGR , 0);
 800082c:	4b32      	ldr	r3, [pc, #200]	; (80008f8 <MRCC_voidClockSource+0x11c>)
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	4a31      	ldr	r2, [pc, #196]	; (80008f8 <MRCC_voidClockSource+0x11c>)
 8000832:	f023 0301 	bic.w	r3, r3, #1
 8000836:	6053      	str	r3, [r2, #4]
		CLEAR_BIT(RCC->CFGR , 1);
 8000838:	4b2f      	ldr	r3, [pc, #188]	; (80008f8 <MRCC_voidClockSource+0x11c>)
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	4a2e      	ldr	r2, [pc, #184]	; (80008f8 <MRCC_voidClockSource+0x11c>)
 800083e:	f023 0302 	bic.w	r3, r3, #2
 8000842:	6053      	str	r3, [r2, #4]
		break;
 8000844:	e053      	b.n	80008ee <MRCC_voidClockSource+0x112>

		/*External clock*/
	case RCC_HSE :
		/* Set HSEON BIT */
		SET_BIT(RCC->CR , 16);
 8000846:	4b2c      	ldr	r3, [pc, #176]	; (80008f8 <MRCC_voidClockSource+0x11c>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a2b      	ldr	r2, [pc, #172]	; (80008f8 <MRCC_voidClockSource+0x11c>)
 800084c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000850:	6013      	str	r3, [r2, #0]
		/* Check if Bypass is on */
		#if RCC_HSE_BYPASS == HSE_BYPASS_OFF_CRYSTAL
				CLEAR_BIT(RCC->CR , 18);
 8000852:	4b29      	ldr	r3, [pc, #164]	; (80008f8 <MRCC_voidClockSource+0x11c>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a28      	ldr	r2, [pc, #160]	; (80008f8 <MRCC_voidClockSource+0x11c>)
 8000858:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800085c:	6013      	str	r3, [r2, #0]
		#elif RCC_HSE_BYPASS == HSE_BYPASS_ON_RC
				SET_BIT(RCC->CR , 18);
		#endif
		/*Wait until external clock is stable*/
		while(BIT_IS_CLEAR(RCC->CR , 17));
 800085e:	bf00      	nop
 8000860:	4b25      	ldr	r3, [pc, #148]	; (80008f8 <MRCC_voidClockSource+0x11c>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000868:	2b00      	cmp	r3, #0
 800086a:	d0f9      	beq.n	8000860 <MRCC_voidClockSource+0x84>

		/* Select HSE as clock source */
		SET_BIT(RCC->CFGR , 0);
 800086c:	4b22      	ldr	r3, [pc, #136]	; (80008f8 <MRCC_voidClockSource+0x11c>)
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	4a21      	ldr	r2, [pc, #132]	; (80008f8 <MRCC_voidClockSource+0x11c>)
 8000872:	f043 0301 	orr.w	r3, r3, #1
 8000876:	6053      	str	r3, [r2, #4]
		CLEAR_BIT(RCC->CFGR , 1);
 8000878:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <MRCC_voidClockSource+0x11c>)
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	4a1e      	ldr	r2, [pc, #120]	; (80008f8 <MRCC_voidClockSource+0x11c>)
 800087e:	f023 0302 	bic.w	r3, r3, #2
 8000882:	6053      	str	r3, [r2, #4]
		break;
 8000884:	e033      	b.n	80008ee <MRCC_voidClockSource+0x112>

		/*PLL clock*/
	case RCC_PLL:
		/* Set PLLON BIT */
		SET_BIT(RCC->CR , 24);
 8000886:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <MRCC_voidClockSource+0x11c>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a1b      	ldr	r2, [pc, #108]	; (80008f8 <MRCC_voidClockSource+0x11c>)
 800088c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000890:	6013      	str	r3, [r2, #0]
		/*Wait until PLL clock is stable*/
		while(BIT_IS_CLEAR(RCC->CR , 25));
 8000892:	bf00      	nop
 8000894:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <MRCC_voidClockSource+0x11c>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800089c:	2b00      	cmp	r3, #0
 800089e:	d0f9      	beq.n	8000894 <MRCC_voidClockSource+0xb8>

		CLEAR_BIT(RCC->CFGR , 0);
 80008a0:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <MRCC_voidClockSource+0x11c>)
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	4a14      	ldr	r2, [pc, #80]	; (80008f8 <MRCC_voidClockSource+0x11c>)
 80008a6:	f023 0301 	bic.w	r3, r3, #1
 80008aa:	6053      	str	r3, [r2, #4]
		SET_BIT(RCC->CFGR , 1);
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <MRCC_voidClockSource+0x11c>)
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	4a11      	ldr	r2, [pc, #68]	; (80008f8 <MRCC_voidClockSource+0x11c>)
 80008b2:	f043 0302 	orr.w	r3, r3, #2
 80008b6:	6053      	str	r3, [r2, #4]
		break;
 80008b8:	e019      	b.n	80008ee <MRCC_voidClockSource+0x112>

		/* default HSI will be used */
	default:
		/*Set HSION BIT*/
		SET_BIT(RCC->CR , 0);
 80008ba:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <MRCC_voidClockSource+0x11c>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a0e      	ldr	r2, [pc, #56]	; (80008f8 <MRCC_voidClockSource+0x11c>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	6013      	str	r3, [r2, #0]
		/*Wait until the clock is stable*/
		while(BIT_IS_CLEAR(RCC->CR , 1));
 80008c6:	bf00      	nop
 80008c8:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <MRCC_voidClockSource+0x11c>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f003 0302 	and.w	r3, r3, #2
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d0f9      	beq.n	80008c8 <MRCC_voidClockSource+0xec>
		
		/* Select HSI as clock source */
		CLEAR_BIT(RCC->CFGR , 0);
 80008d4:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <MRCC_voidClockSource+0x11c>)
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	4a07      	ldr	r2, [pc, #28]	; (80008f8 <MRCC_voidClockSource+0x11c>)
 80008da:	f023 0301 	bic.w	r3, r3, #1
 80008de:	6053      	str	r3, [r2, #4]
		CLEAR_BIT(RCC->CFGR , 1);
 80008e0:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <MRCC_voidClockSource+0x11c>)
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	4a04      	ldr	r2, [pc, #16]	; (80008f8 <MRCC_voidClockSource+0x11c>)
 80008e6:	f023 0302 	bic.w	r3, r3, #2
 80008ea:	6053      	str	r3, [r2, #4]
		break;
 80008ec:	bf00      	nop
	}
}
 80008ee:	bf00      	nop
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bc80      	pop	{r7}
 80008f6:	4770      	bx	lr
 80008f8:	40021000 	.word	0x40021000

080008fc <MRCC_voidPLL_Clock_Source>:


static void MRCC_voidPLL_Clock_Source(uint8_t Copy_u8xPLL_Source)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
	/* First Clear the Bits */
	CLEAR_BIT(RCC->CFGR,17);
 8000906:	4b3f      	ldr	r3, [pc, #252]	; (8000a04 <MRCC_voidPLL_Clock_Source+0x108>)
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	4a3e      	ldr	r2, [pc, #248]	; (8000a04 <MRCC_voidPLL_Clock_Source+0x108>)
 800090c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000910:	6053      	str	r3, [r2, #4]
	CLEAR_BIT(RCC->CFGR,16);
 8000912:	4b3c      	ldr	r3, [pc, #240]	; (8000a04 <MRCC_voidPLL_Clock_Source+0x108>)
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	4a3b      	ldr	r2, [pc, #236]	; (8000a04 <MRCC_voidPLL_Clock_Source+0x108>)
 8000918:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800091c:	6053      	str	r3, [r2, #4]

	switch(Copy_u8xPLL_Source)
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	2b02      	cmp	r3, #2
 8000922:	d048      	beq.n	80009b6 <MRCC_voidPLL_Clock_Source+0xba>
 8000924:	2b02      	cmp	r3, #2
 8000926:	dc5a      	bgt.n	80009de <MRCC_voidPLL_Clock_Source+0xe2>
 8000928:	2b00      	cmp	r3, #0
 800092a:	d002      	beq.n	8000932 <MRCC_voidPLL_Clock_Source+0x36>
 800092c:	2b01      	cmp	r3, #1
 800092e:	d021      	beq.n	8000974 <MRCC_voidPLL_Clock_Source+0x78>
 8000930:	e055      	b.n	80009de <MRCC_voidPLL_Clock_Source+0xe2>
	{
		case PLL_SRC_HSE_NOT_DEVIDED:
			/* Set HSEON BIT */
			SET_BIT(RCC->CR,16);
 8000932:	4b34      	ldr	r3, [pc, #208]	; (8000a04 <MRCC_voidPLL_Clock_Source+0x108>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a33      	ldr	r2, [pc, #204]	; (8000a04 <MRCC_voidPLL_Clock_Source+0x108>)
 8000938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800093c:	6013      	str	r3, [r2, #0]
			/*Wait until external clock is stable*/
			while(BIT_IS_CLEAR(RCC->CR,17));
 800093e:	bf00      	nop
 8000940:	4b30      	ldr	r3, [pc, #192]	; (8000a04 <MRCC_voidPLL_Clock_Source+0x108>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000948:	2b00      	cmp	r3, #0
 800094a:	d0f9      	beq.n	8000940 <MRCC_voidPLL_Clock_Source+0x44>

			/*Select HSE as PLL source*/
			CLEAR_BIT(RCC->CFGR,17);
 800094c:	4b2d      	ldr	r3, [pc, #180]	; (8000a04 <MRCC_voidPLL_Clock_Source+0x108>)
 800094e:	685b      	ldr	r3, [r3, #4]
 8000950:	4a2c      	ldr	r2, [pc, #176]	; (8000a04 <MRCC_voidPLL_Clock_Source+0x108>)
 8000952:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000956:	6053      	str	r3, [r2, #4]
			SET_BIT(RCC->CFGR,16);
 8000958:	4b2a      	ldr	r3, [pc, #168]	; (8000a04 <MRCC_voidPLL_Clock_Source+0x108>)
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	4a29      	ldr	r2, [pc, #164]	; (8000a04 <MRCC_voidPLL_Clock_Source+0x108>)
 800095e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000962:	6053      	str	r3, [r2, #4]
			
			/*Wait until external clock is stable*/
			while(BIT_IS_CLEAR(RCC->CR,17));
 8000964:	bf00      	nop
 8000966:	4b27      	ldr	r3, [pc, #156]	; (8000a04 <MRCC_voidPLL_Clock_Source+0x108>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800096e:	2b00      	cmp	r3, #0
 8000970:	d0f9      	beq.n	8000966 <MRCC_voidPLL_Clock_Source+0x6a>
			break;
 8000972:	e042      	b.n	80009fa <MRCC_voidPLL_Clock_Source+0xfe>
			
		case PLL_SRC_HSE_DEVIDED_BY_2:
			/* Set HSEON BIT */
			SET_BIT(RCC->CR,16);
 8000974:	4b23      	ldr	r3, [pc, #140]	; (8000a04 <MRCC_voidPLL_Clock_Source+0x108>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a22      	ldr	r2, [pc, #136]	; (8000a04 <MRCC_voidPLL_Clock_Source+0x108>)
 800097a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800097e:	6013      	str	r3, [r2, #0]
			/*Wait until external clock is stable*/
			while(BIT_IS_CLEAR(RCC->CR,17));
 8000980:	bf00      	nop
 8000982:	4b20      	ldr	r3, [pc, #128]	; (8000a04 <MRCC_voidPLL_Clock_Source+0x108>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800098a:	2b00      	cmp	r3, #0
 800098c:	d0f9      	beq.n	8000982 <MRCC_voidPLL_Clock_Source+0x86>

			/*Select HSE as PLL source*/
			SET_BIT(RCC->CFGR,17);
 800098e:	4b1d      	ldr	r3, [pc, #116]	; (8000a04 <MRCC_voidPLL_Clock_Source+0x108>)
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	4a1c      	ldr	r2, [pc, #112]	; (8000a04 <MRCC_voidPLL_Clock_Source+0x108>)
 8000994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000998:	6053      	str	r3, [r2, #4]
			SET_BIT(RCC->CFGR,16);
 800099a:	4b1a      	ldr	r3, [pc, #104]	; (8000a04 <MRCC_voidPLL_Clock_Source+0x108>)
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	4a19      	ldr	r2, [pc, #100]	; (8000a04 <MRCC_voidPLL_Clock_Source+0x108>)
 80009a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009a4:	6053      	str	r3, [r2, #4]
			/*Wait until external clock is stable*/
			while(BIT_IS_CLEAR(RCC->CR,17));
 80009a6:	bf00      	nop
 80009a8:	4b16      	ldr	r3, [pc, #88]	; (8000a04 <MRCC_voidPLL_Clock_Source+0x108>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d0f9      	beq.n	80009a8 <MRCC_voidPLL_Clock_Source+0xac>
			break;
 80009b4:	e021      	b.n	80009fa <MRCC_voidPLL_Clock_Source+0xfe>
			
		case PLL_SRC_HSI_DEVIDED_BY_2:
			/*Set HSION BIT*/
			SET_BIT(RCC->CR,0);
 80009b6:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <MRCC_voidPLL_Clock_Source+0x108>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4a12      	ldr	r2, [pc, #72]	; (8000a04 <MRCC_voidPLL_Clock_Source+0x108>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	6013      	str	r3, [r2, #0]
			/*Wait until the clock is stable*/
			while(BIT_IS_CLEAR(RCC->CR,1));
 80009c2:	bf00      	nop
 80009c4:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <MRCC_voidPLL_Clock_Source+0x108>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f003 0302 	and.w	r3, r3, #2
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d0f9      	beq.n	80009c4 <MRCC_voidPLL_Clock_Source+0xc8>

			CLEAR_BIT(RCC->CFGR,16);
 80009d0:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <MRCC_voidPLL_Clock_Source+0x108>)
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	4a0b      	ldr	r2, [pc, #44]	; (8000a04 <MRCC_voidPLL_Clock_Source+0x108>)
 80009d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009da:	6053      	str	r3, [r2, #4]
			break;
 80009dc:	e00d      	b.n	80009fa <MRCC_voidPLL_Clock_Source+0xfe>
			
			/* default the PLL clock source is internal clock */
		default:
			/*Set HSION BIT*/
			SET_BIT(RCC->CR,0);
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <MRCC_voidPLL_Clock_Source+0x108>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a08      	ldr	r2, [pc, #32]	; (8000a04 <MRCC_voidPLL_Clock_Source+0x108>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	6013      	str	r3, [r2, #0]
			/*Wait until the clock is stable*/
			while(BIT_IS_CLEAR(RCC->CR,1));
 80009ea:	bf00      	nop
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <MRCC_voidPLL_Clock_Source+0x108>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f003 0302 	and.w	r3, r3, #2
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d0f9      	beq.n	80009ec <MRCC_voidPLL_Clock_Source+0xf0>
			break;
 80009f8:	bf00      	nop
	}
}
 80009fa:	bf00      	nop
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr
 8000a04:	40021000 	.word	0x40021000

08000a08 <MRCC_voidPLL_Mul>:


static void MRCC_voidPLL_Mul(uint8_t Copy_u8xMul_Factor)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]
	RCC->CFGR |= (Copy_u8xMul_Factor << 18);
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <MRCC_voidPLL_Mul+0x24>)
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	79fa      	ldrb	r2, [r7, #7]
 8000a18:	0492      	lsls	r2, r2, #18
 8000a1a:	4611      	mov	r1, r2
 8000a1c:	4a03      	ldr	r2, [pc, #12]	; (8000a2c <MRCC_voidPLL_Mul+0x24>)
 8000a1e:	430b      	orrs	r3, r1
 8000a20:	6053      	str	r3, [r2, #4]
}
 8000a22:	bf00      	nop
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr
 8000a2c:	40021000 	.word	0x40021000

08000a30 <MRCC_voidBus_Prescaler>:


static void MRCC_voidBus_Prescaler(RCC_Config_t *Copy_u8RCC_Config)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	if(NULL == Copy_u8RCC_Config)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d01b      	beq.n	8000a76 <MRCC_voidBus_Prescaler+0x46>
	{
		return;
	}
	else
	{
		RCC->CFGR |= ((Copy_u8RCC_Config->Prescaler.AHB_Prescaler)  << 4);
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <MRCC_voidBus_Prescaler+0x50>)
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	687a      	ldr	r2, [r7, #4]
 8000a44:	78d2      	ldrb	r2, [r2, #3]
 8000a46:	0112      	lsls	r2, r2, #4
 8000a48:	4611      	mov	r1, r2
 8000a4a:	4a0d      	ldr	r2, [pc, #52]	; (8000a80 <MRCC_voidBus_Prescaler+0x50>)
 8000a4c:	430b      	orrs	r3, r1
 8000a4e:	6053      	str	r3, [r2, #4]
		RCC->CFGR |= ((Copy_u8RCC_Config->Prescaler.ABP1_Prescaler) << 8);
 8000a50:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <MRCC_voidBus_Prescaler+0x50>)
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	687a      	ldr	r2, [r7, #4]
 8000a56:	7912      	ldrb	r2, [r2, #4]
 8000a58:	0212      	lsls	r2, r2, #8
 8000a5a:	4611      	mov	r1, r2
 8000a5c:	4a08      	ldr	r2, [pc, #32]	; (8000a80 <MRCC_voidBus_Prescaler+0x50>)
 8000a5e:	430b      	orrs	r3, r1
 8000a60:	6053      	str	r3, [r2, #4]
		RCC->CFGR |= ((Copy_u8RCC_Config->Prescaler.ABP2_Prescaler) << 11);
 8000a62:	4b07      	ldr	r3, [pc, #28]	; (8000a80 <MRCC_voidBus_Prescaler+0x50>)
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	687a      	ldr	r2, [r7, #4]
 8000a68:	7952      	ldrb	r2, [r2, #5]
 8000a6a:	02d2      	lsls	r2, r2, #11
 8000a6c:	4611      	mov	r1, r2
 8000a6e:	4a04      	ldr	r2, [pc, #16]	; (8000a80 <MRCC_voidBus_Prescaler+0x50>)
 8000a70:	430b      	orrs	r3, r1
 8000a72:	6053      	str	r3, [r2, #4]
 8000a74:	e000      	b.n	8000a78 <MRCC_voidBus_Prescaler+0x48>
		return;
 8000a76:	bf00      	nop
	}
}
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr
 8000a80:	40021000 	.word	0x40021000

08000a84 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of KeypadLcdSemaphore */
  KeypadLcdSemaphoreHandle = osSemaphoreNew(1, 0, &KeypadLcdSemaphore_attributes);
 8000a88:	4a14      	ldr	r2, [pc, #80]	; (8000adc <MX_FREERTOS_Init+0x58>)
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	2001      	movs	r0, #1
 8000a8e:	f001 f837 	bl	8001b00 <osSemaphoreNew>
 8000a92:	4603      	mov	r3, r0
 8000a94:	4a12      	ldr	r2, [pc, #72]	; (8000ae0 <MX_FREERTOS_Init+0x5c>)
 8000a96:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of NumbersQueue */
  NumbersQueueHandle = osMessageQueueNew (5, sizeof(uint8_t), &NumbersQueue_attributes);
 8000a98:	4a12      	ldr	r2, [pc, #72]	; (8000ae4 <MX_FREERTOS_Init+0x60>)
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	2005      	movs	r0, #5
 8000a9e:	f001 f989 	bl	8001db4 <osMessageQueueNew>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	4a10      	ldr	r2, [pc, #64]	; (8000ae8 <MX_FREERTOS_Init+0x64>)
 8000aa6:	6013      	str	r3, [r2, #0]

  /* creation of CharactersQueue */
  CharactersQueueHandle = osMessageQueueNew (5, sizeof(uint8_t), &CharactersQueue_attributes);
 8000aa8:	4a10      	ldr	r2, [pc, #64]	; (8000aec <MX_FREERTOS_Init+0x68>)
 8000aaa:	2101      	movs	r1, #1
 8000aac:	2005      	movs	r0, #5
 8000aae:	f001 f981 	bl	8001db4 <osMessageQueueNew>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	4a0e      	ldr	r2, [pc, #56]	; (8000af0 <MX_FREERTOS_Init+0x6c>)
 8000ab6:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of task1 */
  task1Handle = osThreadNew(vLcdTask, NULL, &task1_attributes);
 8000ab8:	4a0e      	ldr	r2, [pc, #56]	; (8000af4 <MX_FREERTOS_Init+0x70>)
 8000aba:	2100      	movs	r1, #0
 8000abc:	480e      	ldr	r0, [pc, #56]	; (8000af8 <MX_FREERTOS_Init+0x74>)
 8000abe:	f000 ff75 	bl	80019ac <osThreadNew>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	4a0d      	ldr	r2, [pc, #52]	; (8000afc <MX_FREERTOS_Init+0x78>)
 8000ac6:	6013      	str	r3, [r2, #0]

  /* creation of task2 */
  task2Handle = osThreadNew(vKeypadTask, NULL, &task2_attributes);
 8000ac8:	4a0d      	ldr	r2, [pc, #52]	; (8000b00 <MX_FREERTOS_Init+0x7c>)
 8000aca:	2100      	movs	r1, #0
 8000acc:	480d      	ldr	r0, [pc, #52]	; (8000b04 <MX_FREERTOS_Init+0x80>)
 8000ace:	f000 ff6d 	bl	80019ac <osThreadNew>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	4a0c      	ldr	r2, [pc, #48]	; (8000b08 <MX_FREERTOS_Init+0x84>)
 8000ad6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	08004f7c 	.word	0x08004f7c
 8000ae0:	200000d8 	.word	0x200000d8
 8000ae4:	08004f4c 	.word	0x08004f4c
 8000ae8:	200000d0 	.word	0x200000d0
 8000aec:	08004f64 	.word	0x08004f64
 8000af0:	200000d4 	.word	0x200000d4
 8000af4:	08004f04 	.word	0x08004f04
 8000af8:	08000b0d 	.word	0x08000b0d
 8000afc:	200000c8 	.word	0x200000c8
 8000b00:	08004f28 	.word	0x08004f28
 8000b04:	08000b8d 	.word	0x08000b8d
 8000b08:	200000cc 	.word	0x200000cc

08000b0c <vLcdTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_vLcdTask */
void vLcdTask(void *argument)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vLcdTask */
	BaseType_t RetVal = pdTRUE;
 8000b14:	2301      	movs	r3, #1
 8000b16:	60fb      	str	r3, [r7, #12]
	uint8_t message = 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	72fb      	strb	r3, [r7, #11]
	/* Infinite loop */
	for(;;)
	{
		switch(CurrentData)
 8000b1c:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <vLcdTask+0x6c>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d012      	beq.n	8000b4a <vLcdTask+0x3e>
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d121      	bne.n	8000b6c <vLcdTask+0x60>
		{
			case CHARACTERS_DATA:
				RetVal= xQueueReceive(CharactersQueueHandle, &message, HAL_MAX_DELAY);
 8000b28:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <vLcdTask+0x70>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f107 010b 	add.w	r1, r7, #11
 8000b30:	f04f 32ff 	mov.w	r2, #4294967295
 8000b34:	4618      	mov	r0, r3
 8000b36:	f001 fe73 	bl	8002820 <xQueueReceive>
 8000b3a:	60f8      	str	r0, [r7, #12]
				lcd_4bit_send_char_data_pos(&lcd_1, 2, 14, message);
 8000b3c:	7afb      	ldrb	r3, [r7, #11]
 8000b3e:	220e      	movs	r2, #14
 8000b40:	2102      	movs	r1, #2
 8000b42:	480f      	ldr	r0, [pc, #60]	; (8000b80 <vLcdTask+0x74>)
 8000b44:	f7ff fd06 	bl	8000554 <lcd_4bit_send_char_data_pos>
				break;
 8000b48:	e010      	b.n	8000b6c <vLcdTask+0x60>

			case NUMBERS_DATA:
				RetVal= xQueueReceive(NumbersQueueHandle, &message, HAL_MAX_DELAY);
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <vLcdTask+0x78>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f107 010b 	add.w	r1, r7, #11
 8000b52:	f04f 32ff 	mov.w	r2, #4294967295
 8000b56:	4618      	mov	r0, r3
 8000b58:	f001 fe62 	bl	8002820 <xQueueReceive>
 8000b5c:	60f8      	str	r0, [r7, #12]
				lcd_4bit_send_char_data_pos(&lcd_1, 1, 14, message);
 8000b5e:	7afb      	ldrb	r3, [r7, #11]
 8000b60:	220e      	movs	r2, #14
 8000b62:	2101      	movs	r1, #1
 8000b64:	4806      	ldr	r0, [pc, #24]	; (8000b80 <vLcdTask+0x74>)
 8000b66:	f7ff fcf5 	bl	8000554 <lcd_4bit_send_char_data_pos>
				break;
 8000b6a:	bf00      	nop
		}
		osSemaphoreRelease(KeypadLcdSemaphoreHandle);
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <vLcdTask+0x7c>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f001 f8c7 	bl	8001d04 <osSemaphoreRelease>
		switch(CurrentData)
 8000b76:	e7d1      	b.n	8000b1c <vLcdTask+0x10>
 8000b78:	200000c4 	.word	0x200000c4
 8000b7c:	200000d4 	.word	0x200000d4
 8000b80:	20000040 	.word	0x20000040
 8000b84:	200000d0 	.word	0x200000d0
 8000b88:	200000d8 	.word	0x200000d8

08000b8c <vKeypadTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vKeypadTask */
void vKeypadTask(void *argument)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vKeypadTask */
	BaseType_t RetVal = pdTRUE;
 8000b94:	2301      	movs	r3, #1
 8000b96:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for(;;)
	{
		keypadVal = NOTPRESSED;
 8000b98:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <vKeypadTask+0x7c>)
 8000b9a:	22ff      	movs	r2, #255	; 0xff
 8000b9c:	701a      	strb	r2, [r3, #0]
		keypadVal = read_keypad(&keypad_1);
 8000b9e:	481b      	ldr	r0, [pc, #108]	; (8000c0c <vKeypadTask+0x80>)
 8000ba0:	f7ff fbbe 	bl	8000320 <read_keypad>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	4b17      	ldr	r3, [pc, #92]	; (8000c08 <vKeypadTask+0x7c>)
 8000baa:	701a      	strb	r2, [r3, #0]
		if(keypadVal != NOTPRESSED)
 8000bac:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <vKeypadTask+0x7c>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2bff      	cmp	r3, #255	; 0xff
 8000bb2:	d0f1      	beq.n	8000b98 <vKeypadTask+0xc>
		{
			if(keypadVal<'1' || keypadVal>'9')
 8000bb4:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <vKeypadTask+0x7c>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	2b30      	cmp	r3, #48	; 0x30
 8000bba:	d903      	bls.n	8000bc4 <vKeypadTask+0x38>
 8000bbc:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <vKeypadTask+0x7c>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b39      	cmp	r3, #57	; 0x39
 8000bc2:	d90c      	bls.n	8000bde <vKeypadTask+0x52>
			{
				CurrentData = CHARACTERS_DATA;
 8000bc4:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <vKeypadTask+0x84>)
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	701a      	strb	r2, [r3, #0]
				RetVal = xQueueSendToFront(CharactersQueueHandle, (void *)&keypadVal, HAL_MAX_DELAY);
 8000bca:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <vKeypadTask+0x88>)
 8000bcc:	6818      	ldr	r0, [r3, #0]
 8000bce:	2301      	movs	r3, #1
 8000bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bd4:	490c      	ldr	r1, [pc, #48]	; (8000c08 <vKeypadTask+0x7c>)
 8000bd6:	f001 fbff 	bl	80023d8 <xQueueGenericSend>
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	e00b      	b.n	8000bf6 <vKeypadTask+0x6a>
			}
			else
			{
				CurrentData = NUMBERS_DATA;
 8000bde:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <vKeypadTask+0x84>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	701a      	strb	r2, [r3, #0]
				RetVal = xQueueSendToFront(NumbersQueueHandle, (void *)&keypadVal, HAL_MAX_DELAY);
 8000be4:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <vKeypadTask+0x8c>)
 8000be6:	6818      	ldr	r0, [r3, #0]
 8000be8:	2301      	movs	r3, #1
 8000bea:	f04f 32ff 	mov.w	r2, #4294967295
 8000bee:	4906      	ldr	r1, [pc, #24]	; (8000c08 <vKeypadTask+0x7c>)
 8000bf0:	f001 fbf2 	bl	80023d8 <xQueueGenericSend>
 8000bf4:	60f8      	str	r0, [r7, #12]
			}

			osSemaphoreAcquire(KeypadLcdSemaphoreHandle, HAL_MAX_DELAY);
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <vKeypadTask+0x90>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f04f 31ff 	mov.w	r1, #4294967295
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f001 f81a 	bl	8001c38 <osSemaphoreAcquire>
		keypadVal = NOTPRESSED;
 8000c04:	e7c8      	b.n	8000b98 <vKeypadTask+0xc>
 8000c06:	bf00      	nop
 8000c08:	2000007e 	.word	0x2000007e
 8000c0c:	20000000 	.word	0x20000000
 8000c10:	200000c4 	.word	0x200000c4
 8000c14:	200000d4 	.word	0x200000d4
 8000c18:	200000d0 	.word	0x200000d0
 8000c1c:	200000d8 	.word	0x200000d8

08000c20 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c26:	4b07      	ldr	r3, [pc, #28]	; (8000c44 <MX_GPIO_Init+0x24>)
 8000c28:	4a06      	ldr	r2, [pc, #24]	; (8000c44 <MX_GPIO_Init+0x24>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	6193      	str	r3, [r2, #24]
 8000c2e:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <MX_GPIO_Init+0x24>)
 8000c30:	699b      	ldr	r3, [r3, #24]
 8000c32:	f003 0320 	and.w	r3, r3, #32
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]

}
 8000c3a:	bf00      	nop
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr
 8000c44:	40021000 	.word	0x40021000

08000c48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c4c:	f000 f900 	bl	8000e50 <HAL_Init>

  /* USER CODE BEGIN Init */

	MRCC_voidClockInit(&RCC_obj);
 8000c50:	4818      	ldr	r0, [pc, #96]	; (8000cb4 <main+0x6c>)
 8000c52:	f7ff fd65 	bl	8000720 <MRCC_voidClockInit>
	MRCC_voidPeripheralClockEnable(RCC_APB2_BUS , RCC_GPIOA_CLOCK);
 8000c56:	2102      	movs	r1, #2
 8000c58:	2002      	movs	r0, #2
 8000c5a:	f7ff fd83 	bl	8000764 <MRCC_voidPeripheralClockEnable>
	MRCC_voidPeripheralClockEnable(RCC_APB2_BUS , RCC_GPIOB_CLOCK);
 8000c5e:	2103      	movs	r1, #3
 8000c60:	2002      	movs	r0, #2
 8000c62:	f7ff fd7f 	bl	8000764 <MRCC_voidPeripheralClockEnable>

	lcd_4bit_intialize(&lcd_1);
 8000c66:	4814      	ldr	r0, [pc, #80]	; (8000cb8 <main+0x70>)
 8000c68:	f7ff fbb2 	bl	80003d0 <lcd_4bit_intialize>
	keypad_initialize(&keypad_1);
 8000c6c:	4813      	ldr	r0, [pc, #76]	; (8000cbc <main+0x74>)
 8000c6e:	f7ff fb12 	bl	8000296 <keypad_initialize>

	lcd_4bit_send_string_pos(&lcd_1, 1, 1, "Direction => ");
 8000c72:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <main+0x78>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	2101      	movs	r1, #1
 8000c78:	480f      	ldr	r0, [pc, #60]	; (8000cb8 <main+0x70>)
 8000c7a:	f7ff fc8b 	bl	8000594 <lcd_4bit_send_string_pos>
	lcd_4bit_send_string_pos(&lcd_1, 2, 1, "Character => ");
 8000c7e:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <main+0x7c>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	2102      	movs	r1, #2
 8000c84:	480c      	ldr	r0, [pc, #48]	; (8000cb8 <main+0x70>)
 8000c86:	f7ff fc85 	bl	8000594 <lcd_4bit_send_string_pos>

	MGPIO_voidInitPortPin(&DecrementButton);
 8000c8a:	480f      	ldr	r0, [pc, #60]	; (8000cc8 <main+0x80>)
 8000c8c:	f7ff fa60 	bl	8000150 <MGPIO_voidInitPortPin>
	MGPIO_voidInitPortPin(&ChoiceButton);
 8000c90:	480e      	ldr	r0, [pc, #56]	; (8000ccc <main+0x84>)
 8000c92:	f7ff fa5d 	bl	8000150 <MGPIO_voidInitPortPin>
	MGPIO_voidInitPortPin(&IncrementButton);
 8000c96:	480e      	ldr	r0, [pc, #56]	; (8000cd0 <main+0x88>)
 8000c98:	f7ff fa5a 	bl	8000150 <MGPIO_voidInitPortPin>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c9c:	f000 f81a 	bl	8000cd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ca0:	f7ff ffbe 	bl	8000c20 <MX_GPIO_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000ca4:	f000 fe1c 	bl	80018e0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000ca8:	f7ff feec 	bl	8000a84 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000cac:	f000 fe4a 	bl	8001944 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <main+0x68>
 8000cb2:	bf00      	nop
 8000cb4:	20000078 	.word	0x20000078
 8000cb8:	20000040 	.word	0x20000040
 8000cbc:	20000000 	.word	0x20000000
 8000cc0:	08004ebc 	.word	0x08004ebc
 8000cc4:	08004ecc 	.word	0x08004ecc
 8000cc8:	20000080 	.word	0x20000080
 8000ccc:	20000088 	.word	0x20000088
 8000cd0:	20000090 	.word	0x20000090

08000cd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b090      	sub	sp, #64	; 0x40
 8000cd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cda:	f107 0318 	add.w	r3, r7, #24
 8000cde:	2228      	movs	r2, #40	; 0x28
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f004 f882 	bl	8004dec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce8:	1d3b      	adds	r3, r7, #4
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	609a      	str	r2, [r3, #8]
 8000cf2:	60da      	str	r2, [r3, #12]
 8000cf4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cfa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cfe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d00:	2300      	movs	r3, #0
 8000d02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d04:	2301      	movs	r3, #1
 8000d06:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000d12:	2300      	movs	r3, #0
 8000d14:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d16:	f107 0318 	add.w	r3, r7, #24
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f000 fa02 	bl	8001124 <HAL_RCC_OscConfig>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000d26:	f000 f819 	bl	8000d5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d2a:	230f      	movs	r3, #15
 8000d2c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000d32:	2380      	movs	r3, #128	; 0x80
 8000d34:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d36:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000d3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d40:	1d3b      	adds	r3, r7, #4
 8000d42:	2100      	movs	r1, #0
 8000d44:	4618      	mov	r0, r3
 8000d46:	f000 fc6f 	bl	8001628 <HAL_RCC_ClockConfig>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000d50:	f000 f804 	bl	8000d5c <Error_Handler>
  }
}
 8000d54:	bf00      	nop
 8000d56:	3740      	adds	r7, #64	; 0x40
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d60:	b672      	cpsid	i
}
 8000d62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <Error_Handler+0x8>
	...

08000d68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d6e:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <HAL_MspInit+0x48>)
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	4a0f      	ldr	r2, [pc, #60]	; (8000db0 <HAL_MspInit+0x48>)
 8000d74:	f043 0302 	orr.w	r3, r3, #2
 8000d78:	6193      	str	r3, [r2, #24]
 8000d7a:	4b0d      	ldr	r3, [pc, #52]	; (8000db0 <HAL_MspInit+0x48>)
 8000d7c:	699b      	ldr	r3, [r3, #24]
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d86:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <HAL_MspInit+0x48>)
 8000d88:	4a09      	ldr	r2, [pc, #36]	; (8000db0 <HAL_MspInit+0x48>)
 8000d8a:	69db      	ldr	r3, [r3, #28]
 8000d8c:	61d3      	str	r3, [r2, #28]
 8000d8e:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <HAL_MspInit+0x48>)
 8000d90:	69db      	ldr	r3, [r3, #28]
 8000d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d96:	603b      	str	r3, [r7, #0]
 8000d98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	210f      	movs	r1, #15
 8000d9e:	f06f 0001 	mvn.w	r0, #1
 8000da2:	f000 f996 	bl	80010d2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40021000 	.word	0x40021000

08000db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <NMI_Handler+0x4>

08000dba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dbe:	e7fe      	b.n	8000dbe <HardFault_Handler+0x4>

08000dc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <MemManage_Handler+0x4>

08000dc6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dca:	e7fe      	b.n	8000dca <BusFault_Handler+0x4>

08000dcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <UsageFault_Handler+0x4>

08000dd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bc80      	pop	{r7}
 8000ddc:	4770      	bx	lr

08000dde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de2:	f000 f87b 	bl	8000edc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000de6:	f002 ff3b 	bl	8003c60 <xTaskGetSchedulerState>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d001      	beq.n	8000df4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000df0:	f003 fda2 	bl	8004938 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bc80      	pop	{r7}
 8000e02:	4770      	bx	lr

08000e04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e04:	f7ff fff8 	bl	8000df8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e08:	480b      	ldr	r0, [pc, #44]	; (8000e38 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e0a:	490c      	ldr	r1, [pc, #48]	; (8000e3c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e0c:	4a0c      	ldr	r2, [pc, #48]	; (8000e40 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e10:	e002      	b.n	8000e18 <LoopCopyDataInit>

08000e12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e16:	3304      	adds	r3, #4

08000e18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e1c:	d3f9      	bcc.n	8000e12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e1e:	4a09      	ldr	r2, [pc, #36]	; (8000e44 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e20:	4c09      	ldr	r4, [pc, #36]	; (8000e48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e24:	e001      	b.n	8000e2a <LoopFillZerobss>

08000e26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e28:	3204      	adds	r2, #4

08000e2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e2c:	d3fb      	bcc.n	8000e26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e2e:	f003 ffe5 	bl	8004dfc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e32:	f7ff ff09 	bl	8000c48 <main>
  bx lr
 8000e36:	4770      	bx	lr
  ldr r0, =_sdata
 8000e38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e3c:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8000e40:	08004fb8 	.word	0x08004fb8
  ldr r2, =_sbss
 8000e44:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8000e48:	20001a28 	.word	0x20001a28

08000e4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e4c:	e7fe      	b.n	8000e4c <ADC1_2_IRQHandler>
	...

08000e50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e54:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <HAL_Init+0x28>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a07      	ldr	r2, [pc, #28]	; (8000e78 <HAL_Init+0x28>)
 8000e5a:	f043 0310 	orr.w	r3, r3, #16
 8000e5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e60:	2003      	movs	r0, #3
 8000e62:	f000 f92b 	bl	80010bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e66:	200f      	movs	r0, #15
 8000e68:	f000 f808 	bl	8000e7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e6c:	f7ff ff7c 	bl	8000d68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40022000 	.word	0x40022000

08000e7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e84:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <HAL_InitTick+0x54>)
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <HAL_InitTick+0x58>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 f935 	bl	800110a <HAL_SYSTICK_Config>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e00e      	b.n	8000ec8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2b0f      	cmp	r3, #15
 8000eae:	d80a      	bhi.n	8000ec6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	6879      	ldr	r1, [r7, #4]
 8000eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb8:	f000 f90b 	bl	80010d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ebc:	4a06      	ldr	r2, [pc, #24]	; (8000ed8 <HAL_InitTick+0x5c>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	e000      	b.n	8000ec8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000098 	.word	0x20000098
 8000ed4:	200000a0 	.word	0x200000a0
 8000ed8:	2000009c 	.word	0x2000009c

08000edc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee0:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <HAL_IncTick+0x1c>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4b05      	ldr	r3, [pc, #20]	; (8000efc <HAL_IncTick+0x20>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4413      	add	r3, r2
 8000eec:	4a03      	ldr	r2, [pc, #12]	; (8000efc <HAL_IncTick+0x20>)
 8000eee:	6013      	str	r3, [r2, #0]
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr
 8000ef8:	200000a0 	.word	0x200000a0
 8000efc:	200000dc 	.word	0x200000dc

08000f00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  return uwTick;
 8000f04:	4b02      	ldr	r3, [pc, #8]	; (8000f10 <HAL_GetTick+0x10>)
 8000f06:	681b      	ldr	r3, [r3, #0]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr
 8000f10:	200000dc 	.word	0x200000dc

08000f14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f1c:	f7ff fff0 	bl	8000f00 <HAL_GetTick>
 8000f20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f2c:	d005      	beq.n	8000f3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f2e:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <HAL_Delay+0x44>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	461a      	mov	r2, r3
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4413      	add	r3, r2
 8000f38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f3a:	bf00      	nop
 8000f3c:	f7ff ffe0 	bl	8000f00 <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	68fa      	ldr	r2, [r7, #12]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d8f7      	bhi.n	8000f3c <HAL_Delay+0x28>
  {
  }
}
 8000f4c:	bf00      	nop
 8000f4e:	bf00      	nop
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	200000a0 	.word	0x200000a0

08000f5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f72:	68ba      	ldr	r2, [r7, #8]
 8000f74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f78:	4013      	ands	r3, r2
 8000f7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f8e:	4a04      	ldr	r2, [pc, #16]	; (8000fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	60d3      	str	r3, [r2, #12]
}
 8000f94:	bf00      	nop
 8000f96:	3714      	adds	r7, #20
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bc80      	pop	{r7}
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa8:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <__NVIC_GetPriorityGrouping+0x18>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	0a1b      	lsrs	r3, r3, #8
 8000fae:	f003 0307 	and.w	r3, r3, #7
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bc80      	pop	{r7}
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	6039      	str	r1, [r7, #0]
 8000fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	db0a      	blt.n	8000fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	490c      	ldr	r1, [pc, #48]	; (800100c <__NVIC_SetPriority+0x4c>)
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	0112      	lsls	r2, r2, #4
 8000fe0:	b2d2      	uxtb	r2, r2
 8000fe2:	440b      	add	r3, r1
 8000fe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe8:	e00a      	b.n	8001000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	4908      	ldr	r1, [pc, #32]	; (8001010 <__NVIC_SetPriority+0x50>)
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	f003 030f 	and.w	r3, r3, #15
 8000ff6:	3b04      	subs	r3, #4
 8000ff8:	0112      	lsls	r2, r2, #4
 8000ffa:	b2d2      	uxtb	r2, r2
 8000ffc:	440b      	add	r3, r1
 8000ffe:	761a      	strb	r2, [r3, #24]
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	e000e100 	.word	0xe000e100
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001014:	b480      	push	{r7}
 8001016:	b089      	sub	sp, #36	; 0x24
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f1c3 0307 	rsb	r3, r3, #7
 800102e:	2b04      	cmp	r3, #4
 8001030:	bf28      	it	cs
 8001032:	2304      	movcs	r3, #4
 8001034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	3304      	adds	r3, #4
 800103a:	2b06      	cmp	r3, #6
 800103c:	d902      	bls.n	8001044 <NVIC_EncodePriority+0x30>
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	3b03      	subs	r3, #3
 8001042:	e000      	b.n	8001046 <NVIC_EncodePriority+0x32>
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001048:	f04f 32ff 	mov.w	r2, #4294967295
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43da      	mvns	r2, r3
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	401a      	ands	r2, r3
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800105c:	f04f 31ff 	mov.w	r1, #4294967295
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	fa01 f303 	lsl.w	r3, r1, r3
 8001066:	43d9      	mvns	r1, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800106c:	4313      	orrs	r3, r2
         );
}
 800106e:	4618      	mov	r0, r3
 8001070:	3724      	adds	r7, #36	; 0x24
 8001072:	46bd      	mov	sp, r7
 8001074:	bc80      	pop	{r7}
 8001076:	4770      	bx	lr

08001078 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3b01      	subs	r3, #1
 8001084:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001088:	d301      	bcc.n	800108e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800108a:	2301      	movs	r3, #1
 800108c:	e00f      	b.n	80010ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800108e:	4a0a      	ldr	r2, [pc, #40]	; (80010b8 <SysTick_Config+0x40>)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3b01      	subs	r3, #1
 8001094:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001096:	210f      	movs	r1, #15
 8001098:	f04f 30ff 	mov.w	r0, #4294967295
 800109c:	f7ff ff90 	bl	8000fc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a0:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <SysTick_Config+0x40>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a6:	4b04      	ldr	r3, [pc, #16]	; (80010b8 <SysTick_Config+0x40>)
 80010a8:	2207      	movs	r2, #7
 80010aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	e000e010 	.word	0xe000e010

080010bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f7ff ff49 	bl	8000f5c <__NVIC_SetPriorityGrouping>
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b086      	sub	sp, #24
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	4603      	mov	r3, r0
 80010da:	60b9      	str	r1, [r7, #8]
 80010dc:	607a      	str	r2, [r7, #4]
 80010de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010e4:	f7ff ff5e 	bl	8000fa4 <__NVIC_GetPriorityGrouping>
 80010e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	68b9      	ldr	r1, [r7, #8]
 80010ee:	6978      	ldr	r0, [r7, #20]
 80010f0:	f7ff ff90 	bl	8001014 <NVIC_EncodePriority>
 80010f4:	4602      	mov	r2, r0
 80010f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010fa:	4611      	mov	r1, r2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff5f 	bl	8000fc0 <__NVIC_SetPriority>
}
 8001102:	bf00      	nop
 8001104:	3718      	adds	r7, #24
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ffb0 	bl	8001078 <SysTick_Config>
 8001118:	4603      	mov	r3, r0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d101      	bne.n	8001136 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e272      	b.n	800161c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	2b00      	cmp	r3, #0
 8001140:	f000 8087 	beq.w	8001252 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001144:	4b92      	ldr	r3, [pc, #584]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f003 030c 	and.w	r3, r3, #12
 800114c:	2b04      	cmp	r3, #4
 800114e:	d00c      	beq.n	800116a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001150:	4b8f      	ldr	r3, [pc, #572]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f003 030c 	and.w	r3, r3, #12
 8001158:	2b08      	cmp	r3, #8
 800115a:	d112      	bne.n	8001182 <HAL_RCC_OscConfig+0x5e>
 800115c:	4b8c      	ldr	r3, [pc, #560]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001168:	d10b      	bne.n	8001182 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800116a:	4b89      	ldr	r3, [pc, #548]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d06c      	beq.n	8001250 <HAL_RCC_OscConfig+0x12c>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d168      	bne.n	8001250 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e24c      	b.n	800161c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800118a:	d106      	bne.n	800119a <HAL_RCC_OscConfig+0x76>
 800118c:	4b80      	ldr	r3, [pc, #512]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a7f      	ldr	r2, [pc, #508]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 8001192:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001196:	6013      	str	r3, [r2, #0]
 8001198:	e02e      	b.n	80011f8 <HAL_RCC_OscConfig+0xd4>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d10c      	bne.n	80011bc <HAL_RCC_OscConfig+0x98>
 80011a2:	4b7b      	ldr	r3, [pc, #492]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a7a      	ldr	r2, [pc, #488]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 80011a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ac:	6013      	str	r3, [r2, #0]
 80011ae:	4b78      	ldr	r3, [pc, #480]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a77      	ldr	r2, [pc, #476]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 80011b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011b8:	6013      	str	r3, [r2, #0]
 80011ba:	e01d      	b.n	80011f8 <HAL_RCC_OscConfig+0xd4>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011c4:	d10c      	bne.n	80011e0 <HAL_RCC_OscConfig+0xbc>
 80011c6:	4b72      	ldr	r3, [pc, #456]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a71      	ldr	r2, [pc, #452]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 80011cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011d0:	6013      	str	r3, [r2, #0]
 80011d2:	4b6f      	ldr	r3, [pc, #444]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a6e      	ldr	r2, [pc, #440]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 80011d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011dc:	6013      	str	r3, [r2, #0]
 80011de:	e00b      	b.n	80011f8 <HAL_RCC_OscConfig+0xd4>
 80011e0:	4b6b      	ldr	r3, [pc, #428]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a6a      	ldr	r2, [pc, #424]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 80011e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ea:	6013      	str	r3, [r2, #0]
 80011ec:	4b68      	ldr	r3, [pc, #416]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a67      	ldr	r2, [pc, #412]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 80011f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d013      	beq.n	8001228 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001200:	f7ff fe7e 	bl	8000f00 <HAL_GetTick>
 8001204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001206:	e008      	b.n	800121a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001208:	f7ff fe7a 	bl	8000f00 <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	2b64      	cmp	r3, #100	; 0x64
 8001214:	d901      	bls.n	800121a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001216:	2303      	movs	r3, #3
 8001218:	e200      	b.n	800161c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800121a:	4b5d      	ldr	r3, [pc, #372]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d0f0      	beq.n	8001208 <HAL_RCC_OscConfig+0xe4>
 8001226:	e014      	b.n	8001252 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001228:	f7ff fe6a 	bl	8000f00 <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001230:	f7ff fe66 	bl	8000f00 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b64      	cmp	r3, #100	; 0x64
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e1ec      	b.n	800161c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001242:	4b53      	ldr	r3, [pc, #332]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1f0      	bne.n	8001230 <HAL_RCC_OscConfig+0x10c>
 800124e:	e000      	b.n	8001252 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001250:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d063      	beq.n	8001326 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800125e:	4b4c      	ldr	r3, [pc, #304]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f003 030c 	and.w	r3, r3, #12
 8001266:	2b00      	cmp	r3, #0
 8001268:	d00b      	beq.n	8001282 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800126a:	4b49      	ldr	r3, [pc, #292]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f003 030c 	and.w	r3, r3, #12
 8001272:	2b08      	cmp	r3, #8
 8001274:	d11c      	bne.n	80012b0 <HAL_RCC_OscConfig+0x18c>
 8001276:	4b46      	ldr	r3, [pc, #280]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d116      	bne.n	80012b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001282:	4b43      	ldr	r3, [pc, #268]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d005      	beq.n	800129a <HAL_RCC_OscConfig+0x176>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	691b      	ldr	r3, [r3, #16]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d001      	beq.n	800129a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e1c0      	b.n	800161c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800129a:	4b3d      	ldr	r3, [pc, #244]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	00db      	lsls	r3, r3, #3
 80012a8:	4939      	ldr	r1, [pc, #228]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 80012aa:	4313      	orrs	r3, r2
 80012ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ae:	e03a      	b.n	8001326 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	691b      	ldr	r3, [r3, #16]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d020      	beq.n	80012fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012b8:	4b36      	ldr	r3, [pc, #216]	; (8001394 <HAL_RCC_OscConfig+0x270>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012be:	f7ff fe1f 	bl	8000f00 <HAL_GetTick>
 80012c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012c4:	e008      	b.n	80012d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012c6:	f7ff fe1b 	bl	8000f00 <HAL_GetTick>
 80012ca:	4602      	mov	r2, r0
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d901      	bls.n	80012d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80012d4:	2303      	movs	r3, #3
 80012d6:	e1a1      	b.n	800161c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d8:	4b2d      	ldr	r3, [pc, #180]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0302 	and.w	r3, r3, #2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d0f0      	beq.n	80012c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e4:	4b2a      	ldr	r3, [pc, #168]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	695b      	ldr	r3, [r3, #20]
 80012f0:	00db      	lsls	r3, r3, #3
 80012f2:	4927      	ldr	r1, [pc, #156]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 80012f4:	4313      	orrs	r3, r2
 80012f6:	600b      	str	r3, [r1, #0]
 80012f8:	e015      	b.n	8001326 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012fa:	4b26      	ldr	r3, [pc, #152]	; (8001394 <HAL_RCC_OscConfig+0x270>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001300:	f7ff fdfe 	bl	8000f00 <HAL_GetTick>
 8001304:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001306:	e008      	b.n	800131a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001308:	f7ff fdfa 	bl	8000f00 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b02      	cmp	r3, #2
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e180      	b.n	800161c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800131a:	4b1d      	ldr	r3, [pc, #116]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1f0      	bne.n	8001308 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0308 	and.w	r3, r3, #8
 800132e:	2b00      	cmp	r3, #0
 8001330:	d03a      	beq.n	80013a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	699b      	ldr	r3, [r3, #24]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d019      	beq.n	800136e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800133a:	4b17      	ldr	r3, [pc, #92]	; (8001398 <HAL_RCC_OscConfig+0x274>)
 800133c:	2201      	movs	r2, #1
 800133e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001340:	f7ff fdde 	bl	8000f00 <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001348:	f7ff fdda 	bl	8000f00 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b02      	cmp	r3, #2
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e160      	b.n	800161c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800135a:	4b0d      	ldr	r3, [pc, #52]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 800135c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d0f0      	beq.n	8001348 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001366:	2001      	movs	r0, #1
 8001368:	f000 fa9c 	bl	80018a4 <RCC_Delay>
 800136c:	e01c      	b.n	80013a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800136e:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <HAL_RCC_OscConfig+0x274>)
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001374:	f7ff fdc4 	bl	8000f00 <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800137a:	e00f      	b.n	800139c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800137c:	f7ff fdc0 	bl	8000f00 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b02      	cmp	r3, #2
 8001388:	d908      	bls.n	800139c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e146      	b.n	800161c <HAL_RCC_OscConfig+0x4f8>
 800138e:	bf00      	nop
 8001390:	40021000 	.word	0x40021000
 8001394:	42420000 	.word	0x42420000
 8001398:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800139c:	4b92      	ldr	r3, [pc, #584]	; (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 800139e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d1e9      	bne.n	800137c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0304 	and.w	r3, r3, #4
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	f000 80a6 	beq.w	8001502 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013b6:	2300      	movs	r3, #0
 80013b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013ba:	4b8b      	ldr	r3, [pc, #556]	; (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d10d      	bne.n	80013e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013c6:	4b88      	ldr	r3, [pc, #544]	; (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 80013c8:	69db      	ldr	r3, [r3, #28]
 80013ca:	4a87      	ldr	r2, [pc, #540]	; (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 80013cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d0:	61d3      	str	r3, [r2, #28]
 80013d2:	4b85      	ldr	r3, [pc, #532]	; (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013de:	2301      	movs	r3, #1
 80013e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e2:	4b82      	ldr	r3, [pc, #520]	; (80015ec <HAL_RCC_OscConfig+0x4c8>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d118      	bne.n	8001420 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013ee:	4b7f      	ldr	r3, [pc, #508]	; (80015ec <HAL_RCC_OscConfig+0x4c8>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a7e      	ldr	r2, [pc, #504]	; (80015ec <HAL_RCC_OscConfig+0x4c8>)
 80013f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013fa:	f7ff fd81 	bl	8000f00 <HAL_GetTick>
 80013fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001400:	e008      	b.n	8001414 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001402:	f7ff fd7d 	bl	8000f00 <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b64      	cmp	r3, #100	; 0x64
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e103      	b.n	800161c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001414:	4b75      	ldr	r3, [pc, #468]	; (80015ec <HAL_RCC_OscConfig+0x4c8>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800141c:	2b00      	cmp	r3, #0
 800141e:	d0f0      	beq.n	8001402 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d106      	bne.n	8001436 <HAL_RCC_OscConfig+0x312>
 8001428:	4b6f      	ldr	r3, [pc, #444]	; (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 800142a:	6a1b      	ldr	r3, [r3, #32]
 800142c:	4a6e      	ldr	r2, [pc, #440]	; (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	6213      	str	r3, [r2, #32]
 8001434:	e02d      	b.n	8001492 <HAL_RCC_OscConfig+0x36e>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d10c      	bne.n	8001458 <HAL_RCC_OscConfig+0x334>
 800143e:	4b6a      	ldr	r3, [pc, #424]	; (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 8001440:	6a1b      	ldr	r3, [r3, #32]
 8001442:	4a69      	ldr	r2, [pc, #420]	; (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 8001444:	f023 0301 	bic.w	r3, r3, #1
 8001448:	6213      	str	r3, [r2, #32]
 800144a:	4b67      	ldr	r3, [pc, #412]	; (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 800144c:	6a1b      	ldr	r3, [r3, #32]
 800144e:	4a66      	ldr	r2, [pc, #408]	; (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 8001450:	f023 0304 	bic.w	r3, r3, #4
 8001454:	6213      	str	r3, [r2, #32]
 8001456:	e01c      	b.n	8001492 <HAL_RCC_OscConfig+0x36e>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	2b05      	cmp	r3, #5
 800145e:	d10c      	bne.n	800147a <HAL_RCC_OscConfig+0x356>
 8001460:	4b61      	ldr	r3, [pc, #388]	; (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 8001462:	6a1b      	ldr	r3, [r3, #32]
 8001464:	4a60      	ldr	r2, [pc, #384]	; (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 8001466:	f043 0304 	orr.w	r3, r3, #4
 800146a:	6213      	str	r3, [r2, #32]
 800146c:	4b5e      	ldr	r3, [pc, #376]	; (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 800146e:	6a1b      	ldr	r3, [r3, #32]
 8001470:	4a5d      	ldr	r2, [pc, #372]	; (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 8001472:	f043 0301 	orr.w	r3, r3, #1
 8001476:	6213      	str	r3, [r2, #32]
 8001478:	e00b      	b.n	8001492 <HAL_RCC_OscConfig+0x36e>
 800147a:	4b5b      	ldr	r3, [pc, #364]	; (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 800147c:	6a1b      	ldr	r3, [r3, #32]
 800147e:	4a5a      	ldr	r2, [pc, #360]	; (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 8001480:	f023 0301 	bic.w	r3, r3, #1
 8001484:	6213      	str	r3, [r2, #32]
 8001486:	4b58      	ldr	r3, [pc, #352]	; (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 8001488:	6a1b      	ldr	r3, [r3, #32]
 800148a:	4a57      	ldr	r2, [pc, #348]	; (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 800148c:	f023 0304 	bic.w	r3, r3, #4
 8001490:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d015      	beq.n	80014c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800149a:	f7ff fd31 	bl	8000f00 <HAL_GetTick>
 800149e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014a0:	e00a      	b.n	80014b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014a2:	f7ff fd2d 	bl	8000f00 <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e0b1      	b.n	800161c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014b8:	4b4b      	ldr	r3, [pc, #300]	; (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d0ee      	beq.n	80014a2 <HAL_RCC_OscConfig+0x37e>
 80014c4:	e014      	b.n	80014f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c6:	f7ff fd1b 	bl	8000f00 <HAL_GetTick>
 80014ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014cc:	e00a      	b.n	80014e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014ce:	f7ff fd17 	bl	8000f00 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014dc:	4293      	cmp	r3, r2
 80014de:	d901      	bls.n	80014e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e09b      	b.n	800161c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014e4:	4b40      	ldr	r3, [pc, #256]	; (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 80014e6:	6a1b      	ldr	r3, [r3, #32]
 80014e8:	f003 0302 	and.w	r3, r3, #2
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1ee      	bne.n	80014ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80014f0:	7dfb      	ldrb	r3, [r7, #23]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d105      	bne.n	8001502 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014f6:	4b3c      	ldr	r3, [pc, #240]	; (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 80014f8:	69db      	ldr	r3, [r3, #28]
 80014fa:	4a3b      	ldr	r2, [pc, #236]	; (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 80014fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001500:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	2b00      	cmp	r3, #0
 8001508:	f000 8087 	beq.w	800161a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800150c:	4b36      	ldr	r3, [pc, #216]	; (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f003 030c 	and.w	r3, r3, #12
 8001514:	2b08      	cmp	r3, #8
 8001516:	d061      	beq.n	80015dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	69db      	ldr	r3, [r3, #28]
 800151c:	2b02      	cmp	r3, #2
 800151e:	d146      	bne.n	80015ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001520:	4b33      	ldr	r3, [pc, #204]	; (80015f0 <HAL_RCC_OscConfig+0x4cc>)
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001526:	f7ff fceb 	bl	8000f00 <HAL_GetTick>
 800152a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800152e:	f7ff fce7 	bl	8000f00 <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e06d      	b.n	800161c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001540:	4b29      	ldr	r3, [pc, #164]	; (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1f0      	bne.n	800152e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a1b      	ldr	r3, [r3, #32]
 8001550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001554:	d108      	bne.n	8001568 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001556:	4b24      	ldr	r3, [pc, #144]	; (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	4921      	ldr	r1, [pc, #132]	; (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 8001564:	4313      	orrs	r3, r2
 8001566:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001568:	4b1f      	ldr	r3, [pc, #124]	; (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a19      	ldr	r1, [r3, #32]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001578:	430b      	orrs	r3, r1
 800157a:	491b      	ldr	r1, [pc, #108]	; (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 800157c:	4313      	orrs	r3, r2
 800157e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001580:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <HAL_RCC_OscConfig+0x4cc>)
 8001582:	2201      	movs	r2, #1
 8001584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001586:	f7ff fcbb 	bl	8000f00 <HAL_GetTick>
 800158a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800158c:	e008      	b.n	80015a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800158e:	f7ff fcb7 	bl	8000f00 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e03d      	b.n	800161c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015a0:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d0f0      	beq.n	800158e <HAL_RCC_OscConfig+0x46a>
 80015ac:	e035      	b.n	800161a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ae:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <HAL_RCC_OscConfig+0x4cc>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b4:	f7ff fca4 	bl	8000f00 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015bc:	f7ff fca0 	bl	8000f00 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e026      	b.n	800161c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1f0      	bne.n	80015bc <HAL_RCC_OscConfig+0x498>
 80015da:	e01e      	b.n	800161a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	69db      	ldr	r3, [r3, #28]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d107      	bne.n	80015f4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e019      	b.n	800161c <HAL_RCC_OscConfig+0x4f8>
 80015e8:	40021000 	.word	0x40021000
 80015ec:	40007000 	.word	0x40007000
 80015f0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015f4:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <HAL_RCC_OscConfig+0x500>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a1b      	ldr	r3, [r3, #32]
 8001604:	429a      	cmp	r2, r3
 8001606:	d106      	bne.n	8001616 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001612:	429a      	cmp	r2, r3
 8001614:	d001      	beq.n	800161a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e000      	b.n	800161c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40021000 	.word	0x40021000

08001628 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d101      	bne.n	800163c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e0d0      	b.n	80017de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800163c:	4b6a      	ldr	r3, [pc, #424]	; (80017e8 <HAL_RCC_ClockConfig+0x1c0>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0307 	and.w	r3, r3, #7
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	429a      	cmp	r2, r3
 8001648:	d910      	bls.n	800166c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800164a:	4b67      	ldr	r3, [pc, #412]	; (80017e8 <HAL_RCC_ClockConfig+0x1c0>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f023 0207 	bic.w	r2, r3, #7
 8001652:	4965      	ldr	r1, [pc, #404]	; (80017e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	4313      	orrs	r3, r2
 8001658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800165a:	4b63      	ldr	r3, [pc, #396]	; (80017e8 <HAL_RCC_ClockConfig+0x1c0>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	429a      	cmp	r2, r3
 8001666:	d001      	beq.n	800166c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e0b8      	b.n	80017de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d020      	beq.n	80016ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	2b00      	cmp	r3, #0
 8001682:	d005      	beq.n	8001690 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001684:	4b59      	ldr	r3, [pc, #356]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	4a58      	ldr	r2, [pc, #352]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 800168a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800168e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0308 	and.w	r3, r3, #8
 8001698:	2b00      	cmp	r3, #0
 800169a:	d005      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800169c:	4b53      	ldr	r3, [pc, #332]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	4a52      	ldr	r2, [pc, #328]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 80016a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80016a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016a8:	4b50      	ldr	r3, [pc, #320]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	494d      	ldr	r1, [pc, #308]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d040      	beq.n	8001748 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d107      	bne.n	80016de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ce:	4b47      	ldr	r3, [pc, #284]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d115      	bne.n	8001706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e07f      	b.n	80017de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d107      	bne.n	80016f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016e6:	4b41      	ldr	r3, [pc, #260]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d109      	bne.n	8001706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e073      	b.n	80017de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f6:	4b3d      	ldr	r3, [pc, #244]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e06b      	b.n	80017de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001706:	4b39      	ldr	r3, [pc, #228]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f023 0203 	bic.w	r2, r3, #3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	4936      	ldr	r1, [pc, #216]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 8001714:	4313      	orrs	r3, r2
 8001716:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001718:	f7ff fbf2 	bl	8000f00 <HAL_GetTick>
 800171c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800171e:	e00a      	b.n	8001736 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001720:	f7ff fbee 	bl	8000f00 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	f241 3288 	movw	r2, #5000	; 0x1388
 800172e:	4293      	cmp	r3, r2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e053      	b.n	80017de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001736:	4b2d      	ldr	r3, [pc, #180]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f003 020c 	and.w	r2, r3, #12
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	429a      	cmp	r2, r3
 8001746:	d1eb      	bne.n	8001720 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001748:	4b27      	ldr	r3, [pc, #156]	; (80017e8 <HAL_RCC_ClockConfig+0x1c0>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0307 	and.w	r3, r3, #7
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	429a      	cmp	r2, r3
 8001754:	d210      	bcs.n	8001778 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001756:	4b24      	ldr	r3, [pc, #144]	; (80017e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f023 0207 	bic.w	r2, r3, #7
 800175e:	4922      	ldr	r1, [pc, #136]	; (80017e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	4313      	orrs	r3, r2
 8001764:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001766:	4b20      	ldr	r3, [pc, #128]	; (80017e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	429a      	cmp	r2, r3
 8001772:	d001      	beq.n	8001778 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e032      	b.n	80017de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	2b00      	cmp	r3, #0
 8001782:	d008      	beq.n	8001796 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001784:	4b19      	ldr	r3, [pc, #100]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	4916      	ldr	r1, [pc, #88]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 8001792:	4313      	orrs	r3, r2
 8001794:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0308 	and.w	r3, r3, #8
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d009      	beq.n	80017b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017a2:	4b12      	ldr	r3, [pc, #72]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	490e      	ldr	r1, [pc, #56]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017b6:	f000 f821 	bl	80017fc <HAL_RCC_GetSysClockFreq>
 80017ba:	4602      	mov	r2, r0
 80017bc:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	091b      	lsrs	r3, r3, #4
 80017c2:	f003 030f 	and.w	r3, r3, #15
 80017c6:	490a      	ldr	r1, [pc, #40]	; (80017f0 <HAL_RCC_ClockConfig+0x1c8>)
 80017c8:	5ccb      	ldrb	r3, [r1, r3]
 80017ca:	fa22 f303 	lsr.w	r3, r2, r3
 80017ce:	4a09      	ldr	r2, [pc, #36]	; (80017f4 <HAL_RCC_ClockConfig+0x1cc>)
 80017d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017d2:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <HAL_RCC_ClockConfig+0x1d0>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff fb50 	bl	8000e7c <HAL_InitTick>

  return HAL_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40022000 	.word	0x40022000
 80017ec:	40021000 	.word	0x40021000
 80017f0:	08004f8c 	.word	0x08004f8c
 80017f4:	20000098 	.word	0x20000098
 80017f8:	2000009c 	.word	0x2000009c

080017fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b087      	sub	sp, #28
 8001800:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	2300      	movs	r3, #0
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]
 800180e:	2300      	movs	r3, #0
 8001810:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001812:	2300      	movs	r3, #0
 8001814:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001816:	4b1e      	ldr	r3, [pc, #120]	; (8001890 <HAL_RCC_GetSysClockFreq+0x94>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f003 030c 	and.w	r3, r3, #12
 8001822:	2b04      	cmp	r3, #4
 8001824:	d002      	beq.n	800182c <HAL_RCC_GetSysClockFreq+0x30>
 8001826:	2b08      	cmp	r3, #8
 8001828:	d003      	beq.n	8001832 <HAL_RCC_GetSysClockFreq+0x36>
 800182a:	e027      	b.n	800187c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800182c:	4b19      	ldr	r3, [pc, #100]	; (8001894 <HAL_RCC_GetSysClockFreq+0x98>)
 800182e:	613b      	str	r3, [r7, #16]
      break;
 8001830:	e027      	b.n	8001882 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	0c9b      	lsrs	r3, r3, #18
 8001836:	f003 030f 	and.w	r3, r3, #15
 800183a:	4a17      	ldr	r2, [pc, #92]	; (8001898 <HAL_RCC_GetSysClockFreq+0x9c>)
 800183c:	5cd3      	ldrb	r3, [r2, r3]
 800183e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d010      	beq.n	800186c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800184a:	4b11      	ldr	r3, [pc, #68]	; (8001890 <HAL_RCC_GetSysClockFreq+0x94>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	0c5b      	lsrs	r3, r3, #17
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	4a11      	ldr	r2, [pc, #68]	; (800189c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001856:	5cd3      	ldrb	r3, [r2, r3]
 8001858:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a0d      	ldr	r2, [pc, #52]	; (8001894 <HAL_RCC_GetSysClockFreq+0x98>)
 800185e:	fb03 f202 	mul.w	r2, r3, r2
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	fbb2 f3f3 	udiv	r3, r2, r3
 8001868:	617b      	str	r3, [r7, #20]
 800186a:	e004      	b.n	8001876 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4a0c      	ldr	r2, [pc, #48]	; (80018a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001870:	fb02 f303 	mul.w	r3, r2, r3
 8001874:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	613b      	str	r3, [r7, #16]
      break;
 800187a:	e002      	b.n	8001882 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800187c:	4b05      	ldr	r3, [pc, #20]	; (8001894 <HAL_RCC_GetSysClockFreq+0x98>)
 800187e:	613b      	str	r3, [r7, #16]
      break;
 8001880:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001882:	693b      	ldr	r3, [r7, #16]
}
 8001884:	4618      	mov	r0, r3
 8001886:	371c      	adds	r7, #28
 8001888:	46bd      	mov	sp, r7
 800188a:	bc80      	pop	{r7}
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	40021000 	.word	0x40021000
 8001894:	007a1200 	.word	0x007a1200
 8001898:	08004f9c 	.word	0x08004f9c
 800189c:	08004fac 	.word	0x08004fac
 80018a0:	003d0900 	.word	0x003d0900

080018a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018ac:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <RCC_Delay+0x34>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a0a      	ldr	r2, [pc, #40]	; (80018dc <RCC_Delay+0x38>)
 80018b2:	fba2 2303 	umull	r2, r3, r2, r3
 80018b6:	0a5b      	lsrs	r3, r3, #9
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	fb02 f303 	mul.w	r3, r2, r3
 80018be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80018c0:	bf00      	nop
  }
  while (Delay --);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	1e5a      	subs	r2, r3, #1
 80018c6:	60fa      	str	r2, [r7, #12]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d1f9      	bne.n	80018c0 <RCC_Delay+0x1c>
}
 80018cc:	bf00      	nop
 80018ce:	bf00      	nop
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr
 80018d8:	20000098 	.word	0x20000098
 80018dc:	10624dd3 	.word	0x10624dd3

080018e0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80018e6:	f3ef 8305 	mrs	r3, IPSR
 80018ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80018ec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d10f      	bne.n	8001912 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80018f2:	f3ef 8310 	mrs	r3, PRIMASK
 80018f6:	607b      	str	r3, [r7, #4]
  return(result);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d109      	bne.n	8001912 <osKernelInitialize+0x32>
 80018fe:	4b10      	ldr	r3, [pc, #64]	; (8001940 <osKernelInitialize+0x60>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2b02      	cmp	r3, #2
 8001904:	d109      	bne.n	800191a <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001906:	f3ef 8311 	mrs	r3, BASEPRI
 800190a:	603b      	str	r3, [r7, #0]
  return(result);
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d003      	beq.n	800191a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001912:	f06f 0305 	mvn.w	r3, #5
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	e00c      	b.n	8001934 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800191a:	4b09      	ldr	r3, [pc, #36]	; (8001940 <osKernelInitialize+0x60>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d105      	bne.n	800192e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8001922:	4b07      	ldr	r3, [pc, #28]	; (8001940 <osKernelInitialize+0x60>)
 8001924:	2201      	movs	r2, #1
 8001926:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	e002      	b.n	8001934 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800192e:	f04f 33ff 	mov.w	r3, #4294967295
 8001932:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001934:	68fb      	ldr	r3, [r7, #12]
}
 8001936:	4618      	mov	r0, r3
 8001938:	3714      	adds	r7, #20
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr
 8001940:	200000e0 	.word	0x200000e0

08001944 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800194a:	f3ef 8305 	mrs	r3, IPSR
 800194e:	60bb      	str	r3, [r7, #8]
  return(result);
 8001950:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001952:	2b00      	cmp	r3, #0
 8001954:	d10f      	bne.n	8001976 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001956:	f3ef 8310 	mrs	r3, PRIMASK
 800195a:	607b      	str	r3, [r7, #4]
  return(result);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d109      	bne.n	8001976 <osKernelStart+0x32>
 8001962:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <osKernelStart+0x64>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2b02      	cmp	r3, #2
 8001968:	d109      	bne.n	800197e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800196a:	f3ef 8311 	mrs	r3, BASEPRI
 800196e:	603b      	str	r3, [r7, #0]
  return(result);
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <osKernelStart+0x3a>
    stat = osErrorISR;
 8001976:	f06f 0305 	mvn.w	r3, #5
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	e00e      	b.n	800199c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800197e:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <osKernelStart+0x64>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d107      	bne.n	8001996 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8001986:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <osKernelStart+0x64>)
 8001988:	2202      	movs	r2, #2
 800198a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800198c:	f001 fd1c 	bl	80033c8 <vTaskStartScheduler>
      stat = osOK;
 8001990:	2300      	movs	r3, #0
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	e002      	b.n	800199c <osKernelStart+0x58>
    } else {
      stat = osError;
 8001996:	f04f 33ff 	mov.w	r3, #4294967295
 800199a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800199c:	68fb      	ldr	r3, [r7, #12]
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	200000e0 	.word	0x200000e0

080019ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b092      	sub	sp, #72	; 0x48
 80019b0:	af04      	add	r7, sp, #16
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80019bc:	f3ef 8305 	mrs	r3, IPSR
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	f040 8094 	bne.w	8001af2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80019ca:	f3ef 8310 	mrs	r3, PRIMASK
 80019ce:	623b      	str	r3, [r7, #32]
  return(result);
 80019d0:	6a3b      	ldr	r3, [r7, #32]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f040 808d 	bne.w	8001af2 <osThreadNew+0x146>
 80019d8:	4b48      	ldr	r3, [pc, #288]	; (8001afc <osThreadNew+0x150>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d106      	bne.n	80019ee <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80019e0:	f3ef 8311 	mrs	r3, BASEPRI
 80019e4:	61fb      	str	r3, [r7, #28]
  return(result);
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f040 8082 	bne.w	8001af2 <osThreadNew+0x146>
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d07e      	beq.n	8001af2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80019f4:	2380      	movs	r3, #128	; 0x80
 80019f6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80019f8:	2318      	movs	r3, #24
 80019fa:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80019fc:	2300      	movs	r3, #0
 80019fe:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8001a00:	f107 031b 	add.w	r3, r7, #27
 8001a04:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8001a06:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d045      	beq.n	8001a9e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d002      	beq.n	8001a20 <osThreadNew+0x74>
        name = attr->name;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d002      	beq.n	8001a2e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d008      	beq.n	8001a46 <osThreadNew+0x9a>
 8001a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a36:	2b38      	cmp	r3, #56	; 0x38
 8001a38:	d805      	bhi.n	8001a46 <osThreadNew+0x9a>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <osThreadNew+0x9e>
        return (NULL);
 8001a46:	2300      	movs	r3, #0
 8001a48:	e054      	b.n	8001af4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	089b      	lsrs	r3, r3, #2
 8001a58:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d00e      	beq.n	8001a80 <osThreadNew+0xd4>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	2b5b      	cmp	r3, #91	; 0x5b
 8001a68:	d90a      	bls.n	8001a80 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d006      	beq.n	8001a80 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d002      	beq.n	8001a80 <osThreadNew+0xd4>
        mem = 1;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a7e:	e010      	b.n	8001aa2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d10c      	bne.n	8001aa2 <osThreadNew+0xf6>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d108      	bne.n	8001aa2 <osThreadNew+0xf6>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	691b      	ldr	r3, [r3, #16]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d104      	bne.n	8001aa2 <osThreadNew+0xf6>
          mem = 0;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a9c:	e001      	b.n	8001aa2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8001aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d110      	bne.n	8001aca <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001ab0:	9202      	str	r2, [sp, #8]
 8001ab2:	9301      	str	r3, [sp, #4]
 8001ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001abc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001abe:	68f8      	ldr	r0, [r7, #12]
 8001ac0:	f001 faea 	bl	8003098 <xTaskCreateStatic>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	617b      	str	r3, [r7, #20]
 8001ac8:	e013      	b.n	8001af2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8001aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d110      	bne.n	8001af2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	9301      	str	r3, [sp, #4]
 8001ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001adc:	9300      	str	r3, [sp, #0]
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001ae2:	68f8      	ldr	r0, [r7, #12]
 8001ae4:	f001 fb34 	bl	8003150 <xTaskCreate>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d001      	beq.n	8001af2 <osThreadNew+0x146>
          hTask = NULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001af2:	697b      	ldr	r3, [r7, #20]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3738      	adds	r7, #56	; 0x38
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	200000e0 	.word	0x200000e0

08001b00 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b08c      	sub	sp, #48	; 0x30
 8001b04:	af02      	add	r7, sp, #8
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001b10:	f3ef 8305 	mrs	r3, IPSR
 8001b14:	61bb      	str	r3, [r7, #24]
  return(result);
 8001b16:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f040 8086 	bne.w	8001c2a <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b1e:	f3ef 8310 	mrs	r3, PRIMASK
 8001b22:	617b      	str	r3, [r7, #20]
  return(result);
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d17f      	bne.n	8001c2a <osSemaphoreNew+0x12a>
 8001b2a:	4b42      	ldr	r3, [pc, #264]	; (8001c34 <osSemaphoreNew+0x134>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d105      	bne.n	8001b3e <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001b32:	f3ef 8311 	mrs	r3, BASEPRI
 8001b36:	613b      	str	r3, [r7, #16]
  return(result);
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d175      	bne.n	8001c2a <osSemaphoreNew+0x12a>
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d072      	beq.n	8001c2a <osSemaphoreNew+0x12a>
 8001b44:	68ba      	ldr	r2, [r7, #8]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d86e      	bhi.n	8001c2a <osSemaphoreNew+0x12a>
    mem = -1;
 8001b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b50:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d015      	beq.n	8001b84 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d006      	beq.n	8001b6e <osSemaphoreNew+0x6e>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	2b4f      	cmp	r3, #79	; 0x4f
 8001b66:	d902      	bls.n	8001b6e <osSemaphoreNew+0x6e>
        mem = 1;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	623b      	str	r3, [r7, #32]
 8001b6c:	e00c      	b.n	8001b88 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d108      	bne.n	8001b88 <osSemaphoreNew+0x88>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d104      	bne.n	8001b88 <osSemaphoreNew+0x88>
          mem = 0;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	623b      	str	r3, [r7, #32]
 8001b82:	e001      	b.n	8001b88 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8001b88:	6a3b      	ldr	r3, [r7, #32]
 8001b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b8e:	d04c      	beq.n	8001c2a <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d128      	bne.n	8001be8 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8001b96:	6a3b      	ldr	r3, [r7, #32]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d10a      	bne.n	8001bb2 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	2203      	movs	r2, #3
 8001ba2:	9200      	str	r2, [sp, #0]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	2001      	movs	r0, #1
 8001baa:	f000 fad3 	bl	8002154 <xQueueGenericCreateStatic>
 8001bae:	6278      	str	r0, [r7, #36]	; 0x24
 8001bb0:	e005      	b.n	8001bbe <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8001bb2:	2203      	movs	r2, #3
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	2001      	movs	r0, #1
 8001bb8:	f000 fb43 	bl	8002242 <xQueueGenericCreate>
 8001bbc:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d022      	beq.n	8001c0a <osSemaphoreNew+0x10a>
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d01f      	beq.n	8001c0a <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8001bca:	2300      	movs	r3, #0
 8001bcc:	2200      	movs	r2, #0
 8001bce:	2100      	movs	r1, #0
 8001bd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001bd2:	f000 fc01 	bl	80023d8 <xQueueGenericSend>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d016      	beq.n	8001c0a <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8001bdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001bde:	f001 f88b 	bl	8002cf8 <vQueueDelete>
            hSemaphore = NULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	627b      	str	r3, [r7, #36]	; 0x24
 8001be6:	e010      	b.n	8001c0a <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8001be8:	6a3b      	ldr	r3, [r7, #32]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d108      	bne.n	8001c00 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	68b9      	ldr	r1, [r7, #8]
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	f000 fb84 	bl	8002304 <xQueueCreateCountingSemaphoreStatic>
 8001bfc:	6278      	str	r0, [r7, #36]	; 0x24
 8001bfe:	e004      	b.n	8001c0a <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8001c00:	68b9      	ldr	r1, [r7, #8]
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	f000 fbb5 	bl	8002372 <xQueueCreateCountingSemaphore>
 8001c08:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d00c      	beq.n	8001c2a <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <osSemaphoreNew+0x11e>
          name = attr->name;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	61fb      	str	r3, [r7, #28]
 8001c1c:	e001      	b.n	8001c22 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8001c22:	69f9      	ldr	r1, [r7, #28]
 8001c24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001c26:	f001 f9b1 	bl	8002f8c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3728      	adds	r7, #40	; 0x28
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	200000e0 	.word	0x200000e0

08001c38 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b088      	sub	sp, #32
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8001c46:	2300      	movs	r3, #0
 8001c48:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d103      	bne.n	8001c58 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8001c50:	f06f 0303 	mvn.w	r3, #3
 8001c54:	61fb      	str	r3, [r7, #28]
 8001c56:	e04b      	b.n	8001cf0 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c58:	f3ef 8305 	mrs	r3, IPSR
 8001c5c:	617b      	str	r3, [r7, #20]
  return(result);
 8001c5e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d10f      	bne.n	8001c84 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c64:	f3ef 8310 	mrs	r3, PRIMASK
 8001c68:	613b      	str	r3, [r7, #16]
  return(result);
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d109      	bne.n	8001c84 <osSemaphoreAcquire+0x4c>
 8001c70:	4b22      	ldr	r3, [pc, #136]	; (8001cfc <osSemaphoreAcquire+0xc4>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d128      	bne.n	8001cca <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001c78:	f3ef 8311 	mrs	r3, BASEPRI
 8001c7c:	60fb      	str	r3, [r7, #12]
  return(result);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d022      	beq.n	8001cca <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8001c8a:	f06f 0303 	mvn.w	r3, #3
 8001c8e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8001c90:	e02d      	b.n	8001cee <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8001c92:	2300      	movs	r3, #0
 8001c94:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8001c96:	f107 0308 	add.w	r3, r7, #8
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	69b8      	ldr	r0, [r7, #24]
 8001ca0:	f000 ffaa 	bl	8002bf8 <xQueueReceiveFromISR>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d003      	beq.n	8001cb2 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8001caa:	f06f 0302 	mvn.w	r3, #2
 8001cae:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8001cb0:	e01d      	b.n	8001cee <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d01a      	beq.n	8001cee <osSemaphoreAcquire+0xb6>
 8001cb8:	4b11      	ldr	r3, [pc, #68]	; (8001d00 <osSemaphoreAcquire+0xc8>)
 8001cba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	f3bf 8f4f 	dsb	sy
 8001cc4:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8001cc8:	e011      	b.n	8001cee <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8001cca:	6839      	ldr	r1, [r7, #0]
 8001ccc:	69b8      	ldr	r0, [r7, #24]
 8001cce:	f000 fe87 	bl	80029e0 <xQueueSemaphoreTake>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d00b      	beq.n	8001cf0 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8001cde:	f06f 0301 	mvn.w	r3, #1
 8001ce2:	61fb      	str	r3, [r7, #28]
 8001ce4:	e004      	b.n	8001cf0 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8001ce6:	f06f 0302 	mvn.w	r3, #2
 8001cea:	61fb      	str	r3, [r7, #28]
 8001cec:	e000      	b.n	8001cf0 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8001cee:	bf00      	nop
      }
    }
  }

  return (stat);
 8001cf0:	69fb      	ldr	r3, [r7, #28]
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3720      	adds	r7, #32
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	200000e0 	.word	0x200000e0
 8001d00:	e000ed04 	.word	0xe000ed04

08001d04 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b088      	sub	sp, #32
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8001d10:	2300      	movs	r3, #0
 8001d12:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d103      	bne.n	8001d22 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8001d1a:	f06f 0303 	mvn.w	r3, #3
 8001d1e:	61fb      	str	r3, [r7, #28]
 8001d20:	e03e      	b.n	8001da0 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001d22:	f3ef 8305 	mrs	r3, IPSR
 8001d26:	617b      	str	r3, [r7, #20]
  return(result);
 8001d28:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d10f      	bne.n	8001d4e <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d2e:	f3ef 8310 	mrs	r3, PRIMASK
 8001d32:	613b      	str	r3, [r7, #16]
  return(result);
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d109      	bne.n	8001d4e <osSemaphoreRelease+0x4a>
 8001d3a:	4b1c      	ldr	r3, [pc, #112]	; (8001dac <osSemaphoreRelease+0xa8>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d120      	bne.n	8001d84 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001d42:	f3ef 8311 	mrs	r3, BASEPRI
 8001d46:	60fb      	str	r3, [r7, #12]
  return(result);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d01a      	beq.n	8001d84 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8001d52:	f107 0308 	add.w	r3, r7, #8
 8001d56:	4619      	mov	r1, r3
 8001d58:	69b8      	ldr	r0, [r7, #24]
 8001d5a:	f000 fcd3 	bl	8002704 <xQueueGiveFromISR>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d003      	beq.n	8001d6c <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8001d64:	f06f 0302 	mvn.w	r3, #2
 8001d68:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8001d6a:	e018      	b.n	8001d9e <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d015      	beq.n	8001d9e <osSemaphoreRelease+0x9a>
 8001d72:	4b0f      	ldr	r3, [pc, #60]	; (8001db0 <osSemaphoreRelease+0xac>)
 8001d74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	f3bf 8f4f 	dsb	sy
 8001d7e:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8001d82:	e00c      	b.n	8001d9e <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8001d84:	2300      	movs	r3, #0
 8001d86:	2200      	movs	r2, #0
 8001d88:	2100      	movs	r1, #0
 8001d8a:	69b8      	ldr	r0, [r7, #24]
 8001d8c:	f000 fb24 	bl	80023d8 <xQueueGenericSend>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d004      	beq.n	8001da0 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8001d96:	f06f 0302 	mvn.w	r3, #2
 8001d9a:	61fb      	str	r3, [r7, #28]
 8001d9c:	e000      	b.n	8001da0 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8001d9e:	bf00      	nop
    }
  }

  return (stat);
 8001da0:	69fb      	ldr	r3, [r7, #28]
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3720      	adds	r7, #32
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	200000e0 	.word	0x200000e0
 8001db0:	e000ed04 	.word	0xe000ed04

08001db4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08c      	sub	sp, #48	; 0x30
 8001db8:	af02      	add	r7, sp, #8
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001dc4:	f3ef 8305 	mrs	r3, IPSR
 8001dc8:	61bb      	str	r3, [r7, #24]
  return(result);
 8001dca:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d16f      	bne.n	8001eb0 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001dd0:	f3ef 8310 	mrs	r3, PRIMASK
 8001dd4:	617b      	str	r3, [r7, #20]
  return(result);
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d169      	bne.n	8001eb0 <osMessageQueueNew+0xfc>
 8001ddc:	4b37      	ldr	r3, [pc, #220]	; (8001ebc <osMessageQueueNew+0x108>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d105      	bne.n	8001df0 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001de4:	f3ef 8311 	mrs	r3, BASEPRI
 8001de8:	613b      	str	r3, [r7, #16]
  return(result);
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d15f      	bne.n	8001eb0 <osMessageQueueNew+0xfc>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d05c      	beq.n	8001eb0 <osMessageQueueNew+0xfc>
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d059      	beq.n	8001eb0 <osMessageQueueNew+0xfc>
    mem = -1;
 8001dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8001e00:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d029      	beq.n	8001e5c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d012      	beq.n	8001e36 <osMessageQueueNew+0x82>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	2b4f      	cmp	r3, #79	; 0x4f
 8001e16:	d90e      	bls.n	8001e36 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d00a      	beq.n	8001e36 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	695a      	ldr	r2, [r3, #20]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	68b9      	ldr	r1, [r7, #8]
 8001e28:	fb01 f303 	mul.w	r3, r1, r3
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d302      	bcc.n	8001e36 <osMessageQueueNew+0x82>
        mem = 1;
 8001e30:	2301      	movs	r3, #1
 8001e32:	623b      	str	r3, [r7, #32]
 8001e34:	e014      	b.n	8001e60 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d110      	bne.n	8001e60 <osMessageQueueNew+0xac>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d10c      	bne.n	8001e60 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d108      	bne.n	8001e60 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d104      	bne.n	8001e60 <osMessageQueueNew+0xac>
          mem = 0;
 8001e56:	2300      	movs	r3, #0
 8001e58:	623b      	str	r3, [r7, #32]
 8001e5a:	e001      	b.n	8001e60 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8001e60:	6a3b      	ldr	r3, [r7, #32]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d10b      	bne.n	8001e7e <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	691a      	ldr	r2, [r3, #16]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	2100      	movs	r1, #0
 8001e70:	9100      	str	r1, [sp, #0]
 8001e72:	68b9      	ldr	r1, [r7, #8]
 8001e74:	68f8      	ldr	r0, [r7, #12]
 8001e76:	f000 f96d 	bl	8002154 <xQueueGenericCreateStatic>
 8001e7a:	6278      	str	r0, [r7, #36]	; 0x24
 8001e7c:	e008      	b.n	8001e90 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8001e7e:	6a3b      	ldr	r3, [r7, #32]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d105      	bne.n	8001e90 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8001e84:	2200      	movs	r2, #0
 8001e86:	68b9      	ldr	r1, [r7, #8]
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	f000 f9da 	bl	8002242 <xQueueGenericCreate>
 8001e8e:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8001e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00c      	beq.n	8001eb0 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <osMessageQueueNew+0xf0>
        name = attr->name;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	61fb      	str	r3, [r7, #28]
 8001ea2:	e001      	b.n	8001ea8 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8001ea8:	69f9      	ldr	r1, [r7, #28]
 8001eaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001eac:	f001 f86e 	bl	8002f8c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3728      	adds	r7, #40	; 0x28
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	200000e0 	.word	0x200000e0

08001ec0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	4a06      	ldr	r2, [pc, #24]	; (8001ee8 <vApplicationGetIdleTaskMemory+0x28>)
 8001ed0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	4a05      	ldr	r2, [pc, #20]	; (8001eec <vApplicationGetIdleTaskMemory+0x2c>)
 8001ed6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2280      	movs	r2, #128	; 0x80
 8001edc:	601a      	str	r2, [r3, #0]
}
 8001ede:	bf00      	nop
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr
 8001ee8:	200000e4 	.word	0x200000e4
 8001eec:	20000140 	.word	0x20000140

08001ef0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	4a07      	ldr	r2, [pc, #28]	; (8001f1c <vApplicationGetTimerTaskMemory+0x2c>)
 8001f00:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	4a06      	ldr	r2, [pc, #24]	; (8001f20 <vApplicationGetTimerTaskMemory+0x30>)
 8001f06:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f0e:	601a      	str	r2, [r3, #0]
}
 8001f10:	bf00      	nop
 8001f12:	3714      	adds	r7, #20
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bc80      	pop	{r7}
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	20000340 	.word	0x20000340
 8001f20:	2000039c 	.word	0x2000039c

08001f24 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f103 0208 	add.w	r2, r3, #8
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f04f 32ff 	mov.w	r2, #4294967295
 8001f3c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f103 0208 	add.w	r2, r3, #8
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f103 0208 	add.w	r2, r3, #8
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bc80      	pop	{r7}
 8001f60:	4770      	bx	lr

08001f62 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001f62:	b480      	push	{r7}
 8001f64:	b083      	sub	sp, #12
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc80      	pop	{r7}
 8001f78:	4770      	bx	lr

08001f7a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b085      	sub	sp, #20
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
 8001f82:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	1c5a      	adds	r2, r3, #1
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	601a      	str	r2, [r3, #0]
}
 8001fb6:	bf00      	nop
 8001fb8:	3714      	adds	r7, #20
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bc80      	pop	{r7}
 8001fbe:	4770      	bx	lr

08001fc0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd6:	d103      	bne.n	8001fe0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	e00c      	b.n	8001ffa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3308      	adds	r3, #8
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	e002      	b.n	8001fee <vListInsert+0x2e>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68ba      	ldr	r2, [r7, #8]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d2f6      	bcs.n	8001fe8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	685a      	ldr	r2, [r3, #4]
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	1c5a      	adds	r2, r3, #1
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	601a      	str	r2, [r3, #0]
}
 8002026:	bf00      	nop
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr

08002030 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	691b      	ldr	r3, [r3, #16]
 800203c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	6892      	ldr	r2, [r2, #8]
 8002046:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6852      	ldr	r2, [r2, #4]
 8002050:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	429a      	cmp	r2, r3
 800205a:	d103      	bne.n	8002064 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	1e5a      	subs	r2, r3, #1
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
}
 8002078:	4618      	mov	r0, r3
 800207a:	3714      	adds	r7, #20
 800207c:	46bd      	mov	sp, r7
 800207e:	bc80      	pop	{r7}
 8002080:	4770      	bx	lr
	...

08002084 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d10a      	bne.n	80020ae <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800209c:	f383 8811 	msr	BASEPRI, r3
 80020a0:	f3bf 8f6f 	isb	sy
 80020a4:	f3bf 8f4f 	dsb	sy
 80020a8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80020aa:	bf00      	nop
 80020ac:	e7fe      	b.n	80020ac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80020ae:	f002 fbc5 	bl	800483c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ba:	68f9      	ldr	r1, [r7, #12]
 80020bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80020be:	fb01 f303 	mul.w	r3, r1, r3
 80020c2:	441a      	add	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2200      	movs	r2, #0
 80020cc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020de:	3b01      	subs	r3, #1
 80020e0:	68f9      	ldr	r1, [r7, #12]
 80020e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80020e4:	fb01 f303 	mul.w	r3, r1, r3
 80020e8:	441a      	add	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	22ff      	movs	r2, #255	; 0xff
 80020f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	22ff      	movs	r2, #255	; 0xff
 80020fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d114      	bne.n	800212e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d01a      	beq.n	8002142 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	3310      	adds	r3, #16
 8002110:	4618      	mov	r0, r3
 8002112:	f001 fbe3 	bl	80038dc <xTaskRemoveFromEventList>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d012      	beq.n	8002142 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800211c:	4b0c      	ldr	r3, [pc, #48]	; (8002150 <xQueueGenericReset+0xcc>)
 800211e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	f3bf 8f4f 	dsb	sy
 8002128:	f3bf 8f6f 	isb	sy
 800212c:	e009      	b.n	8002142 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	3310      	adds	r3, #16
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff fef6 	bl	8001f24 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	3324      	adds	r3, #36	; 0x24
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff fef1 	bl	8001f24 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002142:	f002 fbab 	bl	800489c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002146:	2301      	movs	r3, #1
}
 8002148:	4618      	mov	r0, r3
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	e000ed04 	.word	0xe000ed04

08002154 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002154:	b580      	push	{r7, lr}
 8002156:	b08e      	sub	sp, #56	; 0x38
 8002158:	af02      	add	r7, sp, #8
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
 8002160:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d10a      	bne.n	800217e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800216c:	f383 8811 	msr	BASEPRI, r3
 8002170:	f3bf 8f6f 	isb	sy
 8002174:	f3bf 8f4f 	dsb	sy
 8002178:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800217a:	bf00      	nop
 800217c:	e7fe      	b.n	800217c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10a      	bne.n	800219a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002188:	f383 8811 	msr	BASEPRI, r3
 800218c:	f3bf 8f6f 	isb	sy
 8002190:	f3bf 8f4f 	dsb	sy
 8002194:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002196:	bf00      	nop
 8002198:	e7fe      	b.n	8002198 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d002      	beq.n	80021a6 <xQueueGenericCreateStatic+0x52>
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <xQueueGenericCreateStatic+0x56>
 80021a6:	2301      	movs	r3, #1
 80021a8:	e000      	b.n	80021ac <xQueueGenericCreateStatic+0x58>
 80021aa:	2300      	movs	r3, #0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d10a      	bne.n	80021c6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80021b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021b4:	f383 8811 	msr	BASEPRI, r3
 80021b8:	f3bf 8f6f 	isb	sy
 80021bc:	f3bf 8f4f 	dsb	sy
 80021c0:	623b      	str	r3, [r7, #32]
}
 80021c2:	bf00      	nop
 80021c4:	e7fe      	b.n	80021c4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d102      	bne.n	80021d2 <xQueueGenericCreateStatic+0x7e>
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <xQueueGenericCreateStatic+0x82>
 80021d2:	2301      	movs	r3, #1
 80021d4:	e000      	b.n	80021d8 <xQueueGenericCreateStatic+0x84>
 80021d6:	2300      	movs	r3, #0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d10a      	bne.n	80021f2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80021dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021e0:	f383 8811 	msr	BASEPRI, r3
 80021e4:	f3bf 8f6f 	isb	sy
 80021e8:	f3bf 8f4f 	dsb	sy
 80021ec:	61fb      	str	r3, [r7, #28]
}
 80021ee:	bf00      	nop
 80021f0:	e7fe      	b.n	80021f0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80021f2:	2350      	movs	r3, #80	; 0x50
 80021f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	2b50      	cmp	r3, #80	; 0x50
 80021fa:	d00a      	beq.n	8002212 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80021fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002200:	f383 8811 	msr	BASEPRI, r3
 8002204:	f3bf 8f6f 	isb	sy
 8002208:	f3bf 8f4f 	dsb	sy
 800220c:	61bb      	str	r3, [r7, #24]
}
 800220e:	bf00      	nop
 8002210:	e7fe      	b.n	8002210 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00d      	beq.n	8002238 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800221c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002224:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	4613      	mov	r3, r2
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	68b9      	ldr	r1, [r7, #8]
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f000 f843 	bl	80022be <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800223a:	4618      	mov	r0, r3
 800223c:	3730      	adds	r7, #48	; 0x30
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002242:	b580      	push	{r7, lr}
 8002244:	b08a      	sub	sp, #40	; 0x28
 8002246:	af02      	add	r7, sp, #8
 8002248:	60f8      	str	r0, [r7, #12]
 800224a:	60b9      	str	r1, [r7, #8]
 800224c:	4613      	mov	r3, r2
 800224e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d10a      	bne.n	800226c <xQueueGenericCreate+0x2a>
	__asm volatile
 8002256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800225a:	f383 8811 	msr	BASEPRI, r3
 800225e:	f3bf 8f6f 	isb	sy
 8002262:	f3bf 8f4f 	dsb	sy
 8002266:	613b      	str	r3, [r7, #16]
}
 8002268:	bf00      	nop
 800226a:	e7fe      	b.n	800226a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d102      	bne.n	8002278 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002272:	2300      	movs	r3, #0
 8002274:	61fb      	str	r3, [r7, #28]
 8002276:	e004      	b.n	8002282 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	fb02 f303 	mul.w	r3, r2, r3
 8002280:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	3350      	adds	r3, #80	; 0x50
 8002286:	4618      	mov	r0, r3
 8002288:	f002 fbd8 	bl	8004a3c <pvPortMalloc>
 800228c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00f      	beq.n	80022b4 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	3350      	adds	r3, #80	; 0x50
 8002298:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80022a2:	79fa      	ldrb	r2, [r7, #7]
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	4613      	mov	r3, r2
 80022aa:	697a      	ldr	r2, [r7, #20]
 80022ac:	68b9      	ldr	r1, [r7, #8]
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f000 f805 	bl	80022be <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80022b4:	69bb      	ldr	r3, [r7, #24]
	}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3720      	adds	r7, #32
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b084      	sub	sp, #16
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	60f8      	str	r0, [r7, #12]
 80022c6:	60b9      	str	r1, [r7, #8]
 80022c8:	607a      	str	r2, [r7, #4]
 80022ca:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d103      	bne.n	80022da <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	e002      	b.n	80022e0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	68ba      	ldr	r2, [r7, #8]
 80022ea:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80022ec:	2101      	movs	r1, #1
 80022ee:	69b8      	ldr	r0, [r7, #24]
 80022f0:	f7ff fec8 	bl	8002084 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	78fa      	ldrb	r2, [r7, #3]
 80022f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80022fc:	bf00      	nop
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8002304:	b580      	push	{r7, lr}
 8002306:	b08a      	sub	sp, #40	; 0x28
 8002308:	af02      	add	r7, sp, #8
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10a      	bne.n	800232c <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8002316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800231a:	f383 8811 	msr	BASEPRI, r3
 800231e:	f3bf 8f6f 	isb	sy
 8002322:	f3bf 8f4f 	dsb	sy
 8002326:	61bb      	str	r3, [r7, #24]
}
 8002328:	bf00      	nop
 800232a:	e7fe      	b.n	800232a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800232c:	68ba      	ldr	r2, [r7, #8]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	429a      	cmp	r2, r3
 8002332:	d90a      	bls.n	800234a <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8002334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002338:	f383 8811 	msr	BASEPRI, r3
 800233c:	f3bf 8f6f 	isb	sy
 8002340:	f3bf 8f4f 	dsb	sy
 8002344:	617b      	str	r3, [r7, #20]
}
 8002346:	bf00      	nop
 8002348:	e7fe      	b.n	8002348 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800234a:	2302      	movs	r3, #2
 800234c:	9300      	str	r3, [sp, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	2100      	movs	r1, #0
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f7ff fefd 	bl	8002154 <xQueueGenericCreateStatic>
 800235a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d002      	beq.n	8002368 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	68ba      	ldr	r2, [r7, #8]
 8002366:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002368:	69fb      	ldr	r3, [r7, #28]
	}
 800236a:	4618      	mov	r0, r3
 800236c:	3720      	adds	r7, #32
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8002372:	b580      	push	{r7, lr}
 8002374:	b086      	sub	sp, #24
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
 800237a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d10a      	bne.n	8002398 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8002382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002386:	f383 8811 	msr	BASEPRI, r3
 800238a:	f3bf 8f6f 	isb	sy
 800238e:	f3bf 8f4f 	dsb	sy
 8002392:	613b      	str	r3, [r7, #16]
}
 8002394:	bf00      	nop
 8002396:	e7fe      	b.n	8002396 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	429a      	cmp	r2, r3
 800239e:	d90a      	bls.n	80023b6 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80023a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a4:	f383 8811 	msr	BASEPRI, r3
 80023a8:	f3bf 8f6f 	isb	sy
 80023ac:	f3bf 8f4f 	dsb	sy
 80023b0:	60fb      	str	r3, [r7, #12]
}
 80023b2:	bf00      	nop
 80023b4:	e7fe      	b.n	80023b4 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80023b6:	2202      	movs	r2, #2
 80023b8:	2100      	movs	r1, #0
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7ff ff41 	bl	8002242 <xQueueGenericCreate>
 80023c0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d002      	beq.n	80023ce <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80023ce:	697b      	ldr	r3, [r7, #20]
	}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3718      	adds	r7, #24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b08e      	sub	sp, #56	; 0x38
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
 80023e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80023e6:	2300      	movs	r3, #0
 80023e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80023ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d10a      	bne.n	800240a <xQueueGenericSend+0x32>
	__asm volatile
 80023f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f8:	f383 8811 	msr	BASEPRI, r3
 80023fc:	f3bf 8f6f 	isb	sy
 8002400:	f3bf 8f4f 	dsb	sy
 8002404:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002406:	bf00      	nop
 8002408:	e7fe      	b.n	8002408 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d103      	bne.n	8002418 <xQueueGenericSend+0x40>
 8002410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <xQueueGenericSend+0x44>
 8002418:	2301      	movs	r3, #1
 800241a:	e000      	b.n	800241e <xQueueGenericSend+0x46>
 800241c:	2300      	movs	r3, #0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10a      	bne.n	8002438 <xQueueGenericSend+0x60>
	__asm volatile
 8002422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002426:	f383 8811 	msr	BASEPRI, r3
 800242a:	f3bf 8f6f 	isb	sy
 800242e:	f3bf 8f4f 	dsb	sy
 8002432:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002434:	bf00      	nop
 8002436:	e7fe      	b.n	8002436 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	2b02      	cmp	r3, #2
 800243c:	d103      	bne.n	8002446 <xQueueGenericSend+0x6e>
 800243e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002442:	2b01      	cmp	r3, #1
 8002444:	d101      	bne.n	800244a <xQueueGenericSend+0x72>
 8002446:	2301      	movs	r3, #1
 8002448:	e000      	b.n	800244c <xQueueGenericSend+0x74>
 800244a:	2300      	movs	r3, #0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d10a      	bne.n	8002466 <xQueueGenericSend+0x8e>
	__asm volatile
 8002450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002454:	f383 8811 	msr	BASEPRI, r3
 8002458:	f3bf 8f6f 	isb	sy
 800245c:	f3bf 8f4f 	dsb	sy
 8002460:	623b      	str	r3, [r7, #32]
}
 8002462:	bf00      	nop
 8002464:	e7fe      	b.n	8002464 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002466:	f001 fbfb 	bl	8003c60 <xTaskGetSchedulerState>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d102      	bne.n	8002476 <xQueueGenericSend+0x9e>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <xQueueGenericSend+0xa2>
 8002476:	2301      	movs	r3, #1
 8002478:	e000      	b.n	800247c <xQueueGenericSend+0xa4>
 800247a:	2300      	movs	r3, #0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d10a      	bne.n	8002496 <xQueueGenericSend+0xbe>
	__asm volatile
 8002480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002484:	f383 8811 	msr	BASEPRI, r3
 8002488:	f3bf 8f6f 	isb	sy
 800248c:	f3bf 8f4f 	dsb	sy
 8002490:	61fb      	str	r3, [r7, #28]
}
 8002492:	bf00      	nop
 8002494:	e7fe      	b.n	8002494 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002496:	f002 f9d1 	bl	800483c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800249a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800249e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d302      	bcc.n	80024ac <xQueueGenericSend+0xd4>
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d129      	bne.n	8002500 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	68b9      	ldr	r1, [r7, #8]
 80024b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024b2:	f000 fc5b 	bl	8002d6c <prvCopyDataToQueue>
 80024b6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80024b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d010      	beq.n	80024e2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80024c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c2:	3324      	adds	r3, #36	; 0x24
 80024c4:	4618      	mov	r0, r3
 80024c6:	f001 fa09 	bl	80038dc <xTaskRemoveFromEventList>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d013      	beq.n	80024f8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80024d0:	4b3f      	ldr	r3, [pc, #252]	; (80025d0 <xQueueGenericSend+0x1f8>)
 80024d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	f3bf 8f4f 	dsb	sy
 80024dc:	f3bf 8f6f 	isb	sy
 80024e0:	e00a      	b.n	80024f8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80024e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d007      	beq.n	80024f8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80024e8:	4b39      	ldr	r3, [pc, #228]	; (80025d0 <xQueueGenericSend+0x1f8>)
 80024ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	f3bf 8f4f 	dsb	sy
 80024f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80024f8:	f002 f9d0 	bl	800489c <vPortExitCritical>
				return pdPASS;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e063      	b.n	80025c8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d103      	bne.n	800250e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002506:	f002 f9c9 	bl	800489c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800250a:	2300      	movs	r3, #0
 800250c:	e05c      	b.n	80025c8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800250e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002510:	2b00      	cmp	r3, #0
 8002512:	d106      	bne.n	8002522 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002514:	f107 0314 	add.w	r3, r7, #20
 8002518:	4618      	mov	r0, r3
 800251a:	f001 fa43 	bl	80039a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800251e:	2301      	movs	r3, #1
 8002520:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002522:	f002 f9bb 	bl	800489c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002526:	f000 ffb5 	bl	8003494 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800252a:	f002 f987 	bl	800483c <vPortEnterCritical>
 800252e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002530:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002534:	b25b      	sxtb	r3, r3
 8002536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800253a:	d103      	bne.n	8002544 <xQueueGenericSend+0x16c>
 800253c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800253e:	2200      	movs	r2, #0
 8002540:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002546:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800254a:	b25b      	sxtb	r3, r3
 800254c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002550:	d103      	bne.n	800255a <xQueueGenericSend+0x182>
 8002552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800255a:	f002 f99f 	bl	800489c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800255e:	1d3a      	adds	r2, r7, #4
 8002560:	f107 0314 	add.w	r3, r7, #20
 8002564:	4611      	mov	r1, r2
 8002566:	4618      	mov	r0, r3
 8002568:	f001 fa32 	bl	80039d0 <xTaskCheckForTimeOut>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d124      	bne.n	80025bc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002572:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002574:	f000 fcf2 	bl	8002f5c <prvIsQueueFull>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d018      	beq.n	80025b0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800257e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002580:	3310      	adds	r3, #16
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	4611      	mov	r1, r2
 8002586:	4618      	mov	r0, r3
 8002588:	f001 f958 	bl	800383c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800258c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800258e:	f000 fc7d 	bl	8002e8c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002592:	f000 ff8d 	bl	80034b0 <xTaskResumeAll>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	f47f af7c 	bne.w	8002496 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800259e:	4b0c      	ldr	r3, [pc, #48]	; (80025d0 <xQueueGenericSend+0x1f8>)
 80025a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	f3bf 8f4f 	dsb	sy
 80025aa:	f3bf 8f6f 	isb	sy
 80025ae:	e772      	b.n	8002496 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80025b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025b2:	f000 fc6b 	bl	8002e8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80025b6:	f000 ff7b 	bl	80034b0 <xTaskResumeAll>
 80025ba:	e76c      	b.n	8002496 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80025bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025be:	f000 fc65 	bl	8002e8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80025c2:	f000 ff75 	bl	80034b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80025c6:	2300      	movs	r3, #0
		}
	}
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3738      	adds	r7, #56	; 0x38
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	e000ed04 	.word	0xe000ed04

080025d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b08e      	sub	sp, #56	; 0x38
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
 80025e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80025e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d10a      	bne.n	8002602 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80025ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f0:	f383 8811 	msr	BASEPRI, r3
 80025f4:	f3bf 8f6f 	isb	sy
 80025f8:	f3bf 8f4f 	dsb	sy
 80025fc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80025fe:	bf00      	nop
 8002600:	e7fe      	b.n	8002600 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d103      	bne.n	8002610 <xQueueGenericSendFromISR+0x3c>
 8002608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260c:	2b00      	cmp	r3, #0
 800260e:	d101      	bne.n	8002614 <xQueueGenericSendFromISR+0x40>
 8002610:	2301      	movs	r3, #1
 8002612:	e000      	b.n	8002616 <xQueueGenericSendFromISR+0x42>
 8002614:	2300      	movs	r3, #0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d10a      	bne.n	8002630 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800261a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800261e:	f383 8811 	msr	BASEPRI, r3
 8002622:	f3bf 8f6f 	isb	sy
 8002626:	f3bf 8f4f 	dsb	sy
 800262a:	623b      	str	r3, [r7, #32]
}
 800262c:	bf00      	nop
 800262e:	e7fe      	b.n	800262e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	2b02      	cmp	r3, #2
 8002634:	d103      	bne.n	800263e <xQueueGenericSendFromISR+0x6a>
 8002636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800263a:	2b01      	cmp	r3, #1
 800263c:	d101      	bne.n	8002642 <xQueueGenericSendFromISR+0x6e>
 800263e:	2301      	movs	r3, #1
 8002640:	e000      	b.n	8002644 <xQueueGenericSendFromISR+0x70>
 8002642:	2300      	movs	r3, #0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d10a      	bne.n	800265e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800264c:	f383 8811 	msr	BASEPRI, r3
 8002650:	f3bf 8f6f 	isb	sy
 8002654:	f3bf 8f4f 	dsb	sy
 8002658:	61fb      	str	r3, [r7, #28]
}
 800265a:	bf00      	nop
 800265c:	e7fe      	b.n	800265c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800265e:	f002 f9af 	bl	80049c0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002662:	f3ef 8211 	mrs	r2, BASEPRI
 8002666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800266a:	f383 8811 	msr	BASEPRI, r3
 800266e:	f3bf 8f6f 	isb	sy
 8002672:	f3bf 8f4f 	dsb	sy
 8002676:	61ba      	str	r2, [r7, #24]
 8002678:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800267a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800267c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800267e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002680:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002686:	429a      	cmp	r2, r3
 8002688:	d302      	bcc.n	8002690 <xQueueGenericSendFromISR+0xbc>
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	2b02      	cmp	r3, #2
 800268e:	d12c      	bne.n	80026ea <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002692:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	68b9      	ldr	r1, [r7, #8]
 800269e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026a0:	f000 fb64 	bl	8002d6c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80026a4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80026a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ac:	d112      	bne.n	80026d4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d016      	beq.n	80026e4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b8:	3324      	adds	r3, #36	; 0x24
 80026ba:	4618      	mov	r0, r3
 80026bc:	f001 f90e 	bl	80038dc <xTaskRemoveFromEventList>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00e      	beq.n	80026e4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00b      	beq.n	80026e4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	e007      	b.n	80026e4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80026d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80026d8:	3301      	adds	r3, #1
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	b25a      	sxtb	r2, r3
 80026de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80026e4:	2301      	movs	r3, #1
 80026e6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80026e8:	e001      	b.n	80026ee <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80026ea:	2300      	movs	r3, #0
 80026ec:	637b      	str	r3, [r7, #52]	; 0x34
 80026ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80026f8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80026fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3738      	adds	r7, #56	; 0x38
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b08e      	sub	sp, #56	; 0x38
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10a      	bne.n	800272e <xQueueGiveFromISR+0x2a>
	__asm volatile
 8002718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800271c:	f383 8811 	msr	BASEPRI, r3
 8002720:	f3bf 8f6f 	isb	sy
 8002724:	f3bf 8f4f 	dsb	sy
 8002728:	623b      	str	r3, [r7, #32]
}
 800272a:	bf00      	nop
 800272c:	e7fe      	b.n	800272c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800272e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00a      	beq.n	800274c <xQueueGiveFromISR+0x48>
	__asm volatile
 8002736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800273a:	f383 8811 	msr	BASEPRI, r3
 800273e:	f3bf 8f6f 	isb	sy
 8002742:	f3bf 8f4f 	dsb	sy
 8002746:	61fb      	str	r3, [r7, #28]
}
 8002748:	bf00      	nop
 800274a:	e7fe      	b.n	800274a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800274c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d103      	bne.n	800275c <xQueueGiveFromISR+0x58>
 8002754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <xQueueGiveFromISR+0x5c>
 800275c:	2301      	movs	r3, #1
 800275e:	e000      	b.n	8002762 <xQueueGiveFromISR+0x5e>
 8002760:	2300      	movs	r3, #0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10a      	bne.n	800277c <xQueueGiveFromISR+0x78>
	__asm volatile
 8002766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800276a:	f383 8811 	msr	BASEPRI, r3
 800276e:	f3bf 8f6f 	isb	sy
 8002772:	f3bf 8f4f 	dsb	sy
 8002776:	61bb      	str	r3, [r7, #24]
}
 8002778:	bf00      	nop
 800277a:	e7fe      	b.n	800277a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800277c:	f002 f920 	bl	80049c0 <vPortValidateInterruptPriority>
	__asm volatile
 8002780:	f3ef 8211 	mrs	r2, BASEPRI
 8002784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002788:	f383 8811 	msr	BASEPRI, r3
 800278c:	f3bf 8f6f 	isb	sy
 8002790:	f3bf 8f4f 	dsb	sy
 8002794:	617a      	str	r2, [r7, #20]
 8002796:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8002798:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800279a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800279c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800279e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80027a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d22b      	bcs.n	8002804 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80027ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80027b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b8:	1c5a      	adds	r2, r3, #1
 80027ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027bc:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80027be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80027c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c6:	d112      	bne.n	80027ee <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d016      	beq.n	80027fe <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d2:	3324      	adds	r3, #36	; 0x24
 80027d4:	4618      	mov	r0, r3
 80027d6:	f001 f881 	bl	80038dc <xTaskRemoveFromEventList>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00e      	beq.n	80027fe <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00b      	beq.n	80027fe <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	2201      	movs	r2, #1
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	e007      	b.n	80027fe <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80027ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027f2:	3301      	adds	r3, #1
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	b25a      	sxtb	r2, r3
 80027f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80027fe:	2301      	movs	r3, #1
 8002800:	637b      	str	r3, [r7, #52]	; 0x34
 8002802:	e001      	b.n	8002808 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002804:	2300      	movs	r3, #0
 8002806:	637b      	str	r3, [r7, #52]	; 0x34
 8002808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800280a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f383 8811 	msr	BASEPRI, r3
}
 8002812:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002816:	4618      	mov	r0, r3
 8002818:	3738      	adds	r7, #56	; 0x38
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
	...

08002820 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b08c      	sub	sp, #48	; 0x30
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800282c:	2300      	movs	r3, #0
 800282e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10a      	bne.n	8002850 <xQueueReceive+0x30>
	__asm volatile
 800283a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800283e:	f383 8811 	msr	BASEPRI, r3
 8002842:	f3bf 8f6f 	isb	sy
 8002846:	f3bf 8f4f 	dsb	sy
 800284a:	623b      	str	r3, [r7, #32]
}
 800284c:	bf00      	nop
 800284e:	e7fe      	b.n	800284e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d103      	bne.n	800285e <xQueueReceive+0x3e>
 8002856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <xQueueReceive+0x42>
 800285e:	2301      	movs	r3, #1
 8002860:	e000      	b.n	8002864 <xQueueReceive+0x44>
 8002862:	2300      	movs	r3, #0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10a      	bne.n	800287e <xQueueReceive+0x5e>
	__asm volatile
 8002868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800286c:	f383 8811 	msr	BASEPRI, r3
 8002870:	f3bf 8f6f 	isb	sy
 8002874:	f3bf 8f4f 	dsb	sy
 8002878:	61fb      	str	r3, [r7, #28]
}
 800287a:	bf00      	nop
 800287c:	e7fe      	b.n	800287c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800287e:	f001 f9ef 	bl	8003c60 <xTaskGetSchedulerState>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d102      	bne.n	800288e <xQueueReceive+0x6e>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <xQueueReceive+0x72>
 800288e:	2301      	movs	r3, #1
 8002890:	e000      	b.n	8002894 <xQueueReceive+0x74>
 8002892:	2300      	movs	r3, #0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d10a      	bne.n	80028ae <xQueueReceive+0x8e>
	__asm volatile
 8002898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800289c:	f383 8811 	msr	BASEPRI, r3
 80028a0:	f3bf 8f6f 	isb	sy
 80028a4:	f3bf 8f4f 	dsb	sy
 80028a8:	61bb      	str	r3, [r7, #24]
}
 80028aa:	bf00      	nop
 80028ac:	e7fe      	b.n	80028ac <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80028ae:	f001 ffc5 	bl	800483c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80028b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d01f      	beq.n	80028fe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80028be:	68b9      	ldr	r1, [r7, #8]
 80028c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028c2:	f000 fabd 	bl	8002e40 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80028c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c8:	1e5a      	subs	r2, r3, #1
 80028ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00f      	beq.n	80028f6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d8:	3310      	adds	r3, #16
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 fffe 	bl	80038dc <xTaskRemoveFromEventList>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d007      	beq.n	80028f6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80028e6:	4b3d      	ldr	r3, [pc, #244]	; (80029dc <xQueueReceive+0x1bc>)
 80028e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	f3bf 8f4f 	dsb	sy
 80028f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80028f6:	f001 ffd1 	bl	800489c <vPortExitCritical>
				return pdPASS;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e069      	b.n	80029d2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d103      	bne.n	800290c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002904:	f001 ffca 	bl	800489c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002908:	2300      	movs	r3, #0
 800290a:	e062      	b.n	80029d2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800290c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800290e:	2b00      	cmp	r3, #0
 8002910:	d106      	bne.n	8002920 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002912:	f107 0310 	add.w	r3, r7, #16
 8002916:	4618      	mov	r0, r3
 8002918:	f001 f844 	bl	80039a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800291c:	2301      	movs	r3, #1
 800291e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002920:	f001 ffbc 	bl	800489c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002924:	f000 fdb6 	bl	8003494 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002928:	f001 ff88 	bl	800483c <vPortEnterCritical>
 800292c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800292e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002932:	b25b      	sxtb	r3, r3
 8002934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002938:	d103      	bne.n	8002942 <xQueueReceive+0x122>
 800293a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293c:	2200      	movs	r2, #0
 800293e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002944:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002948:	b25b      	sxtb	r3, r3
 800294a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800294e:	d103      	bne.n	8002958 <xQueueReceive+0x138>
 8002950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002952:	2200      	movs	r2, #0
 8002954:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002958:	f001 ffa0 	bl	800489c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800295c:	1d3a      	adds	r2, r7, #4
 800295e:	f107 0310 	add.w	r3, r7, #16
 8002962:	4611      	mov	r1, r2
 8002964:	4618      	mov	r0, r3
 8002966:	f001 f833 	bl	80039d0 <xTaskCheckForTimeOut>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d123      	bne.n	80029b8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002970:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002972:	f000 fadd 	bl	8002f30 <prvIsQueueEmpty>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d017      	beq.n	80029ac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800297c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297e:	3324      	adds	r3, #36	; 0x24
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	4611      	mov	r1, r2
 8002984:	4618      	mov	r0, r3
 8002986:	f000 ff59 	bl	800383c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800298a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800298c:	f000 fa7e 	bl	8002e8c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002990:	f000 fd8e 	bl	80034b0 <xTaskResumeAll>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d189      	bne.n	80028ae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800299a:	4b10      	ldr	r3, [pc, #64]	; (80029dc <xQueueReceive+0x1bc>)
 800299c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	f3bf 8f4f 	dsb	sy
 80029a6:	f3bf 8f6f 	isb	sy
 80029aa:	e780      	b.n	80028ae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80029ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029ae:	f000 fa6d 	bl	8002e8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80029b2:	f000 fd7d 	bl	80034b0 <xTaskResumeAll>
 80029b6:	e77a      	b.n	80028ae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80029b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029ba:	f000 fa67 	bl	8002e8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80029be:	f000 fd77 	bl	80034b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029c4:	f000 fab4 	bl	8002f30 <prvIsQueueEmpty>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f43f af6f 	beq.w	80028ae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80029d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3730      	adds	r7, #48	; 0x30
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	e000ed04 	.word	0xe000ed04

080029e0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08e      	sub	sp, #56	; 0x38
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80029ea:	2300      	movs	r3, #0
 80029ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80029f2:	2300      	movs	r3, #0
 80029f4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80029f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10a      	bne.n	8002a12 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80029fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a00:	f383 8811 	msr	BASEPRI, r3
 8002a04:	f3bf 8f6f 	isb	sy
 8002a08:	f3bf 8f4f 	dsb	sy
 8002a0c:	623b      	str	r3, [r7, #32]
}
 8002a0e:	bf00      	nop
 8002a10:	e7fe      	b.n	8002a10 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00a      	beq.n	8002a30 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8002a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a1e:	f383 8811 	msr	BASEPRI, r3
 8002a22:	f3bf 8f6f 	isb	sy
 8002a26:	f3bf 8f4f 	dsb	sy
 8002a2a:	61fb      	str	r3, [r7, #28]
}
 8002a2c:	bf00      	nop
 8002a2e:	e7fe      	b.n	8002a2e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a30:	f001 f916 	bl	8003c60 <xTaskGetSchedulerState>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d102      	bne.n	8002a40 <xQueueSemaphoreTake+0x60>
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d101      	bne.n	8002a44 <xQueueSemaphoreTake+0x64>
 8002a40:	2301      	movs	r3, #1
 8002a42:	e000      	b.n	8002a46 <xQueueSemaphoreTake+0x66>
 8002a44:	2300      	movs	r3, #0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10a      	bne.n	8002a60 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8002a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a4e:	f383 8811 	msr	BASEPRI, r3
 8002a52:	f3bf 8f6f 	isb	sy
 8002a56:	f3bf 8f4f 	dsb	sy
 8002a5a:	61bb      	str	r3, [r7, #24]
}
 8002a5c:	bf00      	nop
 8002a5e:	e7fe      	b.n	8002a5e <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002a60:	f001 feec 	bl	800483c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a68:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d024      	beq.n	8002aba <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a72:	1e5a      	subs	r2, r3, #1
 8002a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a76:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d104      	bne.n	8002a8a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8002a80:	f001 fa6e 	bl	8003f60 <pvTaskIncrementMutexHeldCount>
 8002a84:	4602      	mov	r2, r0
 8002a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a88:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00f      	beq.n	8002ab2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a94:	3310      	adds	r3, #16
 8002a96:	4618      	mov	r0, r3
 8002a98:	f000 ff20 	bl	80038dc <xTaskRemoveFromEventList>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d007      	beq.n	8002ab2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002aa2:	4b54      	ldr	r3, [pc, #336]	; (8002bf4 <xQueueSemaphoreTake+0x214>)
 8002aa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	f3bf 8f4f 	dsb	sy
 8002aae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002ab2:	f001 fef3 	bl	800489c <vPortExitCritical>
				return pdPASS;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e097      	b.n	8002bea <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d111      	bne.n	8002ae4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00a      	beq.n	8002adc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8002ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aca:	f383 8811 	msr	BASEPRI, r3
 8002ace:	f3bf 8f6f 	isb	sy
 8002ad2:	f3bf 8f4f 	dsb	sy
 8002ad6:	617b      	str	r3, [r7, #20]
}
 8002ad8:	bf00      	nop
 8002ada:	e7fe      	b.n	8002ada <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002adc:	f001 fede 	bl	800489c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	e082      	b.n	8002bea <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d106      	bne.n	8002af8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002aea:	f107 030c 	add.w	r3, r7, #12
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 ff58 	bl	80039a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002af4:	2301      	movs	r3, #1
 8002af6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002af8:	f001 fed0 	bl	800489c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002afc:	f000 fcca 	bl	8003494 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b00:	f001 fe9c 	bl	800483c <vPortEnterCritical>
 8002b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b0a:	b25b      	sxtb	r3, r3
 8002b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b10:	d103      	bne.n	8002b1a <xQueueSemaphoreTake+0x13a>
 8002b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b20:	b25b      	sxtb	r3, r3
 8002b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b26:	d103      	bne.n	8002b30 <xQueueSemaphoreTake+0x150>
 8002b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b30:	f001 feb4 	bl	800489c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b34:	463a      	mov	r2, r7
 8002b36:	f107 030c 	add.w	r3, r7, #12
 8002b3a:	4611      	mov	r1, r2
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f000 ff47 	bl	80039d0 <xTaskCheckForTimeOut>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d132      	bne.n	8002bae <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b4a:	f000 f9f1 	bl	8002f30 <prvIsQueueEmpty>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d026      	beq.n	8002ba2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d109      	bne.n	8002b70 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8002b5c:	f001 fe6e 	bl	800483c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8002b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f001 f899 	bl	8003c9c <xTaskPriorityInherit>
 8002b6a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8002b6c:	f001 fe96 	bl	800489c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b72:	3324      	adds	r3, #36	; 0x24
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	4611      	mov	r1, r2
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f000 fe5f 	bl	800383c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002b7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b80:	f000 f984 	bl	8002e8c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002b84:	f000 fc94 	bl	80034b0 <xTaskResumeAll>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	f47f af68 	bne.w	8002a60 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8002b90:	4b18      	ldr	r3, [pc, #96]	; (8002bf4 <xQueueSemaphoreTake+0x214>)
 8002b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	f3bf 8f4f 	dsb	sy
 8002b9c:	f3bf 8f6f 	isb	sy
 8002ba0:	e75e      	b.n	8002a60 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002ba2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ba4:	f000 f972 	bl	8002e8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ba8:	f000 fc82 	bl	80034b0 <xTaskResumeAll>
 8002bac:	e758      	b.n	8002a60 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002bae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002bb0:	f000 f96c 	bl	8002e8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002bb4:	f000 fc7c 	bl	80034b0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002bb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002bba:	f000 f9b9 	bl	8002f30 <prvIsQueueEmpty>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f43f af4d 	beq.w	8002a60 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00d      	beq.n	8002be8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8002bcc:	f001 fe36 	bl	800483c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002bd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002bd2:	f000 f8b4 	bl	8002d3e <prvGetDisinheritPriorityAfterTimeout>
 8002bd6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8002bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bde:	4618      	mov	r0, r3
 8002be0:	f001 f938 	bl	8003e54 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002be4:	f001 fe5a 	bl	800489c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002be8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3738      	adds	r7, #56	; 0x38
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	e000ed04 	.word	0xe000ed04

08002bf8 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b08e      	sub	sp, #56	; 0x38
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10a      	bne.n	8002c24 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8002c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c12:	f383 8811 	msr	BASEPRI, r3
 8002c16:	f3bf 8f6f 	isb	sy
 8002c1a:	f3bf 8f4f 	dsb	sy
 8002c1e:	623b      	str	r3, [r7, #32]
}
 8002c20:	bf00      	nop
 8002c22:	e7fe      	b.n	8002c22 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d103      	bne.n	8002c32 <xQueueReceiveFromISR+0x3a>
 8002c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <xQueueReceiveFromISR+0x3e>
 8002c32:	2301      	movs	r3, #1
 8002c34:	e000      	b.n	8002c38 <xQueueReceiveFromISR+0x40>
 8002c36:	2300      	movs	r3, #0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10a      	bne.n	8002c52 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8002c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c40:	f383 8811 	msr	BASEPRI, r3
 8002c44:	f3bf 8f6f 	isb	sy
 8002c48:	f3bf 8f4f 	dsb	sy
 8002c4c:	61fb      	str	r3, [r7, #28]
}
 8002c4e:	bf00      	nop
 8002c50:	e7fe      	b.n	8002c50 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c52:	f001 feb5 	bl	80049c0 <vPortValidateInterruptPriority>
	__asm volatile
 8002c56:	f3ef 8211 	mrs	r2, BASEPRI
 8002c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c5e:	f383 8811 	msr	BASEPRI, r3
 8002c62:	f3bf 8f6f 	isb	sy
 8002c66:	f3bf 8f4f 	dsb	sy
 8002c6a:	61ba      	str	r2, [r7, #24]
 8002c6c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002c6e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002c70:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c76:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d02f      	beq.n	8002cde <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002c88:	68b9      	ldr	r1, [r7, #8]
 8002c8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c8c:	f000 f8d8 	bl	8002e40 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c92:	1e5a      	subs	r2, r3, #1
 8002c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c96:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002c98:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca0:	d112      	bne.n	8002cc8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d016      	beq.n	8002cd8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cac:	3310      	adds	r3, #16
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f000 fe14 	bl	80038dc <xTaskRemoveFromEventList>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00e      	beq.n	8002cd8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00b      	beq.n	8002cd8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	e007      	b.n	8002cd8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002cc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ccc:	3301      	adds	r3, #1
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	b25a      	sxtb	r2, r3
 8002cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	637b      	str	r3, [r7, #52]	; 0x34
 8002cdc:	e001      	b.n	8002ce2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	637b      	str	r3, [r7, #52]	; 0x34
 8002ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	f383 8811 	msr	BASEPRI, r3
}
 8002cec:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3738      	adds	r7, #56	; 0x38
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10a      	bne.n	8002d20 <vQueueDelete+0x28>
	__asm volatile
 8002d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d0e:	f383 8811 	msr	BASEPRI, r3
 8002d12:	f3bf 8f6f 	isb	sy
 8002d16:	f3bf 8f4f 	dsb	sy
 8002d1a:	60bb      	str	r3, [r7, #8]
}
 8002d1c:	bf00      	nop
 8002d1e:	e7fe      	b.n	8002d1e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f000 f95b 	bl	8002fdc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d102      	bne.n	8002d36 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f001 ff47 	bl	8004bc4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8002d36:	bf00      	nop
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002d3e:	b480      	push	{r7}
 8002d40:	b085      	sub	sp, #20
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d006      	beq.n	8002d5c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8002d58:	60fb      	str	r3, [r7, #12]
 8002d5a:	e001      	b.n	8002d60 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8002d60:	68fb      	ldr	r3, [r7, #12]
	}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3714      	adds	r7, #20
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bc80      	pop	{r7}
 8002d6a:	4770      	bx	lr

08002d6c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d80:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10d      	bne.n	8002da6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d14d      	bne.n	8002e2e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f000 ffee 	bl	8003d78 <xTaskPriorityDisinherit>
 8002d9c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	605a      	str	r2, [r3, #4]
 8002da4:	e043      	b.n	8002e2e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d119      	bne.n	8002de0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6898      	ldr	r0, [r3, #8]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db4:	461a      	mov	r2, r3
 8002db6:	68b9      	ldr	r1, [r7, #8]
 8002db8:	f002 f844 	bl	8004e44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc4:	441a      	add	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d32b      	bcc.n	8002e2e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	609a      	str	r2, [r3, #8]
 8002dde:	e026      	b.n	8002e2e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	68d8      	ldr	r0, [r3, #12]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de8:	461a      	mov	r2, r3
 8002dea:	68b9      	ldr	r1, [r7, #8]
 8002dec:	f002 f82a 	bl	8004e44 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	68da      	ldr	r2, [r3, #12]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df8:	425b      	negs	r3, r3
 8002dfa:	441a      	add	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	68da      	ldr	r2, [r3, #12]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d207      	bcs.n	8002e1c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	685a      	ldr	r2, [r3, #4]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e14:	425b      	negs	r3, r3
 8002e16:	441a      	add	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d105      	bne.n	8002e2e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d002      	beq.n	8002e2e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1c5a      	adds	r2, r3, #1
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002e36:	697b      	ldr	r3, [r7, #20]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3718      	adds	r7, #24
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d018      	beq.n	8002e84 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68da      	ldr	r2, [r3, #12]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	441a      	add	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68da      	ldr	r2, [r3, #12]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d303      	bcc.n	8002e74 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68d9      	ldr	r1, [r3, #12]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	6838      	ldr	r0, [r7, #0]
 8002e80:	f001 ffe0 	bl	8004e44 <memcpy>
	}
}
 8002e84:	bf00      	nop
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002e94:	f001 fcd2 	bl	800483c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e9e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ea0:	e011      	b.n	8002ec6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d012      	beq.n	8002ed0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	3324      	adds	r3, #36	; 0x24
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 fd14 	bl	80038dc <xTaskRemoveFromEventList>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002eba:	f000 fdeb 	bl	8003a94 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002ebe:	7bfb      	ldrb	r3, [r7, #15]
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	dce9      	bgt.n	8002ea2 <prvUnlockQueue+0x16>
 8002ece:	e000      	b.n	8002ed2 <prvUnlockQueue+0x46>
					break;
 8002ed0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	22ff      	movs	r2, #255	; 0xff
 8002ed6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002eda:	f001 fcdf 	bl	800489c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002ede:	f001 fcad 	bl	800483c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ee8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002eea:	e011      	b.n	8002f10 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d012      	beq.n	8002f1a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	3310      	adds	r3, #16
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f000 fcef 	bl	80038dc <xTaskRemoveFromEventList>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002f04:	f000 fdc6 	bl	8003a94 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002f08:	7bbb      	ldrb	r3, [r7, #14]
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	dce9      	bgt.n	8002eec <prvUnlockQueue+0x60>
 8002f18:	e000      	b.n	8002f1c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002f1a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	22ff      	movs	r2, #255	; 0xff
 8002f20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002f24:	f001 fcba 	bl	800489c <vPortExitCritical>
}
 8002f28:	bf00      	nop
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002f38:	f001 fc80 	bl	800483c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d102      	bne.n	8002f4a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002f44:	2301      	movs	r3, #1
 8002f46:	60fb      	str	r3, [r7, #12]
 8002f48:	e001      	b.n	8002f4e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002f4e:	f001 fca5 	bl	800489c <vPortExitCritical>

	return xReturn;
 8002f52:	68fb      	ldr	r3, [r7, #12]
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3710      	adds	r7, #16
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002f64:	f001 fc6a 	bl	800483c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d102      	bne.n	8002f7a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002f74:	2301      	movs	r3, #1
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	e001      	b.n	8002f7e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002f7e:	f001 fc8d 	bl	800489c <vPortExitCritical>

	return xReturn;
 8002f82:	68fb      	ldr	r3, [r7, #12]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f96:	2300      	movs	r3, #0
 8002f98:	60fb      	str	r3, [r7, #12]
 8002f9a:	e014      	b.n	8002fc6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002f9c:	4a0e      	ldr	r2, [pc, #56]	; (8002fd8 <vQueueAddToRegistry+0x4c>)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10b      	bne.n	8002fc0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002fa8:	490b      	ldr	r1, [pc, #44]	; (8002fd8 <vQueueAddToRegistry+0x4c>)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002fb2:	4a09      	ldr	r2, [pc, #36]	; (8002fd8 <vQueueAddToRegistry+0x4c>)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	4413      	add	r3, r2
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002fbe:	e006      	b.n	8002fce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	60fb      	str	r3, [r7, #12]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2b07      	cmp	r3, #7
 8002fca:	d9e7      	bls.n	8002f9c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002fcc:	bf00      	nop
 8002fce:	bf00      	nop
 8002fd0:	3714      	adds	r7, #20
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bc80      	pop	{r7}
 8002fd6:	4770      	bx	lr
 8002fd8:	2000079c 	.word	0x2000079c

08002fdc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	60fb      	str	r3, [r7, #12]
 8002fe8:	e016      	b.n	8003018 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8002fea:	4a10      	ldr	r2, [pc, #64]	; (800302c <vQueueUnregisterQueue+0x50>)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	4413      	add	r3, r2
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d10b      	bne.n	8003012 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8002ffa:	4a0c      	ldr	r2, [pc, #48]	; (800302c <vQueueUnregisterQueue+0x50>)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2100      	movs	r1, #0
 8003000:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003004:	4a09      	ldr	r2, [pc, #36]	; (800302c <vQueueUnregisterQueue+0x50>)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	4413      	add	r3, r2
 800300c:	2200      	movs	r2, #0
 800300e:	605a      	str	r2, [r3, #4]
				break;
 8003010:	e006      	b.n	8003020 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	3301      	adds	r3, #1
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2b07      	cmp	r3, #7
 800301c:	d9e5      	bls.n	8002fea <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800301e:	bf00      	nop
 8003020:	bf00      	nop
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	bc80      	pop	{r7}
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	2000079c 	.word	0x2000079c

08003030 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003040:	f001 fbfc 	bl	800483c <vPortEnterCritical>
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800304a:	b25b      	sxtb	r3, r3
 800304c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003050:	d103      	bne.n	800305a <vQueueWaitForMessageRestricted+0x2a>
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003060:	b25b      	sxtb	r3, r3
 8003062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003066:	d103      	bne.n	8003070 <vQueueWaitForMessageRestricted+0x40>
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003070:	f001 fc14 	bl	800489c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003078:	2b00      	cmp	r3, #0
 800307a:	d106      	bne.n	800308a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	3324      	adds	r3, #36	; 0x24
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	68b9      	ldr	r1, [r7, #8]
 8003084:	4618      	mov	r0, r3
 8003086:	f000 fbfd 	bl	8003884 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800308a:	6978      	ldr	r0, [r7, #20]
 800308c:	f7ff fefe 	bl	8002e8c <prvUnlockQueue>
	}
 8003090:	bf00      	nop
 8003092:	3718      	adds	r7, #24
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003098:	b580      	push	{r7, lr}
 800309a:	b08e      	sub	sp, #56	; 0x38
 800309c:	af04      	add	r7, sp, #16
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]
 80030a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80030a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10a      	bne.n	80030c2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80030ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b0:	f383 8811 	msr	BASEPRI, r3
 80030b4:	f3bf 8f6f 	isb	sy
 80030b8:	f3bf 8f4f 	dsb	sy
 80030bc:	623b      	str	r3, [r7, #32]
}
 80030be:	bf00      	nop
 80030c0:	e7fe      	b.n	80030c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80030c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d10a      	bne.n	80030de <xTaskCreateStatic+0x46>
	__asm volatile
 80030c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030cc:	f383 8811 	msr	BASEPRI, r3
 80030d0:	f3bf 8f6f 	isb	sy
 80030d4:	f3bf 8f4f 	dsb	sy
 80030d8:	61fb      	str	r3, [r7, #28]
}
 80030da:	bf00      	nop
 80030dc:	e7fe      	b.n	80030dc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80030de:	235c      	movs	r3, #92	; 0x5c
 80030e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	2b5c      	cmp	r3, #92	; 0x5c
 80030e6:	d00a      	beq.n	80030fe <xTaskCreateStatic+0x66>
	__asm volatile
 80030e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ec:	f383 8811 	msr	BASEPRI, r3
 80030f0:	f3bf 8f6f 	isb	sy
 80030f4:	f3bf 8f4f 	dsb	sy
 80030f8:	61bb      	str	r3, [r7, #24]
}
 80030fa:	bf00      	nop
 80030fc:	e7fe      	b.n	80030fc <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80030fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003100:	2b00      	cmp	r3, #0
 8003102:	d01e      	beq.n	8003142 <xTaskCreateStatic+0xaa>
 8003104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003106:	2b00      	cmp	r3, #0
 8003108:	d01b      	beq.n	8003142 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800310a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800310c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003112:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003116:	2202      	movs	r2, #2
 8003118:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800311c:	2300      	movs	r3, #0
 800311e:	9303      	str	r3, [sp, #12]
 8003120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003122:	9302      	str	r3, [sp, #8]
 8003124:	f107 0314 	add.w	r3, r7, #20
 8003128:	9301      	str	r3, [sp, #4]
 800312a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312c:	9300      	str	r3, [sp, #0]
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	68b9      	ldr	r1, [r7, #8]
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f000 f850 	bl	80031da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800313a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800313c:	f000 f8d4 	bl	80032e8 <prvAddNewTaskToReadyList>
 8003140:	e001      	b.n	8003146 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003142:	2300      	movs	r3, #0
 8003144:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003146:	697b      	ldr	r3, [r7, #20]
	}
 8003148:	4618      	mov	r0, r3
 800314a:	3728      	adds	r7, #40	; 0x28
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003150:	b580      	push	{r7, lr}
 8003152:	b08c      	sub	sp, #48	; 0x30
 8003154:	af04      	add	r7, sp, #16
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	603b      	str	r3, [r7, #0]
 800315c:	4613      	mov	r3, r2
 800315e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003160:	88fb      	ldrh	r3, [r7, #6]
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	4618      	mov	r0, r3
 8003166:	f001 fc69 	bl	8004a3c <pvPortMalloc>
 800316a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00e      	beq.n	8003190 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003172:	205c      	movs	r0, #92	; 0x5c
 8003174:	f001 fc62 	bl	8004a3c <pvPortMalloc>
 8003178:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	697a      	ldr	r2, [r7, #20]
 8003184:	631a      	str	r2, [r3, #48]	; 0x30
 8003186:	e005      	b.n	8003194 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003188:	6978      	ldr	r0, [r7, #20]
 800318a:	f001 fd1b 	bl	8004bc4 <vPortFree>
 800318e:	e001      	b.n	8003194 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003190:	2300      	movs	r3, #0
 8003192:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d017      	beq.n	80031ca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80031a2:	88fa      	ldrh	r2, [r7, #6]
 80031a4:	2300      	movs	r3, #0
 80031a6:	9303      	str	r3, [sp, #12]
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	9302      	str	r3, [sp, #8]
 80031ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ae:	9301      	str	r3, [sp, #4]
 80031b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	68b9      	ldr	r1, [r7, #8]
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f000 f80e 	bl	80031da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80031be:	69f8      	ldr	r0, [r7, #28]
 80031c0:	f000 f892 	bl	80032e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80031c4:	2301      	movs	r3, #1
 80031c6:	61bb      	str	r3, [r7, #24]
 80031c8:	e002      	b.n	80031d0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80031ca:	f04f 33ff 	mov.w	r3, #4294967295
 80031ce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80031d0:	69bb      	ldr	r3, [r7, #24]
	}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3720      	adds	r7, #32
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b088      	sub	sp, #32
 80031de:	af00      	add	r7, sp, #0
 80031e0:	60f8      	str	r0, [r7, #12]
 80031e2:	60b9      	str	r1, [r7, #8]
 80031e4:	607a      	str	r2, [r7, #4]
 80031e6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80031e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ea:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	461a      	mov	r2, r3
 80031f2:	21a5      	movs	r1, #165	; 0xa5
 80031f4:	f001 fdfa 	bl	8004dec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80031f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003202:	3b01      	subs	r3, #1
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	f023 0307 	bic.w	r3, r3, #7
 8003210:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	f003 0307 	and.w	r3, r3, #7
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00a      	beq.n	8003232 <prvInitialiseNewTask+0x58>
	__asm volatile
 800321c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003220:	f383 8811 	msr	BASEPRI, r3
 8003224:	f3bf 8f6f 	isb	sy
 8003228:	f3bf 8f4f 	dsb	sy
 800322c:	617b      	str	r3, [r7, #20]
}
 800322e:	bf00      	nop
 8003230:	e7fe      	b.n	8003230 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003232:	2300      	movs	r3, #0
 8003234:	61fb      	str	r3, [r7, #28]
 8003236:	e012      	b.n	800325e <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003238:	68ba      	ldr	r2, [r7, #8]
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	4413      	add	r3, r2
 800323e:	7819      	ldrb	r1, [r3, #0]
 8003240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	4413      	add	r3, r2
 8003246:	3334      	adds	r3, #52	; 0x34
 8003248:	460a      	mov	r2, r1
 800324a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800324c:	68ba      	ldr	r2, [r7, #8]
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	4413      	add	r3, r2
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d006      	beq.n	8003266 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	3301      	adds	r3, #1
 800325c:	61fb      	str	r3, [r7, #28]
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	2b0f      	cmp	r3, #15
 8003262:	d9e9      	bls.n	8003238 <prvInitialiseNewTask+0x5e>
 8003264:	e000      	b.n	8003268 <prvInitialiseNewTask+0x8e>
		{
			break;
 8003266:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326a:	2200      	movs	r2, #0
 800326c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003272:	2b37      	cmp	r3, #55	; 0x37
 8003274:	d901      	bls.n	800327a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003276:	2337      	movs	r3, #55	; 0x37
 8003278:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800327a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800327c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800327e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003282:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003284:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003288:	2200      	movs	r2, #0
 800328a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800328c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328e:	3304      	adds	r3, #4
 8003290:	4618      	mov	r0, r3
 8003292:	f7fe fe66 	bl	8001f62 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003298:	3318      	adds	r3, #24
 800329a:	4618      	mov	r0, r3
 800329c:	f7fe fe61 	bl	8001f62 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80032a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032a4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80032ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80032b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032b4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80032b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b8:	2200      	movs	r2, #0
 80032ba:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80032bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	68f9      	ldr	r1, [r7, #12]
 80032c8:	69b8      	ldr	r0, [r7, #24]
 80032ca:	f001 f9c3 	bl	8004654 <pxPortInitialiseStack>
 80032ce:	4602      	mov	r2, r0
 80032d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80032d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d002      	beq.n	80032e0 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80032da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032de:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80032e0:	bf00      	nop
 80032e2:	3720      	adds	r7, #32
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80032f0:	f001 faa4 	bl	800483c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80032f4:	4b2d      	ldr	r3, [pc, #180]	; (80033ac <prvAddNewTaskToReadyList+0xc4>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	3301      	adds	r3, #1
 80032fa:	4a2c      	ldr	r2, [pc, #176]	; (80033ac <prvAddNewTaskToReadyList+0xc4>)
 80032fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80032fe:	4b2c      	ldr	r3, [pc, #176]	; (80033b0 <prvAddNewTaskToReadyList+0xc8>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d109      	bne.n	800331a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003306:	4a2a      	ldr	r2, [pc, #168]	; (80033b0 <prvAddNewTaskToReadyList+0xc8>)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800330c:	4b27      	ldr	r3, [pc, #156]	; (80033ac <prvAddNewTaskToReadyList+0xc4>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d110      	bne.n	8003336 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003314:	f000 fbe2 	bl	8003adc <prvInitialiseTaskLists>
 8003318:	e00d      	b.n	8003336 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800331a:	4b26      	ldr	r3, [pc, #152]	; (80033b4 <prvAddNewTaskToReadyList+0xcc>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d109      	bne.n	8003336 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003322:	4b23      	ldr	r3, [pc, #140]	; (80033b0 <prvAddNewTaskToReadyList+0xc8>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332c:	429a      	cmp	r2, r3
 800332e:	d802      	bhi.n	8003336 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003330:	4a1f      	ldr	r2, [pc, #124]	; (80033b0 <prvAddNewTaskToReadyList+0xc8>)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003336:	4b20      	ldr	r3, [pc, #128]	; (80033b8 <prvAddNewTaskToReadyList+0xd0>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	3301      	adds	r3, #1
 800333c:	4a1e      	ldr	r2, [pc, #120]	; (80033b8 <prvAddNewTaskToReadyList+0xd0>)
 800333e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003340:	4b1d      	ldr	r3, [pc, #116]	; (80033b8 <prvAddNewTaskToReadyList+0xd0>)
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800334c:	4b1b      	ldr	r3, [pc, #108]	; (80033bc <prvAddNewTaskToReadyList+0xd4>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	429a      	cmp	r2, r3
 8003352:	d903      	bls.n	800335c <prvAddNewTaskToReadyList+0x74>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003358:	4a18      	ldr	r2, [pc, #96]	; (80033bc <prvAddNewTaskToReadyList+0xd4>)
 800335a:	6013      	str	r3, [r2, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003360:	4613      	mov	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4413      	add	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4a15      	ldr	r2, [pc, #84]	; (80033c0 <prvAddNewTaskToReadyList+0xd8>)
 800336a:	441a      	add	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	3304      	adds	r3, #4
 8003370:	4619      	mov	r1, r3
 8003372:	4610      	mov	r0, r2
 8003374:	f7fe fe01 	bl	8001f7a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003378:	f001 fa90 	bl	800489c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800337c:	4b0d      	ldr	r3, [pc, #52]	; (80033b4 <prvAddNewTaskToReadyList+0xcc>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00e      	beq.n	80033a2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003384:	4b0a      	ldr	r3, [pc, #40]	; (80033b0 <prvAddNewTaskToReadyList+0xc8>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338e:	429a      	cmp	r2, r3
 8003390:	d207      	bcs.n	80033a2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003392:	4b0c      	ldr	r3, [pc, #48]	; (80033c4 <prvAddNewTaskToReadyList+0xdc>)
 8003394:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003398:	601a      	str	r2, [r3, #0]
 800339a:	f3bf 8f4f 	dsb	sy
 800339e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80033a2:	bf00      	nop
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	20000cb0 	.word	0x20000cb0
 80033b0:	200007dc 	.word	0x200007dc
 80033b4:	20000cbc 	.word	0x20000cbc
 80033b8:	20000ccc 	.word	0x20000ccc
 80033bc:	20000cb8 	.word	0x20000cb8
 80033c0:	200007e0 	.word	0x200007e0
 80033c4:	e000ed04 	.word	0xe000ed04

080033c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b08a      	sub	sp, #40	; 0x28
 80033cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80033ce:	2300      	movs	r3, #0
 80033d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80033d2:	2300      	movs	r3, #0
 80033d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80033d6:	463a      	mov	r2, r7
 80033d8:	1d39      	adds	r1, r7, #4
 80033da:	f107 0308 	add.w	r3, r7, #8
 80033de:	4618      	mov	r0, r3
 80033e0:	f7fe fd6e 	bl	8001ec0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80033e4:	6839      	ldr	r1, [r7, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68ba      	ldr	r2, [r7, #8]
 80033ea:	9202      	str	r2, [sp, #8]
 80033ec:	9301      	str	r3, [sp, #4]
 80033ee:	2300      	movs	r3, #0
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	2300      	movs	r3, #0
 80033f4:	460a      	mov	r2, r1
 80033f6:	4921      	ldr	r1, [pc, #132]	; (800347c <vTaskStartScheduler+0xb4>)
 80033f8:	4821      	ldr	r0, [pc, #132]	; (8003480 <vTaskStartScheduler+0xb8>)
 80033fa:	f7ff fe4d 	bl	8003098 <xTaskCreateStatic>
 80033fe:	4603      	mov	r3, r0
 8003400:	4a20      	ldr	r2, [pc, #128]	; (8003484 <vTaskStartScheduler+0xbc>)
 8003402:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003404:	4b1f      	ldr	r3, [pc, #124]	; (8003484 <vTaskStartScheduler+0xbc>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d002      	beq.n	8003412 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800340c:	2301      	movs	r3, #1
 800340e:	617b      	str	r3, [r7, #20]
 8003410:	e001      	b.n	8003416 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003412:	2300      	movs	r3, #0
 8003414:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d102      	bne.n	8003422 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800341c:	f000 fe08 	bl	8004030 <xTimerCreateTimerTask>
 8003420:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d116      	bne.n	8003456 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800342c:	f383 8811 	msr	BASEPRI, r3
 8003430:	f3bf 8f6f 	isb	sy
 8003434:	f3bf 8f4f 	dsb	sy
 8003438:	613b      	str	r3, [r7, #16]
}
 800343a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800343c:	4b12      	ldr	r3, [pc, #72]	; (8003488 <vTaskStartScheduler+0xc0>)
 800343e:	f04f 32ff 	mov.w	r2, #4294967295
 8003442:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003444:	4b11      	ldr	r3, [pc, #68]	; (800348c <vTaskStartScheduler+0xc4>)
 8003446:	2201      	movs	r2, #1
 8003448:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800344a:	4b11      	ldr	r3, [pc, #68]	; (8003490 <vTaskStartScheduler+0xc8>)
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003450:	f001 f982 	bl	8004758 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003454:	e00e      	b.n	8003474 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800345c:	d10a      	bne.n	8003474 <vTaskStartScheduler+0xac>
	__asm volatile
 800345e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003462:	f383 8811 	msr	BASEPRI, r3
 8003466:	f3bf 8f6f 	isb	sy
 800346a:	f3bf 8f4f 	dsb	sy
 800346e:	60fb      	str	r3, [r7, #12]
}
 8003470:	bf00      	nop
 8003472:	e7fe      	b.n	8003472 <vTaskStartScheduler+0xaa>
}
 8003474:	bf00      	nop
 8003476:	3718      	adds	r7, #24
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	08004edc 	.word	0x08004edc
 8003480:	08003aad 	.word	0x08003aad
 8003484:	20000cd4 	.word	0x20000cd4
 8003488:	20000cd0 	.word	0x20000cd0
 800348c:	20000cbc 	.word	0x20000cbc
 8003490:	20000cb4 	.word	0x20000cb4

08003494 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003498:	4b04      	ldr	r3, [pc, #16]	; (80034ac <vTaskSuspendAll+0x18>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	3301      	adds	r3, #1
 800349e:	4a03      	ldr	r2, [pc, #12]	; (80034ac <vTaskSuspendAll+0x18>)
 80034a0:	6013      	str	r3, [r2, #0]
}
 80034a2:	bf00      	nop
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bc80      	pop	{r7}
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	20000cd8 	.word	0x20000cd8

080034b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80034b6:	2300      	movs	r3, #0
 80034b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80034ba:	2300      	movs	r3, #0
 80034bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80034be:	4b42      	ldr	r3, [pc, #264]	; (80035c8 <xTaskResumeAll+0x118>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10a      	bne.n	80034dc <xTaskResumeAll+0x2c>
	__asm volatile
 80034c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ca:	f383 8811 	msr	BASEPRI, r3
 80034ce:	f3bf 8f6f 	isb	sy
 80034d2:	f3bf 8f4f 	dsb	sy
 80034d6:	603b      	str	r3, [r7, #0]
}
 80034d8:	bf00      	nop
 80034da:	e7fe      	b.n	80034da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80034dc:	f001 f9ae 	bl	800483c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80034e0:	4b39      	ldr	r3, [pc, #228]	; (80035c8 <xTaskResumeAll+0x118>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	3b01      	subs	r3, #1
 80034e6:	4a38      	ldr	r2, [pc, #224]	; (80035c8 <xTaskResumeAll+0x118>)
 80034e8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034ea:	4b37      	ldr	r3, [pc, #220]	; (80035c8 <xTaskResumeAll+0x118>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d162      	bne.n	80035b8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80034f2:	4b36      	ldr	r3, [pc, #216]	; (80035cc <xTaskResumeAll+0x11c>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d05e      	beq.n	80035b8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034fa:	e02f      	b.n	800355c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80034fc:	4b34      	ldr	r3, [pc, #208]	; (80035d0 <xTaskResumeAll+0x120>)
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	3318      	adds	r3, #24
 8003508:	4618      	mov	r0, r3
 800350a:	f7fe fd91 	bl	8002030 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	3304      	adds	r3, #4
 8003512:	4618      	mov	r0, r3
 8003514:	f7fe fd8c 	bl	8002030 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800351c:	4b2d      	ldr	r3, [pc, #180]	; (80035d4 <xTaskResumeAll+0x124>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	429a      	cmp	r2, r3
 8003522:	d903      	bls.n	800352c <xTaskResumeAll+0x7c>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003528:	4a2a      	ldr	r2, [pc, #168]	; (80035d4 <xTaskResumeAll+0x124>)
 800352a:	6013      	str	r3, [r2, #0]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003530:	4613      	mov	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4413      	add	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4a27      	ldr	r2, [pc, #156]	; (80035d8 <xTaskResumeAll+0x128>)
 800353a:	441a      	add	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	3304      	adds	r3, #4
 8003540:	4619      	mov	r1, r3
 8003542:	4610      	mov	r0, r2
 8003544:	f7fe fd19 	bl	8001f7a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800354c:	4b23      	ldr	r3, [pc, #140]	; (80035dc <xTaskResumeAll+0x12c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003552:	429a      	cmp	r2, r3
 8003554:	d302      	bcc.n	800355c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003556:	4b22      	ldr	r3, [pc, #136]	; (80035e0 <xTaskResumeAll+0x130>)
 8003558:	2201      	movs	r2, #1
 800355a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800355c:	4b1c      	ldr	r3, [pc, #112]	; (80035d0 <xTaskResumeAll+0x120>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1cb      	bne.n	80034fc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800356a:	f000 fb55 	bl	8003c18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800356e:	4b1d      	ldr	r3, [pc, #116]	; (80035e4 <xTaskResumeAll+0x134>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d010      	beq.n	800359c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800357a:	f000 f845 	bl	8003608 <xTaskIncrementTick>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d002      	beq.n	800358a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003584:	4b16      	ldr	r3, [pc, #88]	; (80035e0 <xTaskResumeAll+0x130>)
 8003586:	2201      	movs	r2, #1
 8003588:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	3b01      	subs	r3, #1
 800358e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1f1      	bne.n	800357a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003596:	4b13      	ldr	r3, [pc, #76]	; (80035e4 <xTaskResumeAll+0x134>)
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800359c:	4b10      	ldr	r3, [pc, #64]	; (80035e0 <xTaskResumeAll+0x130>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d009      	beq.n	80035b8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80035a4:	2301      	movs	r3, #1
 80035a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80035a8:	4b0f      	ldr	r3, [pc, #60]	; (80035e8 <xTaskResumeAll+0x138>)
 80035aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035ae:	601a      	str	r2, [r3, #0]
 80035b0:	f3bf 8f4f 	dsb	sy
 80035b4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80035b8:	f001 f970 	bl	800489c <vPortExitCritical>

	return xAlreadyYielded;
 80035bc:	68bb      	ldr	r3, [r7, #8]
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	20000cd8 	.word	0x20000cd8
 80035cc:	20000cb0 	.word	0x20000cb0
 80035d0:	20000c70 	.word	0x20000c70
 80035d4:	20000cb8 	.word	0x20000cb8
 80035d8:	200007e0 	.word	0x200007e0
 80035dc:	200007dc 	.word	0x200007dc
 80035e0:	20000cc4 	.word	0x20000cc4
 80035e4:	20000cc0 	.word	0x20000cc0
 80035e8:	e000ed04 	.word	0xe000ed04

080035ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80035f2:	4b04      	ldr	r3, [pc, #16]	; (8003604 <xTaskGetTickCount+0x18>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80035f8:	687b      	ldr	r3, [r7, #4]
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	bc80      	pop	{r7}
 8003602:	4770      	bx	lr
 8003604:	20000cb4 	.word	0x20000cb4

08003608 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800360e:	2300      	movs	r3, #0
 8003610:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003612:	4b51      	ldr	r3, [pc, #324]	; (8003758 <xTaskIncrementTick+0x150>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2b00      	cmp	r3, #0
 8003618:	f040 808e 	bne.w	8003738 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800361c:	4b4f      	ldr	r3, [pc, #316]	; (800375c <xTaskIncrementTick+0x154>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	3301      	adds	r3, #1
 8003622:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003624:	4a4d      	ldr	r2, [pc, #308]	; (800375c <xTaskIncrementTick+0x154>)
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d120      	bne.n	8003672 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003630:	4b4b      	ldr	r3, [pc, #300]	; (8003760 <xTaskIncrementTick+0x158>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00a      	beq.n	8003650 <xTaskIncrementTick+0x48>
	__asm volatile
 800363a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363e:	f383 8811 	msr	BASEPRI, r3
 8003642:	f3bf 8f6f 	isb	sy
 8003646:	f3bf 8f4f 	dsb	sy
 800364a:	603b      	str	r3, [r7, #0]
}
 800364c:	bf00      	nop
 800364e:	e7fe      	b.n	800364e <xTaskIncrementTick+0x46>
 8003650:	4b43      	ldr	r3, [pc, #268]	; (8003760 <xTaskIncrementTick+0x158>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	60fb      	str	r3, [r7, #12]
 8003656:	4b43      	ldr	r3, [pc, #268]	; (8003764 <xTaskIncrementTick+0x15c>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a41      	ldr	r2, [pc, #260]	; (8003760 <xTaskIncrementTick+0x158>)
 800365c:	6013      	str	r3, [r2, #0]
 800365e:	4a41      	ldr	r2, [pc, #260]	; (8003764 <xTaskIncrementTick+0x15c>)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6013      	str	r3, [r2, #0]
 8003664:	4b40      	ldr	r3, [pc, #256]	; (8003768 <xTaskIncrementTick+0x160>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	3301      	adds	r3, #1
 800366a:	4a3f      	ldr	r2, [pc, #252]	; (8003768 <xTaskIncrementTick+0x160>)
 800366c:	6013      	str	r3, [r2, #0]
 800366e:	f000 fad3 	bl	8003c18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003672:	4b3e      	ldr	r3, [pc, #248]	; (800376c <xTaskIncrementTick+0x164>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	429a      	cmp	r2, r3
 800367a:	d34e      	bcc.n	800371a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800367c:	4b38      	ldr	r3, [pc, #224]	; (8003760 <xTaskIncrementTick+0x158>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <xTaskIncrementTick+0x82>
 8003686:	2301      	movs	r3, #1
 8003688:	e000      	b.n	800368c <xTaskIncrementTick+0x84>
 800368a:	2300      	movs	r3, #0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d004      	beq.n	800369a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003690:	4b36      	ldr	r3, [pc, #216]	; (800376c <xTaskIncrementTick+0x164>)
 8003692:	f04f 32ff 	mov.w	r2, #4294967295
 8003696:	601a      	str	r2, [r3, #0]
					break;
 8003698:	e03f      	b.n	800371a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800369a:	4b31      	ldr	r3, [pc, #196]	; (8003760 <xTaskIncrementTick+0x158>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d203      	bcs.n	80036ba <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80036b2:	4a2e      	ldr	r2, [pc, #184]	; (800376c <xTaskIncrementTick+0x164>)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6013      	str	r3, [r2, #0]
						break;
 80036b8:	e02f      	b.n	800371a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	3304      	adds	r3, #4
 80036be:	4618      	mov	r0, r3
 80036c0:	f7fe fcb6 	bl	8002030 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d004      	beq.n	80036d6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	3318      	adds	r3, #24
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7fe fcad 	bl	8002030 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036da:	4b25      	ldr	r3, [pc, #148]	; (8003770 <xTaskIncrementTick+0x168>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d903      	bls.n	80036ea <xTaskIncrementTick+0xe2>
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e6:	4a22      	ldr	r2, [pc, #136]	; (8003770 <xTaskIncrementTick+0x168>)
 80036e8:	6013      	str	r3, [r2, #0]
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ee:	4613      	mov	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4413      	add	r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4a1f      	ldr	r2, [pc, #124]	; (8003774 <xTaskIncrementTick+0x16c>)
 80036f8:	441a      	add	r2, r3
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	3304      	adds	r3, #4
 80036fe:	4619      	mov	r1, r3
 8003700:	4610      	mov	r0, r2
 8003702:	f7fe fc3a 	bl	8001f7a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800370a:	4b1b      	ldr	r3, [pc, #108]	; (8003778 <xTaskIncrementTick+0x170>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003710:	429a      	cmp	r2, r3
 8003712:	d3b3      	bcc.n	800367c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003714:	2301      	movs	r3, #1
 8003716:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003718:	e7b0      	b.n	800367c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800371a:	4b17      	ldr	r3, [pc, #92]	; (8003778 <xTaskIncrementTick+0x170>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003720:	4914      	ldr	r1, [pc, #80]	; (8003774 <xTaskIncrementTick+0x16c>)
 8003722:	4613      	mov	r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	4413      	add	r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	440b      	add	r3, r1
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d907      	bls.n	8003742 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003732:	2301      	movs	r3, #1
 8003734:	617b      	str	r3, [r7, #20]
 8003736:	e004      	b.n	8003742 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003738:	4b10      	ldr	r3, [pc, #64]	; (800377c <xTaskIncrementTick+0x174>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	3301      	adds	r3, #1
 800373e:	4a0f      	ldr	r2, [pc, #60]	; (800377c <xTaskIncrementTick+0x174>)
 8003740:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003742:	4b0f      	ldr	r3, [pc, #60]	; (8003780 <xTaskIncrementTick+0x178>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800374a:	2301      	movs	r3, #1
 800374c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800374e:	697b      	ldr	r3, [r7, #20]
}
 8003750:	4618      	mov	r0, r3
 8003752:	3718      	adds	r7, #24
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	20000cd8 	.word	0x20000cd8
 800375c:	20000cb4 	.word	0x20000cb4
 8003760:	20000c68 	.word	0x20000c68
 8003764:	20000c6c 	.word	0x20000c6c
 8003768:	20000cc8 	.word	0x20000cc8
 800376c:	20000cd0 	.word	0x20000cd0
 8003770:	20000cb8 	.word	0x20000cb8
 8003774:	200007e0 	.word	0x200007e0
 8003778:	200007dc 	.word	0x200007dc
 800377c:	20000cc0 	.word	0x20000cc0
 8003780:	20000cc4 	.word	0x20000cc4

08003784 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800378a:	4b27      	ldr	r3, [pc, #156]	; (8003828 <vTaskSwitchContext+0xa4>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003792:	4b26      	ldr	r3, [pc, #152]	; (800382c <vTaskSwitchContext+0xa8>)
 8003794:	2201      	movs	r2, #1
 8003796:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003798:	e041      	b.n	800381e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800379a:	4b24      	ldr	r3, [pc, #144]	; (800382c <vTaskSwitchContext+0xa8>)
 800379c:	2200      	movs	r2, #0
 800379e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80037a0:	4b23      	ldr	r3, [pc, #140]	; (8003830 <vTaskSwitchContext+0xac>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	60fb      	str	r3, [r7, #12]
 80037a6:	e010      	b.n	80037ca <vTaskSwitchContext+0x46>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d10a      	bne.n	80037c4 <vTaskSwitchContext+0x40>
	__asm volatile
 80037ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b2:	f383 8811 	msr	BASEPRI, r3
 80037b6:	f3bf 8f6f 	isb	sy
 80037ba:	f3bf 8f4f 	dsb	sy
 80037be:	607b      	str	r3, [r7, #4]
}
 80037c0:	bf00      	nop
 80037c2:	e7fe      	b.n	80037c2 <vTaskSwitchContext+0x3e>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	3b01      	subs	r3, #1
 80037c8:	60fb      	str	r3, [r7, #12]
 80037ca:	491a      	ldr	r1, [pc, #104]	; (8003834 <vTaskSwitchContext+0xb0>)
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	4613      	mov	r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	4413      	add	r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	440b      	add	r3, r1
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d0e4      	beq.n	80037a8 <vTaskSwitchContext+0x24>
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	4613      	mov	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	4413      	add	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4a12      	ldr	r2, [pc, #72]	; (8003834 <vTaskSwitchContext+0xb0>)
 80037ea:	4413      	add	r3, r2
 80037ec:	60bb      	str	r3, [r7, #8]
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	605a      	str	r2, [r3, #4]
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	685a      	ldr	r2, [r3, #4]
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	3308      	adds	r3, #8
 8003800:	429a      	cmp	r2, r3
 8003802:	d104      	bne.n	800380e <vTaskSwitchContext+0x8a>
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	605a      	str	r2, [r3, #4]
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	4a08      	ldr	r2, [pc, #32]	; (8003838 <vTaskSwitchContext+0xb4>)
 8003816:	6013      	str	r3, [r2, #0]
 8003818:	4a05      	ldr	r2, [pc, #20]	; (8003830 <vTaskSwitchContext+0xac>)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6013      	str	r3, [r2, #0]
}
 800381e:	bf00      	nop
 8003820:	3714      	adds	r7, #20
 8003822:	46bd      	mov	sp, r7
 8003824:	bc80      	pop	{r7}
 8003826:	4770      	bx	lr
 8003828:	20000cd8 	.word	0x20000cd8
 800382c:	20000cc4 	.word	0x20000cc4
 8003830:	20000cb8 	.word	0x20000cb8
 8003834:	200007e0 	.word	0x200007e0
 8003838:	200007dc 	.word	0x200007dc

0800383c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10a      	bne.n	8003862 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800384c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003850:	f383 8811 	msr	BASEPRI, r3
 8003854:	f3bf 8f6f 	isb	sy
 8003858:	f3bf 8f4f 	dsb	sy
 800385c:	60fb      	str	r3, [r7, #12]
}
 800385e:	bf00      	nop
 8003860:	e7fe      	b.n	8003860 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003862:	4b07      	ldr	r3, [pc, #28]	; (8003880 <vTaskPlaceOnEventList+0x44>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	3318      	adds	r3, #24
 8003868:	4619      	mov	r1, r3
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7fe fba8 	bl	8001fc0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003870:	2101      	movs	r1, #1
 8003872:	6838      	ldr	r0, [r7, #0]
 8003874:	f000 fb88 	bl	8003f88 <prvAddCurrentTaskToDelayedList>
}
 8003878:	bf00      	nop
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	200007dc 	.word	0x200007dc

08003884 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10a      	bne.n	80038ac <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800389a:	f383 8811 	msr	BASEPRI, r3
 800389e:	f3bf 8f6f 	isb	sy
 80038a2:	f3bf 8f4f 	dsb	sy
 80038a6:	617b      	str	r3, [r7, #20]
}
 80038a8:	bf00      	nop
 80038aa:	e7fe      	b.n	80038aa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80038ac:	4b0a      	ldr	r3, [pc, #40]	; (80038d8 <vTaskPlaceOnEventListRestricted+0x54>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	3318      	adds	r3, #24
 80038b2:	4619      	mov	r1, r3
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f7fe fb60 	bl	8001f7a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d002      	beq.n	80038c6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80038c0:	f04f 33ff 	mov.w	r3, #4294967295
 80038c4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80038c6:	6879      	ldr	r1, [r7, #4]
 80038c8:	68b8      	ldr	r0, [r7, #8]
 80038ca:	f000 fb5d 	bl	8003f88 <prvAddCurrentTaskToDelayedList>
	}
 80038ce:	bf00      	nop
 80038d0:	3718      	adds	r7, #24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	200007dc 	.word	0x200007dc

080038dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d10a      	bne.n	8003908 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80038f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f6:	f383 8811 	msr	BASEPRI, r3
 80038fa:	f3bf 8f6f 	isb	sy
 80038fe:	f3bf 8f4f 	dsb	sy
 8003902:	60fb      	str	r3, [r7, #12]
}
 8003904:	bf00      	nop
 8003906:	e7fe      	b.n	8003906 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	3318      	adds	r3, #24
 800390c:	4618      	mov	r0, r3
 800390e:	f7fe fb8f 	bl	8002030 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003912:	4b1e      	ldr	r3, [pc, #120]	; (800398c <xTaskRemoveFromEventList+0xb0>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d11d      	bne.n	8003956 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	3304      	adds	r3, #4
 800391e:	4618      	mov	r0, r3
 8003920:	f7fe fb86 	bl	8002030 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003928:	4b19      	ldr	r3, [pc, #100]	; (8003990 <xTaskRemoveFromEventList+0xb4>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	429a      	cmp	r2, r3
 800392e:	d903      	bls.n	8003938 <xTaskRemoveFromEventList+0x5c>
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003934:	4a16      	ldr	r2, [pc, #88]	; (8003990 <xTaskRemoveFromEventList+0xb4>)
 8003936:	6013      	str	r3, [r2, #0]
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800393c:	4613      	mov	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4413      	add	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4a13      	ldr	r2, [pc, #76]	; (8003994 <xTaskRemoveFromEventList+0xb8>)
 8003946:	441a      	add	r2, r3
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	3304      	adds	r3, #4
 800394c:	4619      	mov	r1, r3
 800394e:	4610      	mov	r0, r2
 8003950:	f7fe fb13 	bl	8001f7a <vListInsertEnd>
 8003954:	e005      	b.n	8003962 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	3318      	adds	r3, #24
 800395a:	4619      	mov	r1, r3
 800395c:	480e      	ldr	r0, [pc, #56]	; (8003998 <xTaskRemoveFromEventList+0xbc>)
 800395e:	f7fe fb0c 	bl	8001f7a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003966:	4b0d      	ldr	r3, [pc, #52]	; (800399c <xTaskRemoveFromEventList+0xc0>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396c:	429a      	cmp	r2, r3
 800396e:	d905      	bls.n	800397c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003970:	2301      	movs	r3, #1
 8003972:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003974:	4b0a      	ldr	r3, [pc, #40]	; (80039a0 <xTaskRemoveFromEventList+0xc4>)
 8003976:	2201      	movs	r2, #1
 8003978:	601a      	str	r2, [r3, #0]
 800397a:	e001      	b.n	8003980 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800397c:	2300      	movs	r3, #0
 800397e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003980:	697b      	ldr	r3, [r7, #20]
}
 8003982:	4618      	mov	r0, r3
 8003984:	3718      	adds	r7, #24
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	20000cd8 	.word	0x20000cd8
 8003990:	20000cb8 	.word	0x20000cb8
 8003994:	200007e0 	.word	0x200007e0
 8003998:	20000c70 	.word	0x20000c70
 800399c:	200007dc 	.word	0x200007dc
 80039a0:	20000cc4 	.word	0x20000cc4

080039a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80039ac:	4b06      	ldr	r3, [pc, #24]	; (80039c8 <vTaskInternalSetTimeOutState+0x24>)
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80039b4:	4b05      	ldr	r3, [pc, #20]	; (80039cc <vTaskInternalSetTimeOutState+0x28>)
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	605a      	str	r2, [r3, #4]
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bc80      	pop	{r7}
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	20000cc8 	.word	0x20000cc8
 80039cc:	20000cb4 	.word	0x20000cb4

080039d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b088      	sub	sp, #32
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10a      	bne.n	80039f6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80039e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e4:	f383 8811 	msr	BASEPRI, r3
 80039e8:	f3bf 8f6f 	isb	sy
 80039ec:	f3bf 8f4f 	dsb	sy
 80039f0:	613b      	str	r3, [r7, #16]
}
 80039f2:	bf00      	nop
 80039f4:	e7fe      	b.n	80039f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10a      	bne.n	8003a12 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80039fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a00:	f383 8811 	msr	BASEPRI, r3
 8003a04:	f3bf 8f6f 	isb	sy
 8003a08:	f3bf 8f4f 	dsb	sy
 8003a0c:	60fb      	str	r3, [r7, #12]
}
 8003a0e:	bf00      	nop
 8003a10:	e7fe      	b.n	8003a10 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003a12:	f000 ff13 	bl	800483c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003a16:	4b1d      	ldr	r3, [pc, #116]	; (8003a8c <xTaskCheckForTimeOut+0xbc>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a2e:	d102      	bne.n	8003a36 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003a30:	2300      	movs	r3, #0
 8003a32:	61fb      	str	r3, [r7, #28]
 8003a34:	e023      	b.n	8003a7e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	4b15      	ldr	r3, [pc, #84]	; (8003a90 <xTaskCheckForTimeOut+0xc0>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d007      	beq.n	8003a52 <xTaskCheckForTimeOut+0x82>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d302      	bcc.n	8003a52 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	61fb      	str	r3, [r7, #28]
 8003a50:	e015      	b.n	8003a7e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d20b      	bcs.n	8003a74 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	1ad2      	subs	r2, r2, r3
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f7ff ff9b 	bl	80039a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	61fb      	str	r3, [r7, #28]
 8003a72:	e004      	b.n	8003a7e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	2200      	movs	r2, #0
 8003a78:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003a7e:	f000 ff0d 	bl	800489c <vPortExitCritical>

	return xReturn;
 8003a82:	69fb      	ldr	r3, [r7, #28]
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3720      	adds	r7, #32
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	20000cb4 	.word	0x20000cb4
 8003a90:	20000cc8 	.word	0x20000cc8

08003a94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003a98:	4b03      	ldr	r3, [pc, #12]	; (8003aa8 <vTaskMissedYield+0x14>)
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	601a      	str	r2, [r3, #0]
}
 8003a9e:	bf00      	nop
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bc80      	pop	{r7}
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	20000cc4 	.word	0x20000cc4

08003aac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003ab4:	f000 f852 	bl	8003b5c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003ab8:	4b06      	ldr	r3, [pc, #24]	; (8003ad4 <prvIdleTask+0x28>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d9f9      	bls.n	8003ab4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003ac0:	4b05      	ldr	r3, [pc, #20]	; (8003ad8 <prvIdleTask+0x2c>)
 8003ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ac6:	601a      	str	r2, [r3, #0]
 8003ac8:	f3bf 8f4f 	dsb	sy
 8003acc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003ad0:	e7f0      	b.n	8003ab4 <prvIdleTask+0x8>
 8003ad2:	bf00      	nop
 8003ad4:	200007e0 	.word	0x200007e0
 8003ad8:	e000ed04 	.word	0xe000ed04

08003adc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	607b      	str	r3, [r7, #4]
 8003ae6:	e00c      	b.n	8003b02 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	4613      	mov	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	4413      	add	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4a12      	ldr	r2, [pc, #72]	; (8003b3c <prvInitialiseTaskLists+0x60>)
 8003af4:	4413      	add	r3, r2
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7fe fa14 	bl	8001f24 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	3301      	adds	r3, #1
 8003b00:	607b      	str	r3, [r7, #4]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2b37      	cmp	r3, #55	; 0x37
 8003b06:	d9ef      	bls.n	8003ae8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003b08:	480d      	ldr	r0, [pc, #52]	; (8003b40 <prvInitialiseTaskLists+0x64>)
 8003b0a:	f7fe fa0b 	bl	8001f24 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003b0e:	480d      	ldr	r0, [pc, #52]	; (8003b44 <prvInitialiseTaskLists+0x68>)
 8003b10:	f7fe fa08 	bl	8001f24 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003b14:	480c      	ldr	r0, [pc, #48]	; (8003b48 <prvInitialiseTaskLists+0x6c>)
 8003b16:	f7fe fa05 	bl	8001f24 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003b1a:	480c      	ldr	r0, [pc, #48]	; (8003b4c <prvInitialiseTaskLists+0x70>)
 8003b1c:	f7fe fa02 	bl	8001f24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003b20:	480b      	ldr	r0, [pc, #44]	; (8003b50 <prvInitialiseTaskLists+0x74>)
 8003b22:	f7fe f9ff 	bl	8001f24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003b26:	4b0b      	ldr	r3, [pc, #44]	; (8003b54 <prvInitialiseTaskLists+0x78>)
 8003b28:	4a05      	ldr	r2, [pc, #20]	; (8003b40 <prvInitialiseTaskLists+0x64>)
 8003b2a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003b2c:	4b0a      	ldr	r3, [pc, #40]	; (8003b58 <prvInitialiseTaskLists+0x7c>)
 8003b2e:	4a05      	ldr	r2, [pc, #20]	; (8003b44 <prvInitialiseTaskLists+0x68>)
 8003b30:	601a      	str	r2, [r3, #0]
}
 8003b32:	bf00      	nop
 8003b34:	3708      	adds	r7, #8
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	200007e0 	.word	0x200007e0
 8003b40:	20000c40 	.word	0x20000c40
 8003b44:	20000c54 	.word	0x20000c54
 8003b48:	20000c70 	.word	0x20000c70
 8003b4c:	20000c84 	.word	0x20000c84
 8003b50:	20000c9c 	.word	0x20000c9c
 8003b54:	20000c68 	.word	0x20000c68
 8003b58:	20000c6c 	.word	0x20000c6c

08003b5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b62:	e019      	b.n	8003b98 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003b64:	f000 fe6a 	bl	800483c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003b68:	4b10      	ldr	r3, [pc, #64]	; (8003bac <prvCheckTasksWaitingTermination+0x50>)
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	3304      	adds	r3, #4
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7fe fa5b 	bl	8002030 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003b7a:	4b0d      	ldr	r3, [pc, #52]	; (8003bb0 <prvCheckTasksWaitingTermination+0x54>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	4a0b      	ldr	r2, [pc, #44]	; (8003bb0 <prvCheckTasksWaitingTermination+0x54>)
 8003b82:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003b84:	4b0b      	ldr	r3, [pc, #44]	; (8003bb4 <prvCheckTasksWaitingTermination+0x58>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	4a0a      	ldr	r2, [pc, #40]	; (8003bb4 <prvCheckTasksWaitingTermination+0x58>)
 8003b8c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003b8e:	f000 fe85 	bl	800489c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f810 	bl	8003bb8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b98:	4b06      	ldr	r3, [pc, #24]	; (8003bb4 <prvCheckTasksWaitingTermination+0x58>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1e1      	bne.n	8003b64 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003ba0:	bf00      	nop
 8003ba2:	bf00      	nop
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	20000c84 	.word	0x20000c84
 8003bb0:	20000cb0 	.word	0x20000cb0
 8003bb4:	20000c98 	.word	0x20000c98

08003bb8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d108      	bne.n	8003bdc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f000 fff8 	bl	8004bc4 <vPortFree>
				vPortFree( pxTCB );
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 fff5 	bl	8004bc4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003bda:	e018      	b.n	8003c0e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d103      	bne.n	8003bee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 ffec 	bl	8004bc4 <vPortFree>
	}
 8003bec:	e00f      	b.n	8003c0e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d00a      	beq.n	8003c0e <prvDeleteTCB+0x56>
	__asm volatile
 8003bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bfc:	f383 8811 	msr	BASEPRI, r3
 8003c00:	f3bf 8f6f 	isb	sy
 8003c04:	f3bf 8f4f 	dsb	sy
 8003c08:	60fb      	str	r3, [r7, #12]
}
 8003c0a:	bf00      	nop
 8003c0c:	e7fe      	b.n	8003c0c <prvDeleteTCB+0x54>
	}
 8003c0e:	bf00      	nop
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
	...

08003c18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c1e:	4b0e      	ldr	r3, [pc, #56]	; (8003c58 <prvResetNextTaskUnblockTime+0x40>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d101      	bne.n	8003c2c <prvResetNextTaskUnblockTime+0x14>
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e000      	b.n	8003c2e <prvResetNextTaskUnblockTime+0x16>
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d004      	beq.n	8003c3c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003c32:	4b0a      	ldr	r3, [pc, #40]	; (8003c5c <prvResetNextTaskUnblockTime+0x44>)
 8003c34:	f04f 32ff 	mov.w	r2, #4294967295
 8003c38:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003c3a:	e008      	b.n	8003c4e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003c3c:	4b06      	ldr	r3, [pc, #24]	; (8003c58 <prvResetNextTaskUnblockTime+0x40>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	4a04      	ldr	r2, [pc, #16]	; (8003c5c <prvResetNextTaskUnblockTime+0x44>)
 8003c4c:	6013      	str	r3, [r2, #0]
}
 8003c4e:	bf00      	nop
 8003c50:	370c      	adds	r7, #12
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bc80      	pop	{r7}
 8003c56:	4770      	bx	lr
 8003c58:	20000c68 	.word	0x20000c68
 8003c5c:	20000cd0 	.word	0x20000cd0

08003c60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003c66:	4b0b      	ldr	r3, [pc, #44]	; (8003c94 <xTaskGetSchedulerState+0x34>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d102      	bne.n	8003c74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	607b      	str	r3, [r7, #4]
 8003c72:	e008      	b.n	8003c86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c74:	4b08      	ldr	r3, [pc, #32]	; (8003c98 <xTaskGetSchedulerState+0x38>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d102      	bne.n	8003c82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	607b      	str	r3, [r7, #4]
 8003c80:	e001      	b.n	8003c86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003c82:	2300      	movs	r3, #0
 8003c84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003c86:	687b      	ldr	r3, [r7, #4]
	}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bc80      	pop	{r7}
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	20000cbc 	.word	0x20000cbc
 8003c98:	20000cd8 	.word	0x20000cd8

08003c9c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d056      	beq.n	8003d60 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb6:	4b2d      	ldr	r3, [pc, #180]	; (8003d6c <xTaskPriorityInherit+0xd0>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d246      	bcs.n	8003d4e <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	db06      	blt.n	8003cd6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cc8:	4b28      	ldr	r3, [pc, #160]	; (8003d6c <xTaskPriorityInherit+0xd0>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	6959      	ldr	r1, [r3, #20]
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cde:	4613      	mov	r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	4413      	add	r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	4a22      	ldr	r2, [pc, #136]	; (8003d70 <xTaskPriorityInherit+0xd4>)
 8003ce8:	4413      	add	r3, r2
 8003cea:	4299      	cmp	r1, r3
 8003cec:	d101      	bne.n	8003cf2 <xTaskPriorityInherit+0x56>
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e000      	b.n	8003cf4 <xTaskPriorityInherit+0x58>
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d022      	beq.n	8003d3e <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	3304      	adds	r3, #4
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7fe f997 	bl	8002030 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003d02:	4b1a      	ldr	r3, [pc, #104]	; (8003d6c <xTaskPriorityInherit+0xd0>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d10:	4b18      	ldr	r3, [pc, #96]	; (8003d74 <xTaskPriorityInherit+0xd8>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d903      	bls.n	8003d20 <xTaskPriorityInherit+0x84>
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1c:	4a15      	ldr	r2, [pc, #84]	; (8003d74 <xTaskPriorityInherit+0xd8>)
 8003d1e:	6013      	str	r3, [r2, #0]
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d24:	4613      	mov	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4413      	add	r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	4a10      	ldr	r2, [pc, #64]	; (8003d70 <xTaskPriorityInherit+0xd4>)
 8003d2e:	441a      	add	r2, r3
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	3304      	adds	r3, #4
 8003d34:	4619      	mov	r1, r3
 8003d36:	4610      	mov	r0, r2
 8003d38:	f7fe f91f 	bl	8001f7a <vListInsertEnd>
 8003d3c:	e004      	b.n	8003d48 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003d3e:	4b0b      	ldr	r3, [pc, #44]	; (8003d6c <xTaskPriorityInherit+0xd0>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	60fb      	str	r3, [r7, #12]
 8003d4c:	e008      	b.n	8003d60 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d52:	4b06      	ldr	r3, [pc, #24]	; (8003d6c <xTaskPriorityInherit+0xd0>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d201      	bcs.n	8003d60 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003d60:	68fb      	ldr	r3, [r7, #12]
	}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	200007dc 	.word	0x200007dc
 8003d70:	200007e0 	.word	0x200007e0
 8003d74:	20000cb8 	.word	0x20000cb8

08003d78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003d84:	2300      	movs	r3, #0
 8003d86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d056      	beq.n	8003e3c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003d8e:	4b2e      	ldr	r3, [pc, #184]	; (8003e48 <xTaskPriorityDisinherit+0xd0>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d00a      	beq.n	8003dae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d9c:	f383 8811 	msr	BASEPRI, r3
 8003da0:	f3bf 8f6f 	isb	sy
 8003da4:	f3bf 8f4f 	dsb	sy
 8003da8:	60fb      	str	r3, [r7, #12]
}
 8003daa:	bf00      	nop
 8003dac:	e7fe      	b.n	8003dac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10a      	bne.n	8003dcc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dba:	f383 8811 	msr	BASEPRI, r3
 8003dbe:	f3bf 8f6f 	isb	sy
 8003dc2:	f3bf 8f4f 	dsb	sy
 8003dc6:	60bb      	str	r3, [r7, #8]
}
 8003dc8:	bf00      	nop
 8003dca:	e7fe      	b.n	8003dca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dd0:	1e5a      	subs	r2, r3, #1
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d02c      	beq.n	8003e3c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d128      	bne.n	8003e3c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	3304      	adds	r3, #4
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7fe f91e 	bl	8002030 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e00:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e0c:	4b0f      	ldr	r3, [pc, #60]	; (8003e4c <xTaskPriorityDisinherit+0xd4>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d903      	bls.n	8003e1c <xTaskPriorityDisinherit+0xa4>
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e18:	4a0c      	ldr	r2, [pc, #48]	; (8003e4c <xTaskPriorityDisinherit+0xd4>)
 8003e1a:	6013      	str	r3, [r2, #0]
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e20:	4613      	mov	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4413      	add	r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	4a09      	ldr	r2, [pc, #36]	; (8003e50 <xTaskPriorityDisinherit+0xd8>)
 8003e2a:	441a      	add	r2, r3
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	3304      	adds	r3, #4
 8003e30:	4619      	mov	r1, r3
 8003e32:	4610      	mov	r0, r2
 8003e34:	f7fe f8a1 	bl	8001f7a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003e3c:	697b      	ldr	r3, [r7, #20]
	}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3718      	adds	r7, #24
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	200007dc 	.word	0x200007dc
 8003e4c:	20000cb8 	.word	0x20000cb8
 8003e50:	200007e0 	.word	0x200007e0

08003e54 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b088      	sub	sp, #32
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003e62:	2301      	movs	r3, #1
 8003e64:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d06f      	beq.n	8003f4c <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d10a      	bne.n	8003e8a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8003e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e78:	f383 8811 	msr	BASEPRI, r3
 8003e7c:	f3bf 8f6f 	isb	sy
 8003e80:	f3bf 8f4f 	dsb	sy
 8003e84:	60fb      	str	r3, [r7, #12]
}
 8003e86:	bf00      	nop
 8003e88:	e7fe      	b.n	8003e88 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e8e:	683a      	ldr	r2, [r7, #0]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d902      	bls.n	8003e9a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	61fb      	str	r3, [r7, #28]
 8003e98:	e002      	b.n	8003ea0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e9e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea4:	69fa      	ldr	r2, [r7, #28]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d050      	beq.n	8003f4c <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d14b      	bne.n	8003f4c <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8003eb4:	4b27      	ldr	r3, [pc, #156]	; (8003f54 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d10a      	bne.n	8003ed4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8003ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec2:	f383 8811 	msr	BASEPRI, r3
 8003ec6:	f3bf 8f6f 	isb	sy
 8003eca:	f3bf 8f4f 	dsb	sy
 8003ece:	60bb      	str	r3, [r7, #8]
}
 8003ed0:	bf00      	nop
 8003ed2:	e7fe      	b.n	8003ed2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	69fa      	ldr	r2, [r7, #28]
 8003ede:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	db04      	blt.n	8003ef2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	6959      	ldr	r1, [r3, #20]
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	4413      	add	r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	4a15      	ldr	r2, [pc, #84]	; (8003f58 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8003f02:	4413      	add	r3, r2
 8003f04:	4299      	cmp	r1, r3
 8003f06:	d101      	bne.n	8003f0c <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e000      	b.n	8003f0e <vTaskPriorityDisinheritAfterTimeout+0xba>
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d01c      	beq.n	8003f4c <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	3304      	adds	r3, #4
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7fe f88a 	bl	8002030 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f20:	4b0e      	ldr	r3, [pc, #56]	; (8003f5c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d903      	bls.n	8003f30 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2c:	4a0b      	ldr	r2, [pc, #44]	; (8003f5c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8003f2e:	6013      	str	r3, [r2, #0]
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f34:	4613      	mov	r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	4413      	add	r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	4a06      	ldr	r2, [pc, #24]	; (8003f58 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8003f3e:	441a      	add	r2, r3
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	3304      	adds	r3, #4
 8003f44:	4619      	mov	r1, r3
 8003f46:	4610      	mov	r0, r2
 8003f48:	f7fe f817 	bl	8001f7a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003f4c:	bf00      	nop
 8003f4e:	3720      	adds	r7, #32
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	200007dc 	.word	0x200007dc
 8003f58:	200007e0 	.word	0x200007e0
 8003f5c:	20000cb8 	.word	0x20000cb8

08003f60 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8003f60:	b480      	push	{r7}
 8003f62:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003f64:	4b07      	ldr	r3, [pc, #28]	; (8003f84 <pvTaskIncrementMutexHeldCount+0x24>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d004      	beq.n	8003f76 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003f6c:	4b05      	ldr	r3, [pc, #20]	; (8003f84 <pvTaskIncrementMutexHeldCount+0x24>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f72:	3201      	adds	r2, #1
 8003f74:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8003f76:	4b03      	ldr	r3, [pc, #12]	; (8003f84 <pvTaskIncrementMutexHeldCount+0x24>)
 8003f78:	681b      	ldr	r3, [r3, #0]
	}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bc80      	pop	{r7}
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	200007dc 	.word	0x200007dc

08003f88 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003f92:	4b21      	ldr	r3, [pc, #132]	; (8004018 <prvAddCurrentTaskToDelayedList+0x90>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f98:	4b20      	ldr	r3, [pc, #128]	; (800401c <prvAddCurrentTaskToDelayedList+0x94>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	3304      	adds	r3, #4
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7fe f846 	bl	8002030 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003faa:	d10a      	bne.n	8003fc2 <prvAddCurrentTaskToDelayedList+0x3a>
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d007      	beq.n	8003fc2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fb2:	4b1a      	ldr	r3, [pc, #104]	; (800401c <prvAddCurrentTaskToDelayedList+0x94>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	3304      	adds	r3, #4
 8003fb8:	4619      	mov	r1, r3
 8003fba:	4819      	ldr	r0, [pc, #100]	; (8004020 <prvAddCurrentTaskToDelayedList+0x98>)
 8003fbc:	f7fd ffdd 	bl	8001f7a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003fc0:	e026      	b.n	8004010 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003fca:	4b14      	ldr	r3, [pc, #80]	; (800401c <prvAddCurrentTaskToDelayedList+0x94>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003fd2:	68ba      	ldr	r2, [r7, #8]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d209      	bcs.n	8003fee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fda:	4b12      	ldr	r3, [pc, #72]	; (8004024 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	4b0f      	ldr	r3, [pc, #60]	; (800401c <prvAddCurrentTaskToDelayedList+0x94>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	3304      	adds	r3, #4
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	4610      	mov	r0, r2
 8003fe8:	f7fd ffea 	bl	8001fc0 <vListInsert>
}
 8003fec:	e010      	b.n	8004010 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fee:	4b0e      	ldr	r3, [pc, #56]	; (8004028 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	4b0a      	ldr	r3, [pc, #40]	; (800401c <prvAddCurrentTaskToDelayedList+0x94>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	3304      	adds	r3, #4
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	4610      	mov	r0, r2
 8003ffc:	f7fd ffe0 	bl	8001fc0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004000:	4b0a      	ldr	r3, [pc, #40]	; (800402c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	429a      	cmp	r2, r3
 8004008:	d202      	bcs.n	8004010 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800400a:	4a08      	ldr	r2, [pc, #32]	; (800402c <prvAddCurrentTaskToDelayedList+0xa4>)
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	6013      	str	r3, [r2, #0]
}
 8004010:	bf00      	nop
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	20000cb4 	.word	0x20000cb4
 800401c:	200007dc 	.word	0x200007dc
 8004020:	20000c9c 	.word	0x20000c9c
 8004024:	20000c6c 	.word	0x20000c6c
 8004028:	20000c68 	.word	0x20000c68
 800402c:	20000cd0 	.word	0x20000cd0

08004030 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b08a      	sub	sp, #40	; 0x28
 8004034:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004036:	2300      	movs	r3, #0
 8004038:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800403a:	f000 facb 	bl	80045d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800403e:	4b1c      	ldr	r3, [pc, #112]	; (80040b0 <xTimerCreateTimerTask+0x80>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d021      	beq.n	800408a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004046:	2300      	movs	r3, #0
 8004048:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800404a:	2300      	movs	r3, #0
 800404c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800404e:	1d3a      	adds	r2, r7, #4
 8004050:	f107 0108 	add.w	r1, r7, #8
 8004054:	f107 030c 	add.w	r3, r7, #12
 8004058:	4618      	mov	r0, r3
 800405a:	f7fd ff49 	bl	8001ef0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800405e:	6879      	ldr	r1, [r7, #4]
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	9202      	str	r2, [sp, #8]
 8004066:	9301      	str	r3, [sp, #4]
 8004068:	2302      	movs	r3, #2
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	2300      	movs	r3, #0
 800406e:	460a      	mov	r2, r1
 8004070:	4910      	ldr	r1, [pc, #64]	; (80040b4 <xTimerCreateTimerTask+0x84>)
 8004072:	4811      	ldr	r0, [pc, #68]	; (80040b8 <xTimerCreateTimerTask+0x88>)
 8004074:	f7ff f810 	bl	8003098 <xTaskCreateStatic>
 8004078:	4603      	mov	r3, r0
 800407a:	4a10      	ldr	r2, [pc, #64]	; (80040bc <xTimerCreateTimerTask+0x8c>)
 800407c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800407e:	4b0f      	ldr	r3, [pc, #60]	; (80040bc <xTimerCreateTimerTask+0x8c>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d001      	beq.n	800408a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004086:	2301      	movs	r3, #1
 8004088:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d10a      	bne.n	80040a6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004094:	f383 8811 	msr	BASEPRI, r3
 8004098:	f3bf 8f6f 	isb	sy
 800409c:	f3bf 8f4f 	dsb	sy
 80040a0:	613b      	str	r3, [r7, #16]
}
 80040a2:	bf00      	nop
 80040a4:	e7fe      	b.n	80040a4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80040a6:	697b      	ldr	r3, [r7, #20]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3718      	adds	r7, #24
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	20000d0c 	.word	0x20000d0c
 80040b4:	08004ee4 	.word	0x08004ee4
 80040b8:	080041dd 	.word	0x080041dd
 80040bc:	20000d10 	.word	0x20000d10

080040c0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b08a      	sub	sp, #40	; 0x28
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
 80040cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80040ce:	2300      	movs	r3, #0
 80040d0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10a      	bne.n	80040ee <xTimerGenericCommand+0x2e>
	__asm volatile
 80040d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040dc:	f383 8811 	msr	BASEPRI, r3
 80040e0:	f3bf 8f6f 	isb	sy
 80040e4:	f3bf 8f4f 	dsb	sy
 80040e8:	623b      	str	r3, [r7, #32]
}
 80040ea:	bf00      	nop
 80040ec:	e7fe      	b.n	80040ec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80040ee:	4b1a      	ldr	r3, [pc, #104]	; (8004158 <xTimerGenericCommand+0x98>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d02a      	beq.n	800414c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	2b05      	cmp	r3, #5
 8004106:	dc18      	bgt.n	800413a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004108:	f7ff fdaa 	bl	8003c60 <xTaskGetSchedulerState>
 800410c:	4603      	mov	r3, r0
 800410e:	2b02      	cmp	r3, #2
 8004110:	d109      	bne.n	8004126 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004112:	4b11      	ldr	r3, [pc, #68]	; (8004158 <xTimerGenericCommand+0x98>)
 8004114:	6818      	ldr	r0, [r3, #0]
 8004116:	f107 0110 	add.w	r1, r7, #16
 800411a:	2300      	movs	r3, #0
 800411c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800411e:	f7fe f95b 	bl	80023d8 <xQueueGenericSend>
 8004122:	6278      	str	r0, [r7, #36]	; 0x24
 8004124:	e012      	b.n	800414c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004126:	4b0c      	ldr	r3, [pc, #48]	; (8004158 <xTimerGenericCommand+0x98>)
 8004128:	6818      	ldr	r0, [r3, #0]
 800412a:	f107 0110 	add.w	r1, r7, #16
 800412e:	2300      	movs	r3, #0
 8004130:	2200      	movs	r2, #0
 8004132:	f7fe f951 	bl	80023d8 <xQueueGenericSend>
 8004136:	6278      	str	r0, [r7, #36]	; 0x24
 8004138:	e008      	b.n	800414c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800413a:	4b07      	ldr	r3, [pc, #28]	; (8004158 <xTimerGenericCommand+0x98>)
 800413c:	6818      	ldr	r0, [r3, #0]
 800413e:	f107 0110 	add.w	r1, r7, #16
 8004142:	2300      	movs	r3, #0
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	f7fe fa45 	bl	80025d4 <xQueueGenericSendFromISR>
 800414a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800414c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800414e:	4618      	mov	r0, r3
 8004150:	3728      	adds	r7, #40	; 0x28
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	20000d0c 	.word	0x20000d0c

0800415c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b088      	sub	sp, #32
 8004160:	af02      	add	r7, sp, #8
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004166:	4b1c      	ldr	r3, [pc, #112]	; (80041d8 <prvProcessExpiredTimer+0x7c>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	3304      	adds	r3, #4
 8004174:	4618      	mov	r0, r3
 8004176:	f7fd ff5b 	bl	8002030 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	69db      	ldr	r3, [r3, #28]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d122      	bne.n	80041c8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	699a      	ldr	r2, [r3, #24]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	18d1      	adds	r1, r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	6978      	ldr	r0, [r7, #20]
 8004190:	f000 f8c8 	bl	8004324 <prvInsertTimerInActiveList>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d016      	beq.n	80041c8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800419a:	2300      	movs	r3, #0
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	2300      	movs	r3, #0
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	2100      	movs	r1, #0
 80041a4:	6978      	ldr	r0, [r7, #20]
 80041a6:	f7ff ff8b 	bl	80040c0 <xTimerGenericCommand>
 80041aa:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10a      	bne.n	80041c8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80041b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b6:	f383 8811 	msr	BASEPRI, r3
 80041ba:	f3bf 8f6f 	isb	sy
 80041be:	f3bf 8f4f 	dsb	sy
 80041c2:	60fb      	str	r3, [r7, #12]
}
 80041c4:	bf00      	nop
 80041c6:	e7fe      	b.n	80041c6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041cc:	6978      	ldr	r0, [r7, #20]
 80041ce:	4798      	blx	r3
}
 80041d0:	bf00      	nop
 80041d2:	3718      	adds	r7, #24
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	20000d04 	.word	0x20000d04

080041dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80041e4:	f107 0308 	add.w	r3, r7, #8
 80041e8:	4618      	mov	r0, r3
 80041ea:	f000 f857 	bl	800429c <prvGetNextExpireTime>
 80041ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	4619      	mov	r1, r3
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f000 f803 	bl	8004200 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80041fa:	f000 f8d5 	bl	80043a8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80041fe:	e7f1      	b.n	80041e4 <prvTimerTask+0x8>

08004200 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800420a:	f7ff f943 	bl	8003494 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800420e:	f107 0308 	add.w	r3, r7, #8
 8004212:	4618      	mov	r0, r3
 8004214:	f000 f866 	bl	80042e4 <prvSampleTimeNow>
 8004218:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d130      	bne.n	8004282 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10a      	bne.n	800423c <prvProcessTimerOrBlockTask+0x3c>
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	429a      	cmp	r2, r3
 800422c:	d806      	bhi.n	800423c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800422e:	f7ff f93f 	bl	80034b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004232:	68f9      	ldr	r1, [r7, #12]
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f7ff ff91 	bl	800415c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800423a:	e024      	b.n	8004286 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d008      	beq.n	8004254 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004242:	4b13      	ldr	r3, [pc, #76]	; (8004290 <prvProcessTimerOrBlockTask+0x90>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	bf0c      	ite	eq
 800424c:	2301      	moveq	r3, #1
 800424e:	2300      	movne	r3, #0
 8004250:	b2db      	uxtb	r3, r3
 8004252:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004254:	4b0f      	ldr	r3, [pc, #60]	; (8004294 <prvProcessTimerOrBlockTask+0x94>)
 8004256:	6818      	ldr	r0, [r3, #0]
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	4619      	mov	r1, r3
 8004262:	f7fe fee5 	bl	8003030 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004266:	f7ff f923 	bl	80034b0 <xTaskResumeAll>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d10a      	bne.n	8004286 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004270:	4b09      	ldr	r3, [pc, #36]	; (8004298 <prvProcessTimerOrBlockTask+0x98>)
 8004272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004276:	601a      	str	r2, [r3, #0]
 8004278:	f3bf 8f4f 	dsb	sy
 800427c:	f3bf 8f6f 	isb	sy
}
 8004280:	e001      	b.n	8004286 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004282:	f7ff f915 	bl	80034b0 <xTaskResumeAll>
}
 8004286:	bf00      	nop
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	20000d08 	.word	0x20000d08
 8004294:	20000d0c 	.word	0x20000d0c
 8004298:	e000ed04 	.word	0xe000ed04

0800429c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80042a4:	4b0e      	ldr	r3, [pc, #56]	; (80042e0 <prvGetNextExpireTime+0x44>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	bf0c      	ite	eq
 80042ae:	2301      	moveq	r3, #1
 80042b0:	2300      	movne	r3, #0
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	461a      	mov	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d105      	bne.n	80042ce <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80042c2:	4b07      	ldr	r3, [pc, #28]	; (80042e0 <prvGetNextExpireTime+0x44>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	60fb      	str	r3, [r7, #12]
 80042cc:	e001      	b.n	80042d2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80042ce:	2300      	movs	r3, #0
 80042d0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80042d2:	68fb      	ldr	r3, [r7, #12]
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3714      	adds	r7, #20
 80042d8:	46bd      	mov	sp, r7
 80042da:	bc80      	pop	{r7}
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	20000d04 	.word	0x20000d04

080042e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80042ec:	f7ff f97e 	bl	80035ec <xTaskGetTickCount>
 80042f0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80042f2:	4b0b      	ldr	r3, [pc, #44]	; (8004320 <prvSampleTimeNow+0x3c>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d205      	bcs.n	8004308 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80042fc:	f000 f908 	bl	8004510 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	601a      	str	r2, [r3, #0]
 8004306:	e002      	b.n	800430e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800430e:	4a04      	ldr	r2, [pc, #16]	; (8004320 <prvSampleTimeNow+0x3c>)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004314:	68fb      	ldr	r3, [r7, #12]
}
 8004316:	4618      	mov	r0, r3
 8004318:	3710      	adds	r7, #16
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	20000d14 	.word	0x20000d14

08004324 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b086      	sub	sp, #24
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
 8004330:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004332:	2300      	movs	r3, #0
 8004334:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	429a      	cmp	r2, r3
 8004348:	d812      	bhi.n	8004370 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	1ad2      	subs	r2, r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	429a      	cmp	r2, r3
 8004356:	d302      	bcc.n	800435e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004358:	2301      	movs	r3, #1
 800435a:	617b      	str	r3, [r7, #20]
 800435c:	e01b      	b.n	8004396 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800435e:	4b10      	ldr	r3, [pc, #64]	; (80043a0 <prvInsertTimerInActiveList+0x7c>)
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	3304      	adds	r3, #4
 8004366:	4619      	mov	r1, r3
 8004368:	4610      	mov	r0, r2
 800436a:	f7fd fe29 	bl	8001fc0 <vListInsert>
 800436e:	e012      	b.n	8004396 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	429a      	cmp	r2, r3
 8004376:	d206      	bcs.n	8004386 <prvInsertTimerInActiveList+0x62>
 8004378:	68ba      	ldr	r2, [r7, #8]
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	429a      	cmp	r2, r3
 800437e:	d302      	bcc.n	8004386 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004380:	2301      	movs	r3, #1
 8004382:	617b      	str	r3, [r7, #20]
 8004384:	e007      	b.n	8004396 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004386:	4b07      	ldr	r3, [pc, #28]	; (80043a4 <prvInsertTimerInActiveList+0x80>)
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	3304      	adds	r3, #4
 800438e:	4619      	mov	r1, r3
 8004390:	4610      	mov	r0, r2
 8004392:	f7fd fe15 	bl	8001fc0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004396:	697b      	ldr	r3, [r7, #20]
}
 8004398:	4618      	mov	r0, r3
 800439a:	3718      	adds	r7, #24
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	20000d08 	.word	0x20000d08
 80043a4:	20000d04 	.word	0x20000d04

080043a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b08e      	sub	sp, #56	; 0x38
 80043ac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80043ae:	e09d      	b.n	80044ec <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	da18      	bge.n	80043e8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80043b6:	1d3b      	adds	r3, r7, #4
 80043b8:	3304      	adds	r3, #4
 80043ba:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80043bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10a      	bne.n	80043d8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80043c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c6:	f383 8811 	msr	BASEPRI, r3
 80043ca:	f3bf 8f6f 	isb	sy
 80043ce:	f3bf 8f4f 	dsb	sy
 80043d2:	61fb      	str	r3, [r7, #28]
}
 80043d4:	bf00      	nop
 80043d6:	e7fe      	b.n	80043d6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80043d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043de:	6850      	ldr	r0, [r2, #4]
 80043e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043e2:	6892      	ldr	r2, [r2, #8]
 80043e4:	4611      	mov	r1, r2
 80043e6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	db7e      	blt.n	80044ec <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80043f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d004      	beq.n	8004404 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80043fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fc:	3304      	adds	r3, #4
 80043fe:	4618      	mov	r0, r3
 8004400:	f7fd fe16 	bl	8002030 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004404:	463b      	mov	r3, r7
 8004406:	4618      	mov	r0, r3
 8004408:	f7ff ff6c 	bl	80042e4 <prvSampleTimeNow>
 800440c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2b09      	cmp	r3, #9
 8004412:	d86a      	bhi.n	80044ea <prvProcessReceivedCommands+0x142>
 8004414:	a201      	add	r2, pc, #4	; (adr r2, 800441c <prvProcessReceivedCommands+0x74>)
 8004416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800441a:	bf00      	nop
 800441c:	08004445 	.word	0x08004445
 8004420:	08004445 	.word	0x08004445
 8004424:	08004445 	.word	0x08004445
 8004428:	080044ed 	.word	0x080044ed
 800442c:	080044a1 	.word	0x080044a1
 8004430:	080044d9 	.word	0x080044d9
 8004434:	08004445 	.word	0x08004445
 8004438:	08004445 	.word	0x08004445
 800443c:	080044ed 	.word	0x080044ed
 8004440:	080044a1 	.word	0x080044a1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004444:	68ba      	ldr	r2, [r7, #8]
 8004446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	18d1      	adds	r1, r2, r3
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004450:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004452:	f7ff ff67 	bl	8004324 <prvInsertTimerInActiveList>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d047      	beq.n	80044ec <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800445c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004460:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004462:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004466:	69db      	ldr	r3, [r3, #28]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d13f      	bne.n	80044ec <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800446c:	68ba      	ldr	r2, [r7, #8]
 800446e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	441a      	add	r2, r3
 8004474:	2300      	movs	r3, #0
 8004476:	9300      	str	r3, [sp, #0]
 8004478:	2300      	movs	r3, #0
 800447a:	2100      	movs	r1, #0
 800447c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800447e:	f7ff fe1f 	bl	80040c0 <xTimerGenericCommand>
 8004482:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004484:	6a3b      	ldr	r3, [r7, #32]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d130      	bne.n	80044ec <prvProcessReceivedCommands+0x144>
	__asm volatile
 800448a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800448e:	f383 8811 	msr	BASEPRI, r3
 8004492:	f3bf 8f6f 	isb	sy
 8004496:	f3bf 8f4f 	dsb	sy
 800449a:	61bb      	str	r3, [r7, #24]
}
 800449c:	bf00      	nop
 800449e:	e7fe      	b.n	800449e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80044a0:	68ba      	ldr	r2, [r7, #8]
 80044a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80044a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10a      	bne.n	80044c4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80044ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b2:	f383 8811 	msr	BASEPRI, r3
 80044b6:	f3bf 8f6f 	isb	sy
 80044ba:	f3bf 8f4f 	dsb	sy
 80044be:	617b      	str	r3, [r7, #20]
}
 80044c0:	bf00      	nop
 80044c2:	e7fe      	b.n	80044c2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80044c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c6:	699a      	ldr	r2, [r3, #24]
 80044c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ca:	18d1      	adds	r1, r2, r3
 80044cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044d2:	f7ff ff27 	bl	8004324 <prvInsertTimerInActiveList>
					break;
 80044d6:	e009      	b.n	80044ec <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80044d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d104      	bne.n	80044ec <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80044e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044e4:	f000 fb6e 	bl	8004bc4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80044e8:	e000      	b.n	80044ec <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 80044ea:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80044ec:	4b07      	ldr	r3, [pc, #28]	; (800450c <prvProcessReceivedCommands+0x164>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	1d39      	adds	r1, r7, #4
 80044f2:	2200      	movs	r2, #0
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7fe f993 	bl	8002820 <xQueueReceive>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f47f af57 	bne.w	80043b0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004502:	bf00      	nop
 8004504:	bf00      	nop
 8004506:	3730      	adds	r7, #48	; 0x30
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}
 800450c:	20000d0c 	.word	0x20000d0c

08004510 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b088      	sub	sp, #32
 8004514:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004516:	e045      	b.n	80045a4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004518:	4b2c      	ldr	r3, [pc, #176]	; (80045cc <prvSwitchTimerLists+0xbc>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004522:	4b2a      	ldr	r3, [pc, #168]	; (80045cc <prvSwitchTimerLists+0xbc>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	3304      	adds	r3, #4
 8004530:	4618      	mov	r0, r3
 8004532:	f7fd fd7d 	bl	8002030 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d12e      	bne.n	80045a4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	4413      	add	r3, r2
 800454e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004550:	68ba      	ldr	r2, [r7, #8]
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	429a      	cmp	r2, r3
 8004556:	d90e      	bls.n	8004576 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004564:	4b19      	ldr	r3, [pc, #100]	; (80045cc <prvSwitchTimerLists+0xbc>)
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	3304      	adds	r3, #4
 800456c:	4619      	mov	r1, r3
 800456e:	4610      	mov	r0, r2
 8004570:	f7fd fd26 	bl	8001fc0 <vListInsert>
 8004574:	e016      	b.n	80045a4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004576:	2300      	movs	r3, #0
 8004578:	9300      	str	r3, [sp, #0]
 800457a:	2300      	movs	r3, #0
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	2100      	movs	r1, #0
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	f7ff fd9d 	bl	80040c0 <xTimerGenericCommand>
 8004586:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10a      	bne.n	80045a4 <prvSwitchTimerLists+0x94>
	__asm volatile
 800458e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004592:	f383 8811 	msr	BASEPRI, r3
 8004596:	f3bf 8f6f 	isb	sy
 800459a:	f3bf 8f4f 	dsb	sy
 800459e:	603b      	str	r3, [r7, #0]
}
 80045a0:	bf00      	nop
 80045a2:	e7fe      	b.n	80045a2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80045a4:	4b09      	ldr	r3, [pc, #36]	; (80045cc <prvSwitchTimerLists+0xbc>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1b4      	bne.n	8004518 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80045ae:	4b07      	ldr	r3, [pc, #28]	; (80045cc <prvSwitchTimerLists+0xbc>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80045b4:	4b06      	ldr	r3, [pc, #24]	; (80045d0 <prvSwitchTimerLists+0xc0>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a04      	ldr	r2, [pc, #16]	; (80045cc <prvSwitchTimerLists+0xbc>)
 80045ba:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80045bc:	4a04      	ldr	r2, [pc, #16]	; (80045d0 <prvSwitchTimerLists+0xc0>)
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	6013      	str	r3, [r2, #0]
}
 80045c2:	bf00      	nop
 80045c4:	3718      	adds	r7, #24
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	20000d04 	.word	0x20000d04
 80045d0:	20000d08 	.word	0x20000d08

080045d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80045da:	f000 f92f 	bl	800483c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80045de:	4b15      	ldr	r3, [pc, #84]	; (8004634 <prvCheckForValidListAndQueue+0x60>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d120      	bne.n	8004628 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80045e6:	4814      	ldr	r0, [pc, #80]	; (8004638 <prvCheckForValidListAndQueue+0x64>)
 80045e8:	f7fd fc9c 	bl	8001f24 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80045ec:	4813      	ldr	r0, [pc, #76]	; (800463c <prvCheckForValidListAndQueue+0x68>)
 80045ee:	f7fd fc99 	bl	8001f24 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80045f2:	4b13      	ldr	r3, [pc, #76]	; (8004640 <prvCheckForValidListAndQueue+0x6c>)
 80045f4:	4a10      	ldr	r2, [pc, #64]	; (8004638 <prvCheckForValidListAndQueue+0x64>)
 80045f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80045f8:	4b12      	ldr	r3, [pc, #72]	; (8004644 <prvCheckForValidListAndQueue+0x70>)
 80045fa:	4a10      	ldr	r2, [pc, #64]	; (800463c <prvCheckForValidListAndQueue+0x68>)
 80045fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80045fe:	2300      	movs	r3, #0
 8004600:	9300      	str	r3, [sp, #0]
 8004602:	4b11      	ldr	r3, [pc, #68]	; (8004648 <prvCheckForValidListAndQueue+0x74>)
 8004604:	4a11      	ldr	r2, [pc, #68]	; (800464c <prvCheckForValidListAndQueue+0x78>)
 8004606:	2110      	movs	r1, #16
 8004608:	200a      	movs	r0, #10
 800460a:	f7fd fda3 	bl	8002154 <xQueueGenericCreateStatic>
 800460e:	4603      	mov	r3, r0
 8004610:	4a08      	ldr	r2, [pc, #32]	; (8004634 <prvCheckForValidListAndQueue+0x60>)
 8004612:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004614:	4b07      	ldr	r3, [pc, #28]	; (8004634 <prvCheckForValidListAndQueue+0x60>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d005      	beq.n	8004628 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800461c:	4b05      	ldr	r3, [pc, #20]	; (8004634 <prvCheckForValidListAndQueue+0x60>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	490b      	ldr	r1, [pc, #44]	; (8004650 <prvCheckForValidListAndQueue+0x7c>)
 8004622:	4618      	mov	r0, r3
 8004624:	f7fe fcb2 	bl	8002f8c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004628:	f000 f938 	bl	800489c <vPortExitCritical>
}
 800462c:	bf00      	nop
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	20000d0c 	.word	0x20000d0c
 8004638:	20000cdc 	.word	0x20000cdc
 800463c:	20000cf0 	.word	0x20000cf0
 8004640:	20000d04 	.word	0x20000d04
 8004644:	20000d08 	.word	0x20000d08
 8004648:	20000db8 	.word	0x20000db8
 800464c:	20000d18 	.word	0x20000d18
 8004650:	08004eec 	.word	0x08004eec

08004654 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	3b04      	subs	r3, #4
 8004664:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800466c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	3b04      	subs	r3, #4
 8004672:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	f023 0201 	bic.w	r2, r3, #1
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	3b04      	subs	r3, #4
 8004682:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004684:	4a08      	ldr	r2, [pc, #32]	; (80046a8 <pxPortInitialiseStack+0x54>)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	3b14      	subs	r3, #20
 800468e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	3b20      	subs	r3, #32
 800469a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800469c:	68fb      	ldr	r3, [r7, #12]
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3714      	adds	r7, #20
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bc80      	pop	{r7}
 80046a6:	4770      	bx	lr
 80046a8:	080046ad 	.word	0x080046ad

080046ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80046b2:	2300      	movs	r3, #0
 80046b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80046b6:	4b12      	ldr	r3, [pc, #72]	; (8004700 <prvTaskExitError+0x54>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046be:	d00a      	beq.n	80046d6 <prvTaskExitError+0x2a>
	__asm volatile
 80046c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c4:	f383 8811 	msr	BASEPRI, r3
 80046c8:	f3bf 8f6f 	isb	sy
 80046cc:	f3bf 8f4f 	dsb	sy
 80046d0:	60fb      	str	r3, [r7, #12]
}
 80046d2:	bf00      	nop
 80046d4:	e7fe      	b.n	80046d4 <prvTaskExitError+0x28>
	__asm volatile
 80046d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046da:	f383 8811 	msr	BASEPRI, r3
 80046de:	f3bf 8f6f 	isb	sy
 80046e2:	f3bf 8f4f 	dsb	sy
 80046e6:	60bb      	str	r3, [r7, #8]
}
 80046e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80046ea:	bf00      	nop
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d0fc      	beq.n	80046ec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80046f2:	bf00      	nop
 80046f4:	bf00      	nop
 80046f6:	3714      	adds	r7, #20
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bc80      	pop	{r7}
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	200000a4 	.word	0x200000a4
	...

08004710 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004710:	4b07      	ldr	r3, [pc, #28]	; (8004730 <pxCurrentTCBConst2>)
 8004712:	6819      	ldr	r1, [r3, #0]
 8004714:	6808      	ldr	r0, [r1, #0]
 8004716:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800471a:	f380 8809 	msr	PSP, r0
 800471e:	f3bf 8f6f 	isb	sy
 8004722:	f04f 0000 	mov.w	r0, #0
 8004726:	f380 8811 	msr	BASEPRI, r0
 800472a:	f04e 0e0d 	orr.w	lr, lr, #13
 800472e:	4770      	bx	lr

08004730 <pxCurrentTCBConst2>:
 8004730:	200007dc 	.word	0x200007dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004734:	bf00      	nop
 8004736:	bf00      	nop

08004738 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004738:	4806      	ldr	r0, [pc, #24]	; (8004754 <prvPortStartFirstTask+0x1c>)
 800473a:	6800      	ldr	r0, [r0, #0]
 800473c:	6800      	ldr	r0, [r0, #0]
 800473e:	f380 8808 	msr	MSP, r0
 8004742:	b662      	cpsie	i
 8004744:	b661      	cpsie	f
 8004746:	f3bf 8f4f 	dsb	sy
 800474a:	f3bf 8f6f 	isb	sy
 800474e:	df00      	svc	0
 8004750:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004752:	bf00      	nop
 8004754:	e000ed08 	.word	0xe000ed08

08004758 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800475e:	4b32      	ldr	r3, [pc, #200]	; (8004828 <xPortStartScheduler+0xd0>)
 8004760:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	b2db      	uxtb	r3, r3
 8004768:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	22ff      	movs	r2, #255	; 0xff
 800476e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	b2db      	uxtb	r3, r3
 8004776:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004778:	78fb      	ldrb	r3, [r7, #3]
 800477a:	b2db      	uxtb	r3, r3
 800477c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004780:	b2da      	uxtb	r2, r3
 8004782:	4b2a      	ldr	r3, [pc, #168]	; (800482c <xPortStartScheduler+0xd4>)
 8004784:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004786:	4b2a      	ldr	r3, [pc, #168]	; (8004830 <xPortStartScheduler+0xd8>)
 8004788:	2207      	movs	r2, #7
 800478a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800478c:	e009      	b.n	80047a2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800478e:	4b28      	ldr	r3, [pc, #160]	; (8004830 <xPortStartScheduler+0xd8>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	3b01      	subs	r3, #1
 8004794:	4a26      	ldr	r2, [pc, #152]	; (8004830 <xPortStartScheduler+0xd8>)
 8004796:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004798:	78fb      	ldrb	r3, [r7, #3]
 800479a:	b2db      	uxtb	r3, r3
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047a2:	78fb      	ldrb	r3, [r7, #3]
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047aa:	2b80      	cmp	r3, #128	; 0x80
 80047ac:	d0ef      	beq.n	800478e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80047ae:	4b20      	ldr	r3, [pc, #128]	; (8004830 <xPortStartScheduler+0xd8>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f1c3 0307 	rsb	r3, r3, #7
 80047b6:	2b04      	cmp	r3, #4
 80047b8:	d00a      	beq.n	80047d0 <xPortStartScheduler+0x78>
	__asm volatile
 80047ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047be:	f383 8811 	msr	BASEPRI, r3
 80047c2:	f3bf 8f6f 	isb	sy
 80047c6:	f3bf 8f4f 	dsb	sy
 80047ca:	60bb      	str	r3, [r7, #8]
}
 80047cc:	bf00      	nop
 80047ce:	e7fe      	b.n	80047ce <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80047d0:	4b17      	ldr	r3, [pc, #92]	; (8004830 <xPortStartScheduler+0xd8>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	021b      	lsls	r3, r3, #8
 80047d6:	4a16      	ldr	r2, [pc, #88]	; (8004830 <xPortStartScheduler+0xd8>)
 80047d8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80047da:	4b15      	ldr	r3, [pc, #84]	; (8004830 <xPortStartScheduler+0xd8>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80047e2:	4a13      	ldr	r2, [pc, #76]	; (8004830 <xPortStartScheduler+0xd8>)
 80047e4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	b2da      	uxtb	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80047ee:	4b11      	ldr	r3, [pc, #68]	; (8004834 <xPortStartScheduler+0xdc>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a10      	ldr	r2, [pc, #64]	; (8004834 <xPortStartScheduler+0xdc>)
 80047f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80047fa:	4b0e      	ldr	r3, [pc, #56]	; (8004834 <xPortStartScheduler+0xdc>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a0d      	ldr	r2, [pc, #52]	; (8004834 <xPortStartScheduler+0xdc>)
 8004800:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004804:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004806:	f000 f8b9 	bl	800497c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800480a:	4b0b      	ldr	r3, [pc, #44]	; (8004838 <xPortStartScheduler+0xe0>)
 800480c:	2200      	movs	r2, #0
 800480e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004810:	f7ff ff92 	bl	8004738 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004814:	f7fe ffb6 	bl	8003784 <vTaskSwitchContext>
	prvTaskExitError();
 8004818:	f7ff ff48 	bl	80046ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	e000e400 	.word	0xe000e400
 800482c:	20000e08 	.word	0x20000e08
 8004830:	20000e0c 	.word	0x20000e0c
 8004834:	e000ed20 	.word	0xe000ed20
 8004838:	200000a4 	.word	0x200000a4

0800483c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
	__asm volatile
 8004842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004846:	f383 8811 	msr	BASEPRI, r3
 800484a:	f3bf 8f6f 	isb	sy
 800484e:	f3bf 8f4f 	dsb	sy
 8004852:	607b      	str	r3, [r7, #4]
}
 8004854:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004856:	4b0f      	ldr	r3, [pc, #60]	; (8004894 <vPortEnterCritical+0x58>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	3301      	adds	r3, #1
 800485c:	4a0d      	ldr	r2, [pc, #52]	; (8004894 <vPortEnterCritical+0x58>)
 800485e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004860:	4b0c      	ldr	r3, [pc, #48]	; (8004894 <vPortEnterCritical+0x58>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d10f      	bne.n	8004888 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004868:	4b0b      	ldr	r3, [pc, #44]	; (8004898 <vPortEnterCritical+0x5c>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00a      	beq.n	8004888 <vPortEnterCritical+0x4c>
	__asm volatile
 8004872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004876:	f383 8811 	msr	BASEPRI, r3
 800487a:	f3bf 8f6f 	isb	sy
 800487e:	f3bf 8f4f 	dsb	sy
 8004882:	603b      	str	r3, [r7, #0]
}
 8004884:	bf00      	nop
 8004886:	e7fe      	b.n	8004886 <vPortEnterCritical+0x4a>
	}
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	bc80      	pop	{r7}
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	200000a4 	.word	0x200000a4
 8004898:	e000ed04 	.word	0xe000ed04

0800489c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80048a2:	4b11      	ldr	r3, [pc, #68]	; (80048e8 <vPortExitCritical+0x4c>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d10a      	bne.n	80048c0 <vPortExitCritical+0x24>
	__asm volatile
 80048aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ae:	f383 8811 	msr	BASEPRI, r3
 80048b2:	f3bf 8f6f 	isb	sy
 80048b6:	f3bf 8f4f 	dsb	sy
 80048ba:	607b      	str	r3, [r7, #4]
}
 80048bc:	bf00      	nop
 80048be:	e7fe      	b.n	80048be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80048c0:	4b09      	ldr	r3, [pc, #36]	; (80048e8 <vPortExitCritical+0x4c>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	3b01      	subs	r3, #1
 80048c6:	4a08      	ldr	r2, [pc, #32]	; (80048e8 <vPortExitCritical+0x4c>)
 80048c8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80048ca:	4b07      	ldr	r3, [pc, #28]	; (80048e8 <vPortExitCritical+0x4c>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d105      	bne.n	80048de <vPortExitCritical+0x42>
 80048d2:	2300      	movs	r3, #0
 80048d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	f383 8811 	msr	BASEPRI, r3
}
 80048dc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80048de:	bf00      	nop
 80048e0:	370c      	adds	r7, #12
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bc80      	pop	{r7}
 80048e6:	4770      	bx	lr
 80048e8:	200000a4 	.word	0x200000a4
 80048ec:	00000000 	.word	0x00000000

080048f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80048f0:	f3ef 8009 	mrs	r0, PSP
 80048f4:	f3bf 8f6f 	isb	sy
 80048f8:	4b0d      	ldr	r3, [pc, #52]	; (8004930 <pxCurrentTCBConst>)
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004900:	6010      	str	r0, [r2, #0]
 8004902:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004906:	f04f 0050 	mov.w	r0, #80	; 0x50
 800490a:	f380 8811 	msr	BASEPRI, r0
 800490e:	f7fe ff39 	bl	8003784 <vTaskSwitchContext>
 8004912:	f04f 0000 	mov.w	r0, #0
 8004916:	f380 8811 	msr	BASEPRI, r0
 800491a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800491e:	6819      	ldr	r1, [r3, #0]
 8004920:	6808      	ldr	r0, [r1, #0]
 8004922:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004926:	f380 8809 	msr	PSP, r0
 800492a:	f3bf 8f6f 	isb	sy
 800492e:	4770      	bx	lr

08004930 <pxCurrentTCBConst>:
 8004930:	200007dc 	.word	0x200007dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004934:	bf00      	nop
 8004936:	bf00      	nop

08004938 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
	__asm volatile
 800493e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004942:	f383 8811 	msr	BASEPRI, r3
 8004946:	f3bf 8f6f 	isb	sy
 800494a:	f3bf 8f4f 	dsb	sy
 800494e:	607b      	str	r3, [r7, #4]
}
 8004950:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004952:	f7fe fe59 	bl	8003608 <xTaskIncrementTick>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d003      	beq.n	8004964 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800495c:	4b06      	ldr	r3, [pc, #24]	; (8004978 <xPortSysTickHandler+0x40>)
 800495e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004962:	601a      	str	r2, [r3, #0]
 8004964:	2300      	movs	r3, #0
 8004966:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	f383 8811 	msr	BASEPRI, r3
}
 800496e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004970:	bf00      	nop
 8004972:	3708      	adds	r7, #8
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	e000ed04 	.word	0xe000ed04

0800497c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800497c:	b480      	push	{r7}
 800497e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004980:	4b0a      	ldr	r3, [pc, #40]	; (80049ac <vPortSetupTimerInterrupt+0x30>)
 8004982:	2200      	movs	r2, #0
 8004984:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004986:	4b0a      	ldr	r3, [pc, #40]	; (80049b0 <vPortSetupTimerInterrupt+0x34>)
 8004988:	2200      	movs	r2, #0
 800498a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800498c:	4b09      	ldr	r3, [pc, #36]	; (80049b4 <vPortSetupTimerInterrupt+0x38>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a09      	ldr	r2, [pc, #36]	; (80049b8 <vPortSetupTimerInterrupt+0x3c>)
 8004992:	fba2 2303 	umull	r2, r3, r2, r3
 8004996:	099b      	lsrs	r3, r3, #6
 8004998:	4a08      	ldr	r2, [pc, #32]	; (80049bc <vPortSetupTimerInterrupt+0x40>)
 800499a:	3b01      	subs	r3, #1
 800499c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800499e:	4b03      	ldr	r3, [pc, #12]	; (80049ac <vPortSetupTimerInterrupt+0x30>)
 80049a0:	2207      	movs	r2, #7
 80049a2:	601a      	str	r2, [r3, #0]
}
 80049a4:	bf00      	nop
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bc80      	pop	{r7}
 80049aa:	4770      	bx	lr
 80049ac:	e000e010 	.word	0xe000e010
 80049b0:	e000e018 	.word	0xe000e018
 80049b4:	20000098 	.word	0x20000098
 80049b8:	10624dd3 	.word	0x10624dd3
 80049bc:	e000e014 	.word	0xe000e014

080049c0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80049c6:	f3ef 8305 	mrs	r3, IPSR
 80049ca:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2b0f      	cmp	r3, #15
 80049d0:	d914      	bls.n	80049fc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80049d2:	4a16      	ldr	r2, [pc, #88]	; (8004a2c <vPortValidateInterruptPriority+0x6c>)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	4413      	add	r3, r2
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80049dc:	4b14      	ldr	r3, [pc, #80]	; (8004a30 <vPortValidateInterruptPriority+0x70>)
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	7afa      	ldrb	r2, [r7, #11]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d20a      	bcs.n	80049fc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80049e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ea:	f383 8811 	msr	BASEPRI, r3
 80049ee:	f3bf 8f6f 	isb	sy
 80049f2:	f3bf 8f4f 	dsb	sy
 80049f6:	607b      	str	r3, [r7, #4]
}
 80049f8:	bf00      	nop
 80049fa:	e7fe      	b.n	80049fa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80049fc:	4b0d      	ldr	r3, [pc, #52]	; (8004a34 <vPortValidateInterruptPriority+0x74>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a04:	4b0c      	ldr	r3, [pc, #48]	; (8004a38 <vPortValidateInterruptPriority+0x78>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d90a      	bls.n	8004a22 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a10:	f383 8811 	msr	BASEPRI, r3
 8004a14:	f3bf 8f6f 	isb	sy
 8004a18:	f3bf 8f4f 	dsb	sy
 8004a1c:	603b      	str	r3, [r7, #0]
}
 8004a1e:	bf00      	nop
 8004a20:	e7fe      	b.n	8004a20 <vPortValidateInterruptPriority+0x60>
	}
 8004a22:	bf00      	nop
 8004a24:	3714      	adds	r7, #20
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bc80      	pop	{r7}
 8004a2a:	4770      	bx	lr
 8004a2c:	e000e3f0 	.word	0xe000e3f0
 8004a30:	20000e08 	.word	0x20000e08
 8004a34:	e000ed0c 	.word	0xe000ed0c
 8004a38:	20000e0c 	.word	0x20000e0c

08004a3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b08a      	sub	sp, #40	; 0x28
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004a44:	2300      	movs	r3, #0
 8004a46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004a48:	f7fe fd24 	bl	8003494 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004a4c:	4b58      	ldr	r3, [pc, #352]	; (8004bb0 <pvPortMalloc+0x174>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d101      	bne.n	8004a58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004a54:	f000 f910 	bl	8004c78 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a58:	4b56      	ldr	r3, [pc, #344]	; (8004bb4 <pvPortMalloc+0x178>)
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4013      	ands	r3, r2
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f040 808e 	bne.w	8004b82 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d01d      	beq.n	8004aa8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004a6c:	2208      	movs	r2, #8
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4413      	add	r3, r2
 8004a72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f003 0307 	and.w	r3, r3, #7
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d014      	beq.n	8004aa8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f023 0307 	bic.w	r3, r3, #7
 8004a84:	3308      	adds	r3, #8
 8004a86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f003 0307 	and.w	r3, r3, #7
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00a      	beq.n	8004aa8 <pvPortMalloc+0x6c>
	__asm volatile
 8004a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a96:	f383 8811 	msr	BASEPRI, r3
 8004a9a:	f3bf 8f6f 	isb	sy
 8004a9e:	f3bf 8f4f 	dsb	sy
 8004aa2:	617b      	str	r3, [r7, #20]
}
 8004aa4:	bf00      	nop
 8004aa6:	e7fe      	b.n	8004aa6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d069      	beq.n	8004b82 <pvPortMalloc+0x146>
 8004aae:	4b42      	ldr	r3, [pc, #264]	; (8004bb8 <pvPortMalloc+0x17c>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d864      	bhi.n	8004b82 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004ab8:	4b40      	ldr	r3, [pc, #256]	; (8004bbc <pvPortMalloc+0x180>)
 8004aba:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004abc:	4b3f      	ldr	r3, [pc, #252]	; (8004bbc <pvPortMalloc+0x180>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ac2:	e004      	b.n	8004ace <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d903      	bls.n	8004ae0 <pvPortMalloc+0xa4>
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1f1      	bne.n	8004ac4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004ae0:	4b33      	ldr	r3, [pc, #204]	; (8004bb0 <pvPortMalloc+0x174>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d04b      	beq.n	8004b82 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004aea:	6a3b      	ldr	r3, [r7, #32]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2208      	movs	r2, #8
 8004af0:	4413      	add	r3, r2
 8004af2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	6a3b      	ldr	r3, [r7, #32]
 8004afa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afe:	685a      	ldr	r2, [r3, #4]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	1ad2      	subs	r2, r2, r3
 8004b04:	2308      	movs	r3, #8
 8004b06:	005b      	lsls	r3, r3, #1
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d91f      	bls.n	8004b4c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4413      	add	r3, r2
 8004b12:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	f003 0307 	and.w	r3, r3, #7
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00a      	beq.n	8004b34 <pvPortMalloc+0xf8>
	__asm volatile
 8004b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b22:	f383 8811 	msr	BASEPRI, r3
 8004b26:	f3bf 8f6f 	isb	sy
 8004b2a:	f3bf 8f4f 	dsb	sy
 8004b2e:	613b      	str	r3, [r7, #16]
}
 8004b30:	bf00      	nop
 8004b32:	e7fe      	b.n	8004b32 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b36:	685a      	ldr	r2, [r3, #4]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	1ad2      	subs	r2, r2, r3
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b46:	69b8      	ldr	r0, [r7, #24]
 8004b48:	f000 f8f8 	bl	8004d3c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b4c:	4b1a      	ldr	r3, [pc, #104]	; (8004bb8 <pvPortMalloc+0x17c>)
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	4a18      	ldr	r2, [pc, #96]	; (8004bb8 <pvPortMalloc+0x17c>)
 8004b58:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b5a:	4b17      	ldr	r3, [pc, #92]	; (8004bb8 <pvPortMalloc+0x17c>)
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	4b18      	ldr	r3, [pc, #96]	; (8004bc0 <pvPortMalloc+0x184>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d203      	bcs.n	8004b6e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b66:	4b14      	ldr	r3, [pc, #80]	; (8004bb8 <pvPortMalloc+0x17c>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a15      	ldr	r2, [pc, #84]	; (8004bc0 <pvPortMalloc+0x184>)
 8004b6c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b70:	685a      	ldr	r2, [r3, #4]
 8004b72:	4b10      	ldr	r3, [pc, #64]	; (8004bb4 <pvPortMalloc+0x178>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	431a      	orrs	r2, r3
 8004b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7e:	2200      	movs	r2, #0
 8004b80:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004b82:	f7fe fc95 	bl	80034b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	f003 0307 	and.w	r3, r3, #7
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00a      	beq.n	8004ba6 <pvPortMalloc+0x16a>
	__asm volatile
 8004b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b94:	f383 8811 	msr	BASEPRI, r3
 8004b98:	f3bf 8f6f 	isb	sy
 8004b9c:	f3bf 8f4f 	dsb	sy
 8004ba0:	60fb      	str	r3, [r7, #12]
}
 8004ba2:	bf00      	nop
 8004ba4:	e7fe      	b.n	8004ba4 <pvPortMalloc+0x168>
	return pvReturn;
 8004ba6:	69fb      	ldr	r3, [r7, #28]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3728      	adds	r7, #40	; 0x28
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	20001a18 	.word	0x20001a18
 8004bb4:	20001a24 	.word	0x20001a24
 8004bb8:	20001a1c 	.word	0x20001a1c
 8004bbc:	20001a10 	.word	0x20001a10
 8004bc0:	20001a20 	.word	0x20001a20

08004bc4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b086      	sub	sp, #24
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d048      	beq.n	8004c68 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004bd6:	2308      	movs	r3, #8
 8004bd8:	425b      	negs	r3, r3
 8004bda:	697a      	ldr	r2, [r7, #20]
 8004bdc:	4413      	add	r3, r2
 8004bde:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	685a      	ldr	r2, [r3, #4]
 8004be8:	4b21      	ldr	r3, [pc, #132]	; (8004c70 <vPortFree+0xac>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4013      	ands	r3, r2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10a      	bne.n	8004c08 <vPortFree+0x44>
	__asm volatile
 8004bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf6:	f383 8811 	msr	BASEPRI, r3
 8004bfa:	f3bf 8f6f 	isb	sy
 8004bfe:	f3bf 8f4f 	dsb	sy
 8004c02:	60fb      	str	r3, [r7, #12]
}
 8004c04:	bf00      	nop
 8004c06:	e7fe      	b.n	8004c06 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00a      	beq.n	8004c26 <vPortFree+0x62>
	__asm volatile
 8004c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c14:	f383 8811 	msr	BASEPRI, r3
 8004c18:	f3bf 8f6f 	isb	sy
 8004c1c:	f3bf 8f4f 	dsb	sy
 8004c20:	60bb      	str	r3, [r7, #8]
}
 8004c22:	bf00      	nop
 8004c24:	e7fe      	b.n	8004c24 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	685a      	ldr	r2, [r3, #4]
 8004c2a:	4b11      	ldr	r3, [pc, #68]	; (8004c70 <vPortFree+0xac>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4013      	ands	r3, r2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d019      	beq.n	8004c68 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d115      	bne.n	8004c68 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	685a      	ldr	r2, [r3, #4]
 8004c40:	4b0b      	ldr	r3, [pc, #44]	; (8004c70 <vPortFree+0xac>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	43db      	mvns	r3, r3
 8004c46:	401a      	ands	r2, r3
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004c4c:	f7fe fc22 	bl	8003494 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	685a      	ldr	r2, [r3, #4]
 8004c54:	4b07      	ldr	r3, [pc, #28]	; (8004c74 <vPortFree+0xb0>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4413      	add	r3, r2
 8004c5a:	4a06      	ldr	r2, [pc, #24]	; (8004c74 <vPortFree+0xb0>)
 8004c5c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c5e:	6938      	ldr	r0, [r7, #16]
 8004c60:	f000 f86c 	bl	8004d3c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004c64:	f7fe fc24 	bl	80034b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004c68:	bf00      	nop
 8004c6a:	3718      	adds	r7, #24
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	20001a24 	.word	0x20001a24
 8004c74:	20001a1c 	.word	0x20001a1c

08004c78 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c7e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004c82:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004c84:	4b27      	ldr	r3, [pc, #156]	; (8004d24 <prvHeapInit+0xac>)
 8004c86:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f003 0307 	and.w	r3, r3, #7
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00c      	beq.n	8004cac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	3307      	adds	r3, #7
 8004c96:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f023 0307 	bic.w	r3, r3, #7
 8004c9e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004ca0:	68ba      	ldr	r2, [r7, #8]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	4a1f      	ldr	r2, [pc, #124]	; (8004d24 <prvHeapInit+0xac>)
 8004ca8:	4413      	add	r3, r2
 8004caa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004cb0:	4a1d      	ldr	r2, [pc, #116]	; (8004d28 <prvHeapInit+0xb0>)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004cb6:	4b1c      	ldr	r3, [pc, #112]	; (8004d28 <prvHeapInit+0xb0>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	68ba      	ldr	r2, [r7, #8]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004cc4:	2208      	movs	r2, #8
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	1a9b      	subs	r3, r3, r2
 8004cca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f023 0307 	bic.w	r3, r3, #7
 8004cd2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	4a15      	ldr	r2, [pc, #84]	; (8004d2c <prvHeapInit+0xb4>)
 8004cd8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004cda:	4b14      	ldr	r3, [pc, #80]	; (8004d2c <prvHeapInit+0xb4>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004ce2:	4b12      	ldr	r3, [pc, #72]	; (8004d2c <prvHeapInit+0xb4>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	1ad2      	subs	r2, r2, r3
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004cf8:	4b0c      	ldr	r3, [pc, #48]	; (8004d2c <prvHeapInit+0xb4>)
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	4a0a      	ldr	r2, [pc, #40]	; (8004d30 <prvHeapInit+0xb8>)
 8004d06:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	4a09      	ldr	r2, [pc, #36]	; (8004d34 <prvHeapInit+0xbc>)
 8004d0e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d10:	4b09      	ldr	r3, [pc, #36]	; (8004d38 <prvHeapInit+0xc0>)
 8004d12:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004d16:	601a      	str	r2, [r3, #0]
}
 8004d18:	bf00      	nop
 8004d1a:	3714      	adds	r7, #20
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bc80      	pop	{r7}
 8004d20:	4770      	bx	lr
 8004d22:	bf00      	nop
 8004d24:	20000e10 	.word	0x20000e10
 8004d28:	20001a10 	.word	0x20001a10
 8004d2c:	20001a18 	.word	0x20001a18
 8004d30:	20001a20 	.word	0x20001a20
 8004d34:	20001a1c 	.word	0x20001a1c
 8004d38:	20001a24 	.word	0x20001a24

08004d3c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d44:	4b27      	ldr	r3, [pc, #156]	; (8004de4 <prvInsertBlockIntoFreeList+0xa8>)
 8004d46:	60fb      	str	r3, [r7, #12]
 8004d48:	e002      	b.n	8004d50 <prvInsertBlockIntoFreeList+0x14>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	60fb      	str	r3, [r7, #12]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d8f7      	bhi.n	8004d4a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	68ba      	ldr	r2, [r7, #8]
 8004d64:	4413      	add	r3, r2
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d108      	bne.n	8004d7e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	685a      	ldr	r2, [r3, #4]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	441a      	add	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	68ba      	ldr	r2, [r7, #8]
 8004d88:	441a      	add	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d118      	bne.n	8004dc4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	4b14      	ldr	r3, [pc, #80]	; (8004de8 <prvInsertBlockIntoFreeList+0xac>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d00d      	beq.n	8004dba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685a      	ldr	r2, [r3, #4]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	441a      	add	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	601a      	str	r2, [r3, #0]
 8004db8:	e008      	b.n	8004dcc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004dba:	4b0b      	ldr	r3, [pc, #44]	; (8004de8 <prvInsertBlockIntoFreeList+0xac>)
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	601a      	str	r2, [r3, #0]
 8004dc2:	e003      	b.n	8004dcc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d002      	beq.n	8004dda <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004dda:	bf00      	nop
 8004ddc:	3714      	adds	r7, #20
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bc80      	pop	{r7}
 8004de2:	4770      	bx	lr
 8004de4:	20001a10 	.word	0x20001a10
 8004de8:	20001a18 	.word	0x20001a18

08004dec <memset>:
 8004dec:	4603      	mov	r3, r0
 8004dee:	4402      	add	r2, r0
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d100      	bne.n	8004df6 <memset+0xa>
 8004df4:	4770      	bx	lr
 8004df6:	f803 1b01 	strb.w	r1, [r3], #1
 8004dfa:	e7f9      	b.n	8004df0 <memset+0x4>

08004dfc <__libc_init_array>:
 8004dfc:	b570      	push	{r4, r5, r6, lr}
 8004dfe:	2600      	movs	r6, #0
 8004e00:	4d0c      	ldr	r5, [pc, #48]	; (8004e34 <__libc_init_array+0x38>)
 8004e02:	4c0d      	ldr	r4, [pc, #52]	; (8004e38 <__libc_init_array+0x3c>)
 8004e04:	1b64      	subs	r4, r4, r5
 8004e06:	10a4      	asrs	r4, r4, #2
 8004e08:	42a6      	cmp	r6, r4
 8004e0a:	d109      	bne.n	8004e20 <__libc_init_array+0x24>
 8004e0c:	f000 f828 	bl	8004e60 <_init>
 8004e10:	2600      	movs	r6, #0
 8004e12:	4d0a      	ldr	r5, [pc, #40]	; (8004e3c <__libc_init_array+0x40>)
 8004e14:	4c0a      	ldr	r4, [pc, #40]	; (8004e40 <__libc_init_array+0x44>)
 8004e16:	1b64      	subs	r4, r4, r5
 8004e18:	10a4      	asrs	r4, r4, #2
 8004e1a:	42a6      	cmp	r6, r4
 8004e1c:	d105      	bne.n	8004e2a <__libc_init_array+0x2e>
 8004e1e:	bd70      	pop	{r4, r5, r6, pc}
 8004e20:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e24:	4798      	blx	r3
 8004e26:	3601      	adds	r6, #1
 8004e28:	e7ee      	b.n	8004e08 <__libc_init_array+0xc>
 8004e2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e2e:	4798      	blx	r3
 8004e30:	3601      	adds	r6, #1
 8004e32:	e7f2      	b.n	8004e1a <__libc_init_array+0x1e>
 8004e34:	08004fb0 	.word	0x08004fb0
 8004e38:	08004fb0 	.word	0x08004fb0
 8004e3c:	08004fb0 	.word	0x08004fb0
 8004e40:	08004fb4 	.word	0x08004fb4

08004e44 <memcpy>:
 8004e44:	440a      	add	r2, r1
 8004e46:	4291      	cmp	r1, r2
 8004e48:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e4c:	d100      	bne.n	8004e50 <memcpy+0xc>
 8004e4e:	4770      	bx	lr
 8004e50:	b510      	push	{r4, lr}
 8004e52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e56:	4291      	cmp	r1, r2
 8004e58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e5c:	d1f9      	bne.n	8004e52 <memcpy+0xe>
 8004e5e:	bd10      	pop	{r4, pc}

08004e60 <_init>:
 8004e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e62:	bf00      	nop
 8004e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e66:	bc08      	pop	{r3}
 8004e68:	469e      	mov	lr, r3
 8004e6a:	4770      	bx	lr

08004e6c <_fini>:
 8004e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e6e:	bf00      	nop
 8004e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e72:	bc08      	pop	{r3}
 8004e74:	469e      	mov	lr, r3
 8004e76:	4770      	bx	lr
